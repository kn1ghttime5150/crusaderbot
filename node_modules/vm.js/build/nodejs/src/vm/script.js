(function() {
  var Script, instructionsFromJson, instructionsToJson, opcodes, regexpFromString, regexpToString, scriptFromJson, scriptToJson;

  opcodes = require('./opcodes');

  scriptToJson = function(script) {
    var guard, regexp, rv, s, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    rv = [script.filename || 0, script.name || 0, instructionsToJson(script.instructions), [], script.localNames, [], script.stackSize, script.strings, []];
    _ref = script.scripts;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      rv[3].push(scriptToJson(s));
    }
    _ref1 = script.guards;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      guard = _ref1[_j];
      rv[5].push([guard.start || -1, guard.handler || -1, guard.finalizer || -1, guard.end || -1]);
    }
    _ref2 = script.regexps;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      regexp = _ref2[_k];
      rv[8].push(regexpToString(regexp));
    }
    rv[9] = script.source || 0;
    return rv;
  };

  scriptFromJson = function(json) {
    var filename, guard, guards, instructions, localLength, localNames, name, regexp, regexps, s, scripts, source, stackSize, strings, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    filename = json[0] !== 0 ? json[0] : null;
    name = json[1] !== 0 ? json[1] : null;
    instructions = instructionsFromJson(json[2]);
    scripts = [];
    localNames = json[4];
    localLength = localNames.length;
    guards = [];
    stackSize = json[6];
    strings = json[7];
    regexps = [];
    _ref = json[3];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      scripts.push(scriptFromJson(s));
    }
    _ref1 = json[5];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      guard = _ref1[_j];
      guards.push({
        start: guard[0] !== -1 ? guard[0] : null,
        handler: guard[1] !== -1 ? guard[1] : null,
        finalizer: guard[2] !== -1 ? guard[2] : null,
        end: guard[3] !== -1 ? guard[3] : null
      });
    }
    _ref2 = json[8];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      regexp = _ref2[_k];
      regexps.push(regexpFromString(regexp));
    }
    source = json[9] !== 0 ? json[9] : null;
    return new Script(filename, name, instructions, scripts, localNames, localLength, guards, stackSize, strings, regexps, source);
  };

  instructionsToJson = function(instructions) {
    var a, code, inst, rv, _i, _j, _len, _len1, _ref;
    rv = [];
    for (_i = 0, _len = instructions.length; _i < _len; _i++) {
      inst = instructions[_i];
      code = [inst.id];
      if (inst.args) {
        _ref = inst.args;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          a = _ref[_j];
          if (a != null) {
            code.push(a);
          } else {
            code.push(null);
          }
        }
      }
      rv.push(code);
    }
    return rv;
  };

  instructionsFromJson = function(instructions) {
    var args, i, inst, klass, opcode, rv, _i, _j, _len, _ref;
    rv = [];
    for (_i = 0, _len = instructions.length; _i < _len; _i++) {
      inst = instructions[_i];
      klass = opcodes[inst[0]];
      args = [];
      for (i = _j = 1, _ref = inst.length; 1 <= _ref ? _j < _ref : _j > _ref; i = 1 <= _ref ? ++_j : --_j) {
        args.push(inst[i]);
      }
      opcode = new klass(args.length ? args : null);
      rv.push(opcode);
    }
    return rv;
  };

  regexpToString = function(regexp) {
    var rv;
    rv = regexp.source + '/';
    rv += regexp.global ? 'g' : '';
    rv += regexp.ignoreCase ? 'i' : '';
    rv += regexp.multiline ? 'm' : '';
    return rv;
  };

  regexpFromString = function(str) {
    var flags, sliceIdx, source;
    sliceIdx = str.lastIndexOf('/');
    source = str.slice(0, sliceIdx);
    flags = str.slice(sliceIdx + 1);
    return new RegExp(source, flags);
  };

  Script = (function() {
    function Script(filename, name, instructions, scripts, localNames, localLength, guards, stackSize, strings, regexps, source) {
      this.filename = filename;
      this.name = name;
      this.instructions = instructions;
      this.scripts = scripts;
      this.localNames = localNames;
      this.localLength = localLength;
      this.guards = guards;
      this.stackSize = stackSize;
      this.strings = strings;
      this.regexps = regexps;
      this.source = source;
    }

    Script.prototype.toJSON = function() {
      return scriptToJson(this);
    };

    Script.fromJSON = scriptFromJson;

    Script.regexpToString = regexpToString;

    return Script;

  })();

  module.exports = Script;

}).call(this);


//@ sourceMappingURL=script.js.map