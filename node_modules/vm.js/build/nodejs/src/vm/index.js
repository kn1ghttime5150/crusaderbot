(function() {
  var ConstantFolder, Emitter, Fiber, Realm, Script, Transformer, Vm, compile, esprima;

  esprima = require('esprima');

  Transformer = require('../ast/transformer');

  Realm = require('../runtime/realm');

  ConstantFolder = require('../ast/constant_folder');

  Emitter = require('./emitter');

  Fiber = require('./thread').Fiber;

  Script = require('./script');

  Vm = (function() {
    function Vm(merge, allowEval) {
      if (allowEval == null) {
        allowEval = false;
      }
      this.realm = new Realm(merge);
      if (allowEval) {
        this.realm.compileFunction = Vm.compileFunction;
        this.realm["eval"] = this.realm.global["eval"] = Vm.compileEval;
      }
    }

    Vm.prototype["eval"] = function(string, filename, timeout) {
      return this.run(Vm.compile(string, filename), timeout);
    };

    Vm.prototype.run = function(script, timeout) {
      var fiber;
      fiber = this.createFiber(script, timeout);
      fiber.run();
      if (!fiber.paused) {
        return fiber.rexp;
      }
    };

    Vm.prototype.createFiber = function(script, timeout) {
      var fiber;
      fiber = new Fiber(this.realm, timeout);
      fiber.pushFrame(script, this.realm.global);
      return fiber;
    };

    Vm.compile = function(source, filename) {
      var emitter;
      if (filename == null) {
        filename = '<script>';
      }
      emitter = new Emitter(null, filename, null, source.split('\n'));
      return compile(source, emitter);
    };

    Vm.compileEval = function(frame, source) {
      var emitter, names, scope, scopes;
      scopes = [];
      scope = frame.scope;
      while (scope) {
        scopes.push(scope.namesHash());
        scope = scope.parent;
      }
      emitter = new Emitter(scopes, '<eval>', 'eval', source.split('\n'));
      if (frame.scope) {
        emitter.varIndex = frame.scope.data.length;
        names = frame.scope.names.slice();
        names[0] = 'this';
        names[1] = 'arguments';
        emitter.localNames = names;
      }
      return compile(source, emitter);
    };

    Vm.compileFunction = function(args) {
      var body, emitter, functionArgs, i, program, source, _i, _ref;
      functionArgs = [];
      if (args.length > 1) {
        for (i = _i = 0, _ref = args.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          functionArgs = functionArgs.concat(args[i].split(','));
        }
      }
      body = args[args.length - 1];
      source = "(function(" + (functionArgs.join(', ')) + ") {\n" + body + "\n})";
      emitter = new Emitter([
        {
          "this": 0,
          "arguments": 1
        }
      ], '<eval>', null, source.split('\n'));
      program = compile(source, emitter);
      return program.scripts[0];
    };

    Vm.fromJSON = Script.fromJSON;

    Vm.parse = esprima.parse;

    return Vm;

  })();

  compile = function(source, emitter) {
    var ast, transformer;
    transformer = new Transformer(new ConstantFolder(), emitter);
    ast = esprima.parse(source, {
      loc: true
    });
    transformer.transform(ast);
    return emitter.end();
  };

  module.exports = Vm;

}).call(this);


//@ sourceMappingURL=index.js.map