(function() {
  var AccessorPropertyDescriptor, ArrayIterator, CowObjectMetadata, DataPropertyDescriptor, ObjectMetadata, PropertyDescriptor, RestrictedObjectMetadata, hasProp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ArrayIterator = require('./builtin').ArrayIterator;

  hasProp = require('./util').hasProp;

  PropertyDescriptor = (function() {
    function PropertyDescriptor(enumerable, configurable) {
      this.enumerable = enumerable != null ? enumerable : false;
      this.configurable = configurable != null ? configurable : false;
    }

    return PropertyDescriptor;

  })();

  DataPropertyDescriptor = (function(_super) {
    __extends(DataPropertyDescriptor, _super);

    function DataPropertyDescriptor(value, writable, enumerable, configurable) {
      this.value = value;
      this.writable = writable != null ? writable : false;
      DataPropertyDescriptor.__super__.constructor.call(this, enumerable, configurable);
    }

    return DataPropertyDescriptor;

  })(PropertyDescriptor);

  AccessorPropertyDescriptor = (function(_super) {
    __extends(AccessorPropertyDescriptor, _super);

    function AccessorPropertyDescriptor(get, set, enumerable, configurable) {
      this.get = get;
      this.set = set;
      AccessorPropertyDescriptor.__super__.constructor.call(this, enumerable, configurable);
    }

    return AccessorPropertyDescriptor;

  })(PropertyDescriptor);

  ObjectMetadata = (function() {
    function ObjectMetadata(object, realm) {
      this.object = object;
      this.realm = realm;
      this.proto = null;
      this.properties = {};
      this.extensible = true;
    }

    ObjectMetadata.prototype.hasDefProperty = function(key) {
      return hasProp(this.properties, key);
    };

    ObjectMetadata.prototype.hasOwnProperty = function(key) {
      return this.hasDefProperty(key) || hasProp(this.object, key);
    };

    ObjectMetadata.prototype.getOwnProperty = function(key) {
      return this.properties[key] || this.object[key];
    };

    ObjectMetadata.prototype.setOwnProperty = function(key, value) {
      return this.object[key] = value;
    };

    ObjectMetadata.prototype.delOwnProperty = function(key) {
      return delete this.properties[key] && delete this.object[key];
    };

    ObjectMetadata.prototype.delDefProperty = function(key) {
      return delete this.properties[key];
    };

    ObjectMetadata.prototype.searchProperty = function(key) {
      var md, prop;
      md = this;
      while (md) {
        if (md.hasOwnProperty(key)) {
          prop = md.getOwnProperty(key);
          break;
        }
        md = md.proto || this.realm.mdproto(md.object);
      }
      return prop;
    };

    ObjectMetadata.prototype.has = function(key, target) {
      var md;
      if (target == null) {
        target = this.object;
      }
      md = this;
      while (md) {
        if (md.hasOwnProperty(key)) {
          return true;
        }
        md = md.proto || this.realm.mdproto(md.object);
      }
      return false;
    };

    ObjectMetadata.prototype.get = function(key, target) {
      var property;
      if (target == null) {
        target = this.object;
      }
      property = this.searchProperty(key);
      if (property instanceof AccessorPropertyDescriptor) {
        return property.get.call(target);
      }
      if (property instanceof DataPropertyDescriptor) {
        return property.value;
      }
      return property;
    };

    ObjectMetadata.prototype.set = function(key, value, target) {
      var property;
      if (target == null) {
        target = this.object;
      }
      property = this.getOwnProperty(key);
      if (property instanceof AccessorPropertyDescriptor) {
        if (property.set) {
          property.set.call(target, value);
          return true;
        }
        return false;
      }
      if (property instanceof DataPropertyDescriptor) {
        if (property.writable) {
          property.value = value;
          return true;
        }
        return false;
      }
      if (property === void 0 && !this.extensible) {
        return false;
      }
      this.setOwnProperty(key, value);
      return true;
    };

    ObjectMetadata.prototype.del = function(key) {
      var property;
      if (!this.hasOwnProperty(key)) {
        return false;
      }
      property = this.getOwnProperty(key);
      if (property instanceof PropertyDescriptor && !property.configurable) {
        return false;
      }
      this.delOwnProperty(key);
      return true;
    };

    ObjectMetadata.prototype.defineProperty = function(key, descriptor) {
      var prop;
      if (!this.extensible) {
        return false;
      }
      if ('value' in descriptor || 'writable' in descriptor) {
        prop = new DataPropertyDescriptor(descriptor.value, descriptor.writable, descriptor.enumerable, descriptor.configurable);
      } else if (typeof descriptor.get === 'function') {
        prop = new AccessorPropertyDescriptor(descriptor.get, descriptor.set, descriptor.enumerable, descriptor.writable);
      } else {
        return;
      }
      this.properties[key] = prop;
      return true;
    };

    ObjectMetadata.prototype.instanceOf = function(klass) {
      var md, proto;
      md = this;
      while (md !== null) {
        if (md.object === klass.prototype) {
          return true;
        }
        proto = md.proto;
        if (!proto) {
          return md.object instanceof klass;
        }
        md = proto;
      }
      return false;
    };

    ObjectMetadata.prototype.isEnumerable = function(k) {
      var v;
      v = this.properties[k] || this.object[k];
      return !(v instanceof PropertyDescriptor) || v.enumerable;
    };

    ObjectMetadata.prototype.ownKeys = function() {
      var k, keys, _ref, _ref1;
      keys = [];
      _ref = this.object;
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        if (this.isEnumerable(k)) {
          keys.push(k);
        }
      }
      _ref1 = this.properties;
      for (k in _ref1) {
        if (!__hasProp.call(_ref1, k)) continue;
        if (this.isEnumerable(k)) {
          keys.push(k);
        }
      }
      return keys;
    };

    ObjectMetadata.prototype.enumerateKeys = function() {
      var keys, md;
      keys = [];
      md = this;
      while (md) {
        keys = keys.concat(md.ownKeys());
        md = md.proto || this.realm.mdproto(md.object);
      }
      return new ArrayIterator(keys);
    };

    return ObjectMetadata;

  })();

  CowObjectMetadata = (function(_super) {
    __extends(CowObjectMetadata, _super);

    function CowObjectMetadata(object, realm) {
      CowObjectMetadata.__super__.constructor.call(this, object, realm);
      this.exclude = {};
    }

    CowObjectMetadata.prototype.hasOwnProperty = function(key) {
      return hasProp(this.properties, key) || (hasProp(this.object, key) && !hasProp(this.exclude, key));
    };

    CowObjectMetadata.prototype.getOwnProperty = function(key) {
      if (hasProp(this.properties, key)) {
        return this.properties[key];
      }
      if (hasProp(this.object, key) && !hasProp(this.exclude, key)) {
        return this.object[key];
      }
      return void 0;
    };

    CowObjectMetadata.prototype.setOwnProperty = function(key, value) {
      if (hasProp(this.exclude, key)) {
        delete this.exclude[key];
      }
      if (!hasProp(this.properties, key)) {
        this.defineProperty(key, {
          value: value,
          writable: true,
          enumerable: true,
          configurable: true
        });
      }
      return this.properties[key].value = value;
    };

    CowObjectMetadata.prototype.delOwnProperty = function(key) {
      if (hasProp(this.properties, key)) {
        delete this.properties[key];
      }
      return this.exclude[key] = null;
    };

    CowObjectMetadata.prototype.isEnumerable = function(k) {
      if (!CowObjectMetadata.__super__.isEnumerable.call(this, k)) {
        return false;
      }
      return !hasProp(this.exclude, k);
    };

    return CowObjectMetadata;

  })(ObjectMetadata);

  RestrictedObjectMetadata = (function(_super) {
    __extends(RestrictedObjectMetadata, _super);

    function RestrictedObjectMetadata(object, realm) {
      RestrictedObjectMetadata.__super__.constructor.call(this, object, realm);
      this.leak = {};
    }

    RestrictedObjectMetadata.prototype.hasOwnProperty = function(key) {
      return hasProp(this.properties, key) || (hasProp(this.leak, key) && hasProp(this.object, key) && !hasProp(this.exclude, key));
    };

    RestrictedObjectMetadata.prototype.getOwnProperty = function(key) {
      if (hasProp(this.properties, key)) {
        return this.properties[key];
      }
      if (hasProp(this.leak, key) && hasProp(this.object, key) && !hasProp(this.exclude, key)) {
        return this.object[key];
      }
      return void 0;
    };

    RestrictedObjectMetadata.prototype.isEnumerable = function(k) {
      if (!RestrictedObjectMetadata.__super__.isEnumerable.call(this, k)) {
        return false;
      }
      return hasProp(this.leak, k);
    };

    return RestrictedObjectMetadata;

  })(CowObjectMetadata);

  exports.ObjectMetadata = ObjectMetadata;

  exports.CowObjectMetadata = CowObjectMetadata;

  exports.RestrictedObjectMetadata = RestrictedObjectMetadata;

}).call(this);


//@ sourceMappingURL=metadata.js.map