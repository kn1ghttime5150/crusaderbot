(function() {
  var VmError, VmEvalError, VmRangeError, VmReferenceError, VmSyntaxError, VmTimeoutError, VmTypeError, VmURIError, isArray, printTrace, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  isArray = require('./util').isArray;

  printTrace = function(trace, indent) {
    var c, filename, frame, l, name, rv, _i, _len;
    if (indent == null) {
      indent = '';
    }
    indent += '    ';
    rv = '';
    for (_i = 0, _len = trace.length; _i < _len; _i++) {
      frame = trace[_i];
      if (isArray(frame)) {
        rv += "\n\n" + indent + "Rethrown:";
        rv += printTrace(frame, indent);
        continue;
      }
      l = frame.line;
      c = frame.column;
      name = frame.at.name;
      filename = frame.at.filename;
      if (name) {
        rv += "\n" + indent + "at " + name + " (" + filename + ":" + l + ":" + c + ")";
      } else {
        rv += "\n" + indent + "at " + filename + ":" + l + ":" + c;
      }
    }
    return rv;
  };

  VmError = (function() {
    function VmError(message) {
      var trace;
      this.message = message;
      trace = null;
    }

    VmError.prototype.toString = function() {
      var errName, rv;
      errName = this.constructor.display;
      rv = "" + errName + ": " + this.message;
      if (this.trace) {
        rv += printTrace(this.trace);
      }
      return rv;
    };

    return VmError;

  })();

  VmEvalError = (function(_super) {
    __extends(VmEvalError, _super);

    function VmEvalError() {
      _ref = VmEvalError.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    VmEvalError.display = 'EvalError';

    return VmEvalError;

  })(VmError);

  VmRangeError = (function(_super) {
    __extends(VmRangeError, _super);

    function VmRangeError() {
      _ref1 = VmRangeError.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    VmRangeError.display = 'RangeError';

    return VmRangeError;

  })(VmError);

  VmReferenceError = (function(_super) {
    __extends(VmReferenceError, _super);

    function VmReferenceError() {
      _ref2 = VmReferenceError.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    VmReferenceError.display = 'ReferenceError';

    return VmReferenceError;

  })(VmError);

  VmSyntaxError = (function(_super) {
    __extends(VmSyntaxError, _super);

    function VmSyntaxError() {
      _ref3 = VmSyntaxError.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    VmSyntaxError.display = 'SyntaxError';

    return VmSyntaxError;

  })(VmError);

  VmTypeError = (function(_super) {
    __extends(VmTypeError, _super);

    function VmTypeError() {
      _ref4 = VmTypeError.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    VmTypeError.display = 'TypeError';

    return VmTypeError;

  })(VmError);

  VmURIError = (function(_super) {
    __extends(VmURIError, _super);

    function VmURIError() {
      _ref5 = VmURIError.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    VmURIError.display = 'URIError';

    return VmURIError;

  })(VmError);

  VmTimeoutError = (function(_super) {
    __extends(VmTimeoutError, _super);

    VmTimeoutError.display = 'TimeoutError';

    function VmTimeoutError(fiber) {
      this.fiber = fiber;
      VmTimeoutError.__super__.constructor.call(this, "Script timed out");
    }

    return VmTimeoutError;

  })(VmError);

  exports.VmError = VmError;

  exports.VmEvalError = VmEvalError;

  exports.VmRangeError = VmRangeError;

  exports.VmReferenceError = VmReferenceError;

  exports.VmSyntaxError = VmSyntaxError;

  exports.VmTypeError = VmTypeError;

  exports.VmURIError = VmURIError;

  exports.VmTimeoutError = VmTimeoutError;

}).call(this);


//@ sourceMappingURL=errors.js.map