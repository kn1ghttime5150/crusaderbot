(function() {
  var ArrayIterator, CowObjectMetadata, ObjectMetadata, Realm, RegExpProxy, RestrictedObjectMetadata, StopIteration, VmError, VmEvalError, VmRangeError, VmReferenceError, VmSyntaxError, VmTypeError, VmURIError, create, defProp, hasProp, isArray, prototypeOf, runtimeProperties, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty;

  _ref = require('./errors'), VmError = _ref.VmError, VmEvalError = _ref.VmEvalError, VmRangeError = _ref.VmRangeError, VmReferenceError = _ref.VmReferenceError, VmSyntaxError = _ref.VmSyntaxError, VmTypeError = _ref.VmTypeError, VmURIError = _ref.VmURIError;

  _ref1 = require('./metadata'), ObjectMetadata = _ref1.ObjectMetadata, CowObjectMetadata = _ref1.CowObjectMetadata, RestrictedObjectMetadata = _ref1.RestrictedObjectMetadata;

  _ref2 = require('./util'), defProp = _ref2.defProp, isArray = _ref2.isArray, prototypeOf = _ref2.prototypeOf, create = _ref2.create, hasProp = _ref2.hasProp;

  RegExpProxy = require('./regexp_proxy');

  _ref3 = require('./builtin'), ArrayIterator = _ref3.ArrayIterator, StopIteration = _ref3.StopIteration;

  runtimeProperties = {
    '__mdid__': null,
    '__md__': null,
    '__vmfunction__': null,
    '__fiber__': null,
    '__callname__': null,
    '__construct__': null,
    '__source__': null,
    '__name__': null
  };

  Realm = (function() {
    function Realm(merge) {
      var currentId, defineProperty, getOwnPropertyDescriptor, getPrototypeOf, global, hasOwnProperty, k, nativeMetadata, register, v,
        _this = this;
      global = {
        undefined: void 0,
        Object: Object,
        Function: Function,
        Number: Number,
        Boolean: Boolean,
        String: String,
        Array: Array,
        Date: Date,
        RegExp: RegExp,
        Error: VmError,
        EvalError: VmEvalError,
        RangeError: VmRangeError,
        ReferenceError: VmReferenceError,
        SyntaxError: VmSyntaxError,
        TypeError: VmTypeError,
        URIError: VmURIError,
        StopIteration: StopIteration,
        Math: Math,
        JSON: JSON,
        parseInt: parseInt,
        parseFloat: parseFloat
      };
      global.global = global;
      nativeMetadata = {};
      currentId = 0;
      hasOwnProperty = function(obj, key) {
        var md, mdid, objType, type;
        type = typeof obj;
        objType = type === 'object' || type === 'function';
        if (hasProp(runtimeProperties, key)) {
          if (objType) {
            if (hasProp(obj, '__mdid__')) {
              md = nativeMetadata[obj.__mdid__];
            } else if (hasProp(obj, '__md__')) {
              md = obj.__md__;
            }
            if (md) {
              return md.hasDefProperty(key);
            }
          }
          return false;
        }
        mdid = obj.__mdid__;
        md = nativeMetadata[obj.__mdid__];
        if (md && md.object === obj || !objType) {
          return md.hasOwnProperty(key, obj);
        }
        if (hasProp(obj, '__md__')) {
          return obj.__md__.hasOwnProperty(key);
        }
        return hasProp(obj, key);
      };
      register = function(obj, restrict) {
        var k, type, _i, _len;
        if (!hasProp(obj, '__mdid__')) {
          defProp(obj, '__mdid__', {
            value: currentId + 1,
            writable: true
          });
        }
        currentId = Math.max(obj.__mdid__, currentId);
        if (hasProp(nativeMetadata, obj.__mdid__)) {
          return;
        }
        type = typeof restrict;
        if (type === 'boolean' && type) {
          return nativeMetadata[obj.__mdid__] = new CowObjectMetadata(obj, _this);
        }
        if (type === 'object') {
          nativeMetadata[obj.__mdid__] = new RestrictedObjectMetadata(obj, _this);
          if (isArray(restrict)) {
            for (_i = 0, _len = restrict.length; _i < _len; _i++) {
              k = restrict[_i];
              if (hasProp(obj, k)) {
                nativeMetadata[obj.__mdid__].leak[k] = null;
                register(obj[k], true);
              }
            }
          } else {
            for (k in restrict) {
              if (!__hasProp.call(restrict, k)) continue;
              if (hasProp(obj, k)) {
                nativeMetadata[obj.__mdid__].leak[k] = null;
                register(obj[k], restrict[k]);
              }
            }
          }
          return;
        }
        return nativeMetadata[obj.__mdid__] = new ObjectMetadata(obj);
      };
      getPrototypeOf = function(obj) {
        var proto;
        if (hasProp(obj, '__mdid__')) {
          proto = nativeMetadata[obj.__mdid__].proto;
        } else if (hasProp(obj, '__md__')) {
          proto = obj.__md__.proto;
        }
        if (proto) {
          return proto;
        }
        return prototypeOf(obj);
      };
      getOwnPropertyDescriptor = function(obj, key) {};
      defineProperty = function(obj, key, descriptor) {
        var objType, type;
        type = typeof obj;
        objType = type === 'object' || type === 'function';
        if (objType) {
          if (hasProp(obj, '__mdid__')) {
            nativeMetadata[obj.__mdid__].defineProperty(key, descriptor);
          } else {
            if (!hasProp(runtimeProperties, key) && hasProp(descriptor, 'value') && hasProp(descriptor, 'writable') && descriptor.writable && hasProp(descriptor, 'enumerable') && descriptor.enumerable && hasProp(descriptor, 'configurable') && descriptor.configurable) {
              obj[key] = descriptor.value;
            } else {
              if (!hasProp(obj, '__md__')) {
                defProp(obj, '__md__', {
                  value: new ObjectMetadata(obj, _this),
                  writable: true
                });
              }
              obj.__md__.defineProperty(key, descriptor);
            }
          }
        }
        return void 0;
      };
      register(Object, {
        'prototype': ['constructor', 'toString']
      });
      register(Function, {
        'prototype': ['constructor', 'apply', 'call', 'toString']
      });
      register(Number, {
        'isNaN': true,
        'isFinite': true,
        'prototype': ['constructor', 'toExponential', 'toFixed', 'toLocaleString', 'toPrecision', 'toString', 'valueOf']
      });
      register(Boolean, {
        'prototype': ['constructor', 'toString', 'valueOf']
      });
      register(String, {
        'fromCharCode': true,
        'prototype': ['constructor', 'charAt', 'charCodeAt', 'concat', 'contains', 'indexOf', 'lastIndexOf', 'replace', 'search', 'slice', 'split', 'substr', 'substring', 'toLowerCase', 'toString', 'toUpperCase', 'valueOf']
      });
      register(Array, {
        'isArray': true,
        'every': true,
        'prototype': ['constructor', 'join', 'reverse', 'sort', 'push', 'pop', 'shift', 'unshift', 'splice', 'concat', 'slice', 'indexOf', 'lastIndexOf', 'forEach', 'map', 'reduce', 'reduceRight', 'filter', 'some', 'every']
      });
      register(Date, {
        'now': true,
        'parse': true,
        'UTC': true,
        'prototype': ['constructor', 'getDate', 'getDay', 'getFullYear', 'getHours', 'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds', 'getTime', 'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear', 'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCSeconds', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds', 'setMinutes', 'setMonth', 'setSeconds', 'setUTCDate', 'setUTCDay', 'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCSeconds', 'toDateString', 'toISOString', 'toJSON', 'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString', 'toString', 'toTimeString', 'toUTCString', 'valueOf']
      });
      register(RegExp, {
        'prototype': ['constructor', 'exec', 'test', 'toString']
      });
      register(Math, ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'imul', 'log', 'max', 'min', 'pow', 'random', 'round', 'sin', 'sqrt', 'tan']);
      register(JSON, ['parse', 'stringify']);
      register(parseFloat, true);
      register(parseInt, true);
      register(ArrayIterator, ['prototype']);
      register(RegExpProxy, ['prototype']);
      nativeMetadata[Object.__mdid__].properties = {
        create: create,
        getPrototypeOf: getPrototypeOf,
        defineProperty: defineProperty
      };
      nativeMetadata[Object.prototype.__mdid__].properties = {
        hasOwnProperty: function(key) {
          return hasOwnProperty(this, key);
        }
      };
      nativeMetadata[Function.prototype.__mdid__].properties = {
        toString: function() {
          if (this.__vmfunction__) {
            return this.__source__;
          }
          return this.toString();
        }
      };
      nativeMetadata[Array.prototype.__mdid__].properties = {
        iterator: function() {
          return new ArrayIterator(this);
        }
      };
      nativeMetadata[String.prototype.__mdid__].properties = {
        match: function(obj) {
          if (obj instanceof RegExpProxy) {
            return this.match(obj.regexp);
          }
          return this.match(obj);
        },
        replace: function(obj) {
          var args;
          args = Array.prototype.slice.call(arguments);
          if (obj instanceof RegExpProxy) {
            args[0] = obj.regexp;
          }
          return this.replace.apply(this, args);
        }
      };
      nativeMetadata[RegExp.prototype.__mdid__].properties = {
        exec: function(str) {
          var rv;
          if (this instanceof RegExpProxy) {
            this.regexp.lastIndex = this.lastIndex;
            rv = this.regexp.exec(str);
            this.lastIndex = this.regexp.lastIndex;
            return rv;
          }
          return this.exec(str);
        },
        test: function(str) {
          var rv;
          if (this instanceof RegExpProxy) {
            this.regexp.lastIndex = this.lastIndex;
            rv = this.regexp.test(str);
            this.lastIndex = this.regexp.lastIndex;
            return rv;
          }
          return this.test(str);
        },
        toString: function() {
          if (this instanceof RegExpProxy) {
            return this.regexp.toString();
          }
          return this.toString();
        }
      };
      this.mdproto = function(obj) {
        var proto;
        proto = prototypeOf(obj);
        if (proto) {
          return nativeMetadata[proto.__mdid__];
        }
      };
      this.has = function(obj, key) {
        var md, mdid, objType, type;
        if (obj == null) {
          return false;
        }
        type = typeof obj;
        objType = type === 'object' || type === 'function';
        if (hasProp(runtimeProperties, key)) {
          if (objType) {
            if (hasProp(obj, '__mdid__')) {
              md = nativeMetadata[obj.__mdid__];
            } else if (hasProp(obj, '__md__')) {
              md = obj.__md__;
            }
            if (md) {
              return md.hasDefProperty(key);
            }
            return this.has(prototypeOf(obj), key);
          }
          return false;
        }
        mdid = obj.__mdid__;
        md = nativeMetadata[obj.__mdid__];
        if (md && md.object === obj || !objType) {
          return md.has(key, obj);
        }
        if (hasProp(obj, '__md__')) {
          return obj.__md__.has(key);
        }
        if (hasProp(obj, key)) {
          return true;
        }
        return this.has(prototypeOf(obj), key);
      };
      this.get = function(obj, key) {
        var md, mdid, objType, type;
        if (obj == null) {
          return void 0;
        }
        type = typeof obj;
        objType = type === 'object' || type === 'function';
        if (hasProp(runtimeProperties, key)) {
          if (objType) {
            if (hasProp(obj, '__mdid__')) {
              md = nativeMetadata[obj.__mdid__];
            } else if (hasProp(obj, '__md__')) {
              md = obj.__md__;
            }
            if (md && md.hasDefProperty(key)) {
              return md.get(key);
            }
            return this.get(prototypeOf(obj), key);
          } else {
            return nativeMetadata[obj.__mdid__].get(key);
          }
          return void 0;
        }
        if (type === 'string' && typeof key === 'number' || key === 'length') {
          return obj[key];
        }
        mdid = obj.__mdid__;
        md = nativeMetadata[obj.__mdid__];
        if (md && md.object === obj || !objType) {
          return md.get(key, obj);
        }
        if (hasProp(obj, '__md__')) {
          return obj.__md__.get(key);
        }
        if (hasProp(obj, key)) {
          return obj[key];
        }
        return this.get(prototypeOf(obj), key);
      };
      this.set = function(obj, key, val) {
        var md, objType, type;
        type = typeof obj;
        objType = type === 'object' || type === 'function';
        if (hasProp(runtimeProperties, key)) {
          if (objType) {
            if (hasProp(obj, '__mdid__')) {
              md = nativeMetadata[obj.__mdid__];
            } else {
              if (!hasProp(obj, '__md__')) {
                defProp(obj, '__md__', {
                  value: new ObjectMetadata(obj, this),
                  writable: true
                });
              }
              md = obj.__md__;
            }
            if (!md.hasDefProperty(key)) {
              md.defineProperty(key, {
                value: val,
                writable: true,
                enumerable: true,
                configurable: true
              });
            }
            md.set(key, val);
          }
          return val;
        }
        if (objType) {
          if (hasProp(obj, '__md__')) {
            obj.__md__.set(key, val);
          } else if (hasProp(obj, '__mdid__')) {
            nativeMetadata[obj.__mdid__].set(key, val);
          } else {
            obj[key] = val;
          }
        }
        return val;
      };
      this.del = function(obj, key) {
        var objType, type;
        type = typeof obj;
        objType = type === 'object' || type === 'function';
        if (hasProp(runtimeProperties, key)) {
          if (objType) {
            if (hasProp(obj, '__mdid__')) {
              return nativeMetadata[obj.__mdid__].del(key);
            } else if (hasProp(obj, '__md__')) {
              return obj.__md__.delDefProperty(key);
            }
          }
          return true;
        }
        if (objType) {
          if (type === 'function' && key === 'prototype') {
            return false;
          }
          if (hasProp(obj, '__md__')) {
            return obj.__md__.del(key);
          } else if (hasProp(obj, '__mdid__')) {
            return nativeMetadata[obj.__mdid__].del(key);
          } else {
            return delete obj[key];
          }
        }
        return true;
      };
      this.instanceOf = function(klass, obj) {
        var _ref4;
        if ((obj == null) || ((_ref4 = typeof obj) !== 'object' && _ref4 !== 'function')) {
          return false;
        }
        if (hasProp(obj, '__mdid__')) {
          return nativeMetadata[obj.__mdid__].instanceOf(klass);
        }
        if (hasProp(obj, '__md__')) {
          return obj.__md__.instanceOf(klass);
        }
        return obj instanceof klass;
      };
      this.getNativeMetadata = function(obj) {
        return nativeMetadata[obj.__mdid__];
      };
      this.enumerateKeys = function(obj) {
        var key, keys;
        if (typeof obj === 'object') {
          if (hasProp(obj, '__md__')) {
            return obj.__md__.enumerateKeys();
          }
        }
        keys = [];
        for (key in obj) {
          if (key !== '__mdid__') {
            keys.push(key);
          }
        }
        return new ArrayIterator(keys);
      };
      for (k in merge) {
        if (!__hasProp.call(merge, k)) continue;
        v = merge[k];
        global[k] = v;
      }
      this.global = global;
      this.registerNative = register;
    }

    Realm.prototype.inv = function(o) {
      return -o;
    };

    Realm.prototype.lnot = function(o) {
      return !o;
    };

    Realm.prototype.not = function(o) {
      return ~o;
    };

    Realm.prototype.inc = function(o) {
      return o + 1;
    };

    Realm.prototype.dec = function(o) {
      return o - 1;
    };

    Realm.prototype.add = function(r, l) {
      return l + r;
    };

    Realm.prototype.sub = function(r, l) {
      return l - r;
    };

    Realm.prototype.mul = function(r, l) {
      return l * r;
    };

    Realm.prototype.div = function(r, l) {
      return l / r;
    };

    Realm.prototype.mod = function(r, l) {
      return l % r;
    };

    Realm.prototype.shl = function(r, l) {
      return l << r;
    };

    Realm.prototype.sar = function(r, l) {
      return l >> r;
    };

    Realm.prototype.shr = function(r, l) {
      return l >>> r;
    };

    Realm.prototype.or = function(r, l) {
      return l | r;
    };

    Realm.prototype.and = function(r, l) {
      return l & r;
    };

    Realm.prototype.xor = function(r, l) {
      return l ^ r;
    };

    Realm.prototype.ceq = function(r, l) {
      return l == r;
    };

    Realm.prototype.cneq = function(r, l) {
      return l != r;
    };

    Realm.prototype.cid = function(r, l) {
      return l === r;
    };

    Realm.prototype.cnid = function(r, l) {
      return l !== r;
    };

    Realm.prototype.lt = function(r, l) {
      return l < r;
    };

    Realm.prototype.lte = function(r, l) {
      return l <= r;
    };

    Realm.prototype.gt = function(r, l) {
      return l > r;
    };

    Realm.prototype.gte = function(r, l) {
      return l >= r;
    };

    return Realm;

  })();

  module.exports = Realm;

}).call(this);


//@ sourceMappingURL=realm.js.map