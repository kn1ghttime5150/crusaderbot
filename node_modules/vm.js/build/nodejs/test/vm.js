(function() {
  var Dog, Vm, merge, nativetest, selftest, startIndex, stopIndex, strip, tests, vmEvalSuite,
    __hasProp = {}.hasOwnProperty;

  Vm = require('../src/vm');

  selftest = 1;

  nativetest = 1;

  tests = {
    "({name: 'thiago', 'age': 28, 1: 2})": [
      {
        name: 'thiago',
        age: 28,
        1: 2
      }
    ],
    "'abc'": ['abc'],
    "[1, 2, [1, 2]]": [[1, 2, [1, 2]]],
    "'abc'[1]": ['b'],
    "'abc'.length": [3],
    "/abc/gi === /abc/gi": [false],
    'void(0)': [void 0],
    'void(x=1)': [
      void 0, {
        x: 1
      }
    ],
    'typeof 5': ['number'],
    'typeof undefined': ['undefined'],
    'n=5; typeof n': [
      'number', {
        n: 5
      }
    ],
    'typeof true': ['boolean'],
    'b=true; typeof b': [
      'boolean', {
        b: true
      }
    ],
    'o={prop1: 1, prop2: 2}; delete o.prop1': [
      true, {
        o: {
          prop2: 2
        }
      }
    ],
    'o={prop1: 1, prop2: 2}; delete o["prop2"]': [
      true, {
        o: {
          prop1: 1
        }
      }
    ],
    'delete Array': [
      true, (function(global) {
        expect('Object' in global).to.eql(true);
        return expect('Array' in global).to.eql(false);
      })
    ],
    '(function(){var x = 1; return delete x;})()': [false],
    '-{count: 2}.count': [-2],
    "x = {count: 28};x.count++": [
      28, {
        x: {
          count: 29
        }
      }
    ],
    "x = {count: 30};--x.count": [
      29, {
        x: {
          count: 29
        }
      }
    ],
    'x = 4; --x': [
      3, {
        x: 3
      }
    ],
    'x = 4; ++x': [
      5, {
        x: 5
      }
    ],
    'x = 4; x--': [
      4, {
        x: 3
      }
    ],
    'x = 4; x++': [
      4, {
        x: 5
      }
    ],
    'x = 5; -x': [
      -5, {
        x: 5
      }
    ],
    'x = 5; +x': [
      5, {
        x: 5
      }
    ],
    'x = 5; !x': [
      false, {
        x: 5
      }
    ],
    'x = 5; ~x': [
      -6, {
        x: 5
      }
    ],
    '5 == 5': [true],
    '5 == "005"': [true],
    '5 == 4': [false],
    '5 == "004"': [false],
    '5 != 5': [false],
    '5 != "005"': [false],
    '5 != 4': [true],
    '5 === 5': [true],
    '5 === "005"': [false],
    '5 !== 5': [false],
    '5 !== "005"': [true],
    '5 !== 4': [true],
    'false || true': [true],
    'false || false': [false],
    'true && true': [true],
    'true && false': [false],
    '10 > 9': [true],
    '10 > 10': [false],
    '10 >= 10': [true],
    '10 < 9': [false],
    '10 < 10': [false],
    '10 <= 10': [true],
    '2 + 2': [4],
    '1023 - 5': [1018],
    '70 * 7': [490],
    '1000 / 10': [100],
    '27 % 10': [7],
    '2 << 1': [4],
    '0xffffffff >> 1': [-1],
    '0x0fffffff >> 1': [0x7ffffff],
    '0xffffffff >>> 1': [0x7fffffff],
    '0xf | 0xf0': [0xff],
    '0xf & 0xf8': [8],
    '0xf0 ^ 8': [0xf8],
    '3 ? 1 : 2': [1],
    'false ? 1 : 2': [2],
    "x = {count: 28};x.count = 29": [
      29, {
        x: {
          count: 29
        }
      }
    ],
    "x = {count: 28};x.count += 10": [
      38, {
        x: {
          count: 38
        }
      }
    ],
    "x = [1, 2, 3];x[2] = 5": [
      5, {
        x: [1, 2, 5]
      }
    ],
    'x = 15': [
      15, {
        x: 15
      }
    ],
    'x = 3;x += 8': [
      11, {
        x: 11
      }
    ],
    'x = 3;x -= 8': [
      -5, {
        x: -5
      }
    ],
    'x = 50;x *= 5': [
      250, {
        x: 250
      }
    ],
    'x = 300;x /= 5': [
      60, {
        x: 60
      }
    ],
    'x = 1000;x %= 35': [
      20, {
        x: 20
      }
    ],
    'x = 5;x <<= 3': [
      40, {
        x: 40
      }
    ],
    'x = 0xffffffff;x >>= 1': [
      -1, {
        x: -1
      }
    ],
    'x = 0x0fffffff;x >>= 1': [
      0x7ffffff, {
        x: 0x7ffffff
      }
    ],
    'x = 0xffffffff;x >>>= 1': [
      0x7fffffff, {
        x: 0x7fffffff
      }
    ],
    'x = 0xf;x |= 0xf0': [
      0xff, {
        x: 0xff
      }
    ],
    'x = 0xf;x &= 0xf8': [
      8, {
        x: 8
      }
    ],
    'x = 0xf0;x ^= 8': [
      0xf8, {
        x: 0xf8
      }
    ],
    '[x, y] = [1, 2]': [
      [1, 2], {
        x: 1,
        y: 2
      }
    ],
    'var [x, y] = [1, 2]': [
      [1, 2], {
        x: 1,
        y: 2
      }
    ],
    '[,,y] = [1, 2, 3 ,4]': [
      [1, 2, 3, 4], {
        y: 3
      }
    ],
    '({x: X, y: Y} = {x: 1, y: 2})': [
      {
        x: 1,
        y: 2
      }, {
        X: 1,
        Y: 2
      }
    ],
    '({x, y} = {x: 1, y: 2})': [
      {
        x: 1,
        y: 2
      }, {
        x: 1,
        y: 2
      }
    ],
    'var {x, y} = {x: 1, y: 2}': [
      {
        x: 1,
        y: 2
      }, {
        x: 1,
        y: 2
      }
    ],
    'var [a,,[b,,[c]]] = [1,0,[2,0,[3]]];': [
      [1, 0, [2, 0, [3]]], {
        a: 1,
        b: 2,
        c: 3
      }
    ],
    'var {op: a, lhs: {op: b}, rhs: c} = {op: 1, lhs: {op: 2}, rhs: 3};': [
      {
        op: 1,
        lhs: {
          op: 2
        },
        rhs: 3
      }, {
        a: 1,
        b: 2,
        c: 3
      }
    ],
    "if (5 > 4) i = 1;": [
      1, {
        i: 1
      }
    ],
    "if (5 > 4) i = 1; else i = 2": [
      1, {
        i: 1
      }
    ],
    "if (4 > 5) i = 1;": [null],
    "if (4 > 5) i = 1; else i = 4": [
      4, {
        i: 4
      }
    ],
    'i = 0; while(i++ < 10) i++; i;': [
      11, {
        i: 11
      }
    ],
    "l = ['1', 2, 'age', 28, 'name', 'thiago'];\nobj = {}\nwhile (l.length) obj[l.pop()] = l.pop();\nobj;": [
      {
        name: 'thiago',
        'age': 28,
        1: 2
      }, (function(global) {})
    ],
    "(function() {})()": [void 0],
    "(function factorial(n) { return n > 1 ? n * factorial(n - 1) : 1 })(5);": [120],
    "x = 5;\nthis[++x] = 10;": [
      10, (function(global) {
        return expect(global[6]).to.eql(10);
      })
    ],
    "obj = {\n  isTrue: function(obj) { return 'isTrue' in obj }\n}\nl = [];\n\n(function() {\n  for (var k in obj) {\n    if (obj.isTrue.call(obj, obj)) l.push('isTrue');\n  }\n  function test() { }\n})();\nl": [['isTrue'], (function(global) {})],
    "obj = {\n  isTrue: function(obj) { return 'isTrue' in obj }\n}\nl = [];\n\n(function() {\n  for (var k in obj) {\n    if (obj.isTrue.call(obj, obj)) l.push('isTrue');\n    function test() { }\n  }\n})();\nl": [['isTrue'], (function(global) {})],
    "i = 0;\nwhile (i < 1000) {\n  j = 0;\n  while (j < 100000) {\n    j += 100;\n    break;\n  }\n  i++;\n};\ni;": [
      1000, {
        i: 1000,
        j: 100
      }
    ],
    "i = 0; j = 0; k = 0;\nwhile (i < 1000) {\n  while (j < 100000) {\n    j += 100;\n    while (true) {k+=2; break;}\n    continue;\n    i += 10000\n  }\n  i++;\n};\ni;": [
      1000, {
        i: 1000,
        j: 100000,
        k: 2000
      }
    ],
    "i = 0, j = 0\ndo {\n  j += 5\n} while (i++ < 10)\ni,j;": [
      55, {
        i: 11,
        j: 55
      }
    ],
    "obj = {length: 5};\nj = 0;\nfor (i = 0, len = obj.length; i < len; i++) {\n  j++;\n}\ni": [
      5, {
        i: 5,
        j: 5,
        len: 5,
        obj: {
          length: 5
        }
      }
    ],
    "obj = {name: '1', address: 2, email: 3};\nl = []\nfor (var k in obj) l.push(k)\nl.sort()\nnull": [
      null, (function(global) {
        return expect(global.l).to.eql(['address', 'email', 'name']);
      })
    ],
    "obj = {name: '1', address: 2, email: 3};\nl = []\n(function() {\n  for (k in obj) l.push(k)\n})();": [
      void 0, (function(global) {
        return expect(global.errorThrown.stack).to.be("TypeError: object is not a function\n    at <script>:2:37");
      })
    ],
    "obj = {name: '1', address: 2, email: 3};\nl = [];\n(function() {\n  for (k in obj) l.push(k)\n})();\nl.sort()\nnull": [
      null, (function(global) {
        expect(global.l).to.eql(['address', 'email', 'name']);
        return expect(!('k' in global)).to.be(false);
      })
    ],
    "obj = {name: '1', address: 2, email: 3};\nl = [];\n(function() {\n  var k;\n  for (k in obj) l.push(k)\n})();\nl.sort()\nnull": [
      null, (function(global) {
        expect(global.l).to.eql(['address', 'email', 'name']);
        return expect(!('k' in global)).to.be(true);
      })
    ],
    "l = [];\nfruits = ['orange', 'apple', 'lemon'];\nfor (var k of fruits) l.push(k)\nnull": [
      null, (function(global) {
        expect(global.l).to.eql(['orange', 'apple', 'lemon']);
        return expect('k' in global).to.eql(true);
      })
    ],
    "l1 = [1, 2]\nl2 = [3, 4]\nl3 = [5, 6]\nl = [];\nfor (let i = 0; i < l1.length;i++) {\n  for (let j = 0; j < l2.length;j++) {\n    for (let k = 0; k < l3.length;k++) {\n      l.push([l1[i], l2[j], l3[k]]);\n    }\n  }\n}\nnull": [
      null, (function(global) {
        return expect(global.l).to.eql([[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]]);
      })
    ],
    "l = [];\nfor (var i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (var k of [5, 6]) {\n      l.push([i, j, k]);\n    }\n  }\n}\nnull": [
      null, (function(global) {
        return expect(global.l).to.eql([[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]]);
      })
    ],
    "for (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (let k of [5, 6]) {\n    }\n  }\n}\nnull": [
      null, (function(global) {
        expect(global.j).to.eql(4);
        expect('i' in global).to.eql(false);
        return expect('k' in global).to.eql(false);
      })
    ],
    "l = [];\nouter:\nfor (var i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (var k of [5, 6]) {\n      l.push([i, j, k]);\n      break outer;\n    }\n  }\n}\nnull": [
      null, (function(global) {
        return expect(global.l).to.eql([[1, 3, 5]]);
      })
    ],
    "l = [];\nouter:\nfor (var i of [1, 2]) {\n  for (let j of [3, 4]) {\n    for (var k of [5, 6]) {\n      l.push([i, j, k]);\n      continue outer;\n    }\n  }\n}\nnull": [
      null, (function(global) {
        return expect(global.l).to.eql([[1, 3, 5], [2, 3, 5]]);
      })
    ],
    "l = [];\nfor (let i of [1, 2]) {\n  outer:\n  for (var j of [3, 4]) {\n    for (let k of [5, 6]) {\n      l.push([i, j, k]);\n      break outer;\n    }\n  }\n}\nnull": [
      null, (function(global) {
        return expect(global.l).to.eql([[1, 3, 5], [2, 3, 5]]);
      })
    ],
    "l = [];\nfor (let i of [1, 2]) {\n  outer:\n  for (let j of [3, 4]) {\n    for (let k of [5, 6]) {\n      l.push([i, j, k]);\n      continue outer;\n    }\n  }\n}\nnull": [
      null, (function(global) {
        return expect(global.l).to.eql([[1, 3, 5], [1, 4, 5], [2, 3, 5], [2, 4, 5]]);
      })
    ],
    "l = [];\nfruits = ['orange', 'apple', 'lemon'];\nfor (let k of fruits) l.push(k)\nnull": [
      null, (function(global) {
        expect(global.l).to.eql(['orange', 'apple', 'lemon']);
        return expect('k' in global).to.eql(false);
      })
    ],
    "obj = [[1, 2], [3, 4], [5, 6]];\nl = []\nfor (var [x,y] = obj[0], i = 1; i < obj.length; [x,y] = obj[i++]) {\n  l.push(x); l.push(y);\n}\nl": [[1, 2, 3, 4], (function(global) {})],
    "var i, j;\nvar l = [];\nloop1:\nfor (i = 0; i < 3; i++) {\n   loop2:\n   for (j = 0; j < 3; j++)\n      if (i == 1 && j == 1) continue loop1;\n      else l.push(i), l.push(j);\n}\ni": [
      3, {
        i: 3,
        j: 3,
        l: [0, 0, 0, 1, 0, 2, 1, 0, 2, 0, 2, 1, 2, 2]
      }
    ],
    "var i, j;\nvar l = [];\nloop1:\nfor (i = 0; i < 3; i++) {\n   loop2:\n   for (j = 0; j < 3; j++)\n      if (i == 1 && j == 1) break loop1;\n      else l.push(i), l.push(j);\n}\nj": [
      1, {
        i: 1,
        j: 1,
        l: [0, 0, 0, 1, 0, 2, 1, 0]
      }
    ],
    'for (var i = 0, len = 6; i < len; i+=10) {}; i': [
      10, {
        i: 10,
        len: 6
      }
    ],
    '(function() { return 10; })()': [10],
    '(function() { var i = 4; return i * i; })()': [16],
    '(function named() { var i = 4; return i * i; })()': [16],
    "i = 0;\ntest();\nfunction test() { i = 10; }\ni": [
      10, (function(global) {
        return expect(global.i).to.eql(10);
      })
    ],
    "(function() {\n  return a();\n  function b() {\n    return 5;\n  }\n  function a() {\n    return b();\n    function b() {\n      return 6;\n    }\n  }\n})();": [6],
    "fn = function(a, b, c, d) {\n  return a + b + c * d;\n}\nfn(4, 9, 10, 3);": [43, (function(global) {})],
    "fn = function(a, b=2, c=b*b, d=c) {\n  return a + b + c + d;\n}\nfn(9);": [19, (function(global) {})],
    "fn = function(a, b=2, c=b*b, d=c, ...f) {\n  return f;\n}\nfn(1, 2, 3, 4, 5, 6);": [[5, 6], (function(global) {})],
    "fn = function([n1, n2], {key, value}) {\n  return [n1 + n2, key, value];\n}\nfn([5, 4], {key: 'k', value: 'v'});": [[9, 'k', 'v'], (function(global) {})],
    "function switchCleanup(x) {\n  switch (x) {\n    case 9:\n      return 4;\n      break\n    case '10':\n      return 5\n      break;\n    default:\n      return 6;\n      break\n  }\n}\nswitchCleanup('10')": [5, (function(global) {})],
    "x = '10'\nswitch (x) {\n  case 9:\n    z = 4;\n    break\n  case '10':\n    z = 5;\n    break;\n  default:\n    z = 6;\n    break\n}\nz": [5, (function(global) {})],
    "x = 10\nz = 0\nswitch (x) {\n  case 10:\n  case 9:\n  case 8:\n    z = 2;\n    break\n  default:\n    z = 3;\n}\nz": [2, (function(global) {})],
    "x = 9\nz = 0\nswitch (x) {\n  case 10:\n  case 9:\n    z = 2;\n  case 8:\n    break\n  default:\n    z = 10;\n}\nz": [2, (function(global) {})],
    "x = 8\nz = 0\nswitch (x) {\n  case 10:\n  case 9:\n    z = 2;\n  case 8:\n    break\n  default:\n    z = 10;\n}\nz": [0, (function(global) {})],
    "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n            break grandparent;\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [50, (function(global) {})],
    "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n            break parent;\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [52, (function(global) {})],
    "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n            break;\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [62, (function(global) {})],
    "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [162, (function(global) {})],
    "x = 10\nz = 0\nswitch (x) {\n  case 10:\n    let y = 10\n  case 9:\n    y += 10\n  case 8:\n    y += 10\n    z = y\n    break\n  default:\n    z = 10;\n}\nz": [
      30, (function(global) {
        expect(global.z).to.eql(30);
        return expect('y' in global).to.eql(false);
      })
    ],
    "x = 10\nz = 0\nswitch (x) {\n  case 10:\n    z += 2\n  case 9:\n    z += 2\n    break;\n  case 8:\n    z += 2\n    break\n  default:\n    z = 10;\n}\nz": [4, (function(global) {})],
    "throw new EvalError('err')": [
      void 0, (function(global) {
        return expect(global.errorThrown.stack).to.eql("EvalError: err\n    at <script>:1:10");
      })
    ],
    "(function() {\n  var err;\n  try {\n    throw 'error';\n  } catch (e) {\n    err = e;\n  } finally {\n    err += ' thrown';\n  }\n\n  return err;\n})();": ['error thrown'],
    "function fn1() {\n  try {\n    fn2();\n    return 3;\n  } catch (e) {\n    a = e\n    return 5;\n  }\n}\nfunction fn2() {\n  throw 'error'\n}\nfn1();": [
      5, (function(global) {
        expect(global.e).to.not.exist;
        return expect(global.a).to.eql('error');
      })
    ],
    "function fn1() {\n  try {\n    fn2();\n  } catch ([a,,[b,,[c]]]) {\n    ex = [a, b, c];\n    i = 10; return 1;\n  } finally { return 5; i = 2}\n}\nfunction fn2() {\n  throw [1,0,[2,0,[3]]];\n}\nfn1()": [
      5, (function(global) {
        expect(global.i).to.eql(10);
        expect(global.a).to.not.exist;
        expect(global.b).to.not.exist;
        expect(global.c).to.not.exist;
        return expect(global.ex).to.eql([1, 2, 3]);
      })
    ],
    "function fn1() {\n  try {\n    fn2();\n    return 3;\n  } catch ({op: a, lhs: {op: b}, rhs: c}) {\n    ex = [a, b, c];\n    return i + 1;\n  } finally {\n    j = 10;\n  }\n}\nfunction fn2() {\n  try {\n    fn3();\n  } finally {\n    i = 11;\n  }\n}\nfunction fn3() {\n  try {\n    throw 'error'\n  } catch (e) {\n    throw {op: 1, lhs: {op: 2}, rhs: 3};\n  }\n}\nfn1();": [
      12, (function(global) {
        expect(global.i).to.eql(11);
        expect(global.j).to.eql(10);
        expect(global.a).to.not.exist;
        expect(global.b).to.not.exist;
        expect(global.c).to.not.exist;
        return expect(global.ex).to.eql([1, 2, 3]);
      })
    ],
    "try {\n  throw 'err'\n} catch (e) {\n  ex = e;\n}": [
      'err', (function(global) {
        expect(global.e).to.not.exist;
        return expect(global.ex).to.eql('err');
      })
    ],
    "try {\n  throw 'err'\n} catch (e) {\n  throw e;\n} finally {\n  (function() { obj = [1, 2] })();\n}": [
      void 0, (function(global) {
        expect(global.errorThrown).to.eql('err');
        return expect(global.obj).to.eql([1, 2]);
      })
    ],
    "l = [];\n\nfunction f() {\n    try {\n        throw 'err1'\n    } catch (e) {\n        try {\n            throw 'err2'\n        } catch (e) {\n            try {\n                throw 'err3'\n            } catch (e) {\n                return 10;\n            } finally {\n                l.push(1);\n            }\n        } finally {\n            l.push(2);\n        }\n    } finally {\n        l.push(3);\n    }\n}\n\nf();": [
      10, (function(global) {
        return expect(global.l).to.eql([1, 2, 3]);
      })
    ],
    "l = [];\n\nfunction f() {\n    try {\n        throw 'err1'\n    } catch (e) {\n        try {\n            throw 'err2'\n        } catch (e) {\n            try {\n                throw 'err3'\n            } catch (e) {\n                return 10;\n            } finally {\n                l.push(1);\n                return 11;\n            }\n        } finally {\n            l.push(2);\n            return 12;\n        }\n    } finally {\n        l.push(3);\n    }\n}\n\nf();": [
      12, (function(global) {
        return expect(global.l).to.eql([1, 2, 3]);
      })
    ],
    "errors = []\nfor (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (let k of [5, 6]) {\n      try {\n        throw i\n      } catch (e) {\n        errors.push(e);\n      }\n    }\n  }\n}\nerrors": [[1, 1, 1, 1, 2, 2, 2, 2], (function(global) {})],
    "errors = []\nfor (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    try {\n      for (let k of [5, 6]) {\n        throw j\n      }\n    } catch (e) {\n      errors.push(e);\n    }\n  }\n}\nerrors": [[3, 4, 3, 4], (function(global) {})],
    "errors = []\nfor (let i of [1, 2]) {\n  try {\n    for (var j of [3, 4]) {\n      for (let k of [5, 6]) {\n        throw k\n      }\n    }\n  } catch (e) {\n    errors.push(e);\n  }\n}\nerrors": [[5, 5], (function(global) {})],
    "errors = []\ntry {\n  for (let i of [1, 2]) {\n    for (var j of [3, 4]) {\n      for (let k of [5, 6]) {\n        try {\n          throw [k, j, i]\n        } finally {\n        }\n      }\n    }\n  }\n} catch (e) {\n  errors.push(e)\n}\nerrors": [[[5, 3, 1]], (function(global) {})],
    "errors = []\nfor (let i of [1, 2]) {\n  try {\n    for (var j of [3, 4]) {\n      for (let k of [5, 6]) {\n        try {\n          throw [k, j, i]\n        } finally { }\n      }\n    }\n  } catch (e) {\n    errors.push(e)\n  }\n}\nerrors": [[[5, 3, 1], [5, 3, 2]], (function(global) {})],
    "errors = []\nfor (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    try {\n      for (let k of [5, 6]) {\n        try {\n          throw [k, j, i]\n        } finally { }\n      }\n    } catch (e) {\n      errors.push(e)\n    }\n  }\n}\nerrors": [[[5, 3, 1], [5, 4, 1], [5, 3, 2], [5, 4, 2]], (function(global) {})],
    "s = null\ns.name = 1": [
      void 0, (function(global) {
        var errString;
        errString = global.errorThrown.toString();
        return expect(errString).to.eql("TypeError: Cannot set property 'name' of null\n    at <script>:2:0");
      })
    ],
    "function abc() {\n  x = 5\n  def();\n  y = 1\n}\n\nfunction def() {\n  y()\n}\n\ny = function() {\n  var x = function ghi() {\n    s = undefined\n    s.name = 1\n  }\n  x()\n}\n\nabc()": [
      void 0, (function(global) {
        var errString;
        errString = global.errorThrown.toString();
        return expect(errString).to.eql("TypeError: Cannot set property 'name' of undefined\n    at ghi (<script>:14:4)\n    at y (<script>:16:2)\n    at def (<script>:8:2)\n    at abc (<script>:3:2)\n    at <script>:19:0");
      })
    ],
    "obj = {\n  getName: function() {\n    return n;\n  }\n}\n\nfunction name() {\n  obj.getName()\n}\n\n(function() {\n  name()\n})()": [
      void 0, (function(global) {
        var errString;
        errString = global.errorThrown.toString();
        return expect(errString).to.eql("ReferenceError: n is not defined\n    at Object.getName (<script>:3:11)\n    at name (<script>:8:2)\n    at <anonymous> (<script>:12:2)\n    at <script>:11:1");
      })
    ],
    "function withScope() {\n  let k = 3\n  let obj = {i: 1, j: 2}\n\n  with (obj) {\n    i = 10;\n    j = i * 2;\n    k = j * 3;\n    l = k * 4;\n  }\n\n  return [obj, k];\n}\n\nwithScope()": [
      [
        {
          j: 20,
          i: 10
        }, 60
      ], (function(global) {
        expect(global.l).to.eql(240);
        expect('k' in global).to.eql(false);
        expect('i' in global).to.eql(false);
        return expect('j' in global).to.eql(false);
      })
    ],
    "function fn() {\n  return this._id++;\n}\n\n_id = 10;\n\nidGen = {\n  _id: 1,\n  id: fn\n};\n\nfn(); fn(); fn();\n\nl = [idGen.id(), idGen.id(), idGen.id()]\n_id++\n++this._id": [
      15, (function(global) {
        expect(global._id).to.eql(15);
        return expect(global.l).to.eql([1, 2, 3]);
      })
    ],
    "new Date(2013, 7, 17)": [new Date(2013, 7, 17)],
    "new Array(3, 2, 1)": [[3, 2, 1]],
    "new Array(3)": [new Array(3)],
    "new RegExp('abc', 'gi')": [/abc/gi],
    "[new Number(1), new Number(null), new Number(undefined)]": [[new Number(1), new Number(null), new Number(void 0)]],
    "[new Boolean(1), new Boolean(null), new Boolean(undefined)]": [[new Boolean(1), new Boolean(null), new Boolean(void 0)]],
    "dog = new Dog()\ndog.bark()": [
      true, (function(global) {
        expect(global.dog).to.be.a(merge.Dog);
        return expect(global.dog.barked).to.eql(true);
      })
    ],
    "(5.5).toExponential().split('.')": [['5', '5e+0']],
    "[1, 2].concat([3, 4], [5, 6])": [[1, 2, 3, 4, 5, 6]],
    "/(a)(b)(c)/.exec('abc').slice()": [['abc', 'a', 'b', 'c']],
    "/a/ instanceof RegExp": [true],
    "new RegExp('abc').constructor": [RegExp],
    "/abc/.constructor": [RegExp],
    "null instanceof Object": [false],
    "r = /a/gi;\nr.global = false;\nr.ignoreCase = false;\nr.multiline = true;\n[r.global, r.ignoreCase, r.multiline, r.source]": [[true, true, false, 'a'], (function(global) {})],
    "r = /\\d+/g\nl = []\nwhile (match = r.exec('1/13/123')) l.push(match[0])\nl": [['1', '13', '123'], (function(global) {})],
    "r1 = /\\d+/g\nr2 = /\\d+/g\nl = []\nl.push(r1.exec('1/13/123')[0])\nl.push(r1.exec('1/13/123')[0])\nl.push(r2.exec('1/13/123')[0])\nl.push(r1.exec('1/13/123')[0])\nl": [
      ['1', '13', '1', '123'], (function(global) {
        expect(global.r1.lastIndex).to.eql(8);
        expect(global.r2.lastIndex).to.eql(1);
        return expect(global.r1.regexp).to.eql(global.r2.regexp);
      })
    ],
    "'1/13/123'.match(/\\d+/g)": [['1', '13', '123'], (function(global) {})],
    "Object.prototype.custom = 123\nx = Object.prototype.custom\nx": [
      123, (function(global) {
        return expect('custom' in Object.prototype).to.eql(false);
      })
    ],
    "x = Math.abs(-5);\ndelete Math.abs;\ntry {\n  y = Math.abs(-5);\n} catch (e) {\n  err = e;\n}\n'abs' in Math": [
      false, (function(global) {
        expect(global.x).to.be(5);
        expect('y' in global).to.be(false);
        expect(global.err.stack).to.be("TypeError: Object #<Object> has no method 'abs'\n    at <script>:4:6");
        return expect('abs' in global.Math).to.be(true);
      })
    ],
    "x = JSON.stringify(-5);\nJSON.stringify = 5;\ntry {\n  y = JSON.stringify(-5);\n} catch (e) {\n  err = e;\n}\n'stringify' in JSON": [
      true, (function(global) {
        expect(global.x).to.be('-5');
        expect('y' in global).to.be(false);
        expect(global.err.stack).to.be("TypeError: Property 'stringify' of object #<Object> is not a function\n    at <script>:4:6");
        return expect(global.JSON.stringify).to.be.a(Function);
      })
    ],
    "f = function(){};\no = {'__md__': 'd'};\nassertions1 = [\n  '__mdid__' in Object,\n  '__mdid__' in Object.prototype,\n  '__vmfunction__' in f,\n  '__md__' in o\n]\nObject.__mdid__ = 'a';\nObject.prototype.__mdid__ = 'b';\nf.__vmfunction__ = 'c';\ndelete o.__md__;\nassertions2 = [\n  '__mdid__' in Object,\n  '__mdid__' in Object.prototype,\n  '__vmfunction__' in f,\n  '__md__' in o\n];\n[\n  Object.__mdid__,\n  Object.prototype.__mdid__,\n  f.__vmfunction__,\n  o.__md__\n]": [
      ['a', 'b', 'c', void 0], (function(global) {
        expect(global.o).to.have.property('__md__');
        expect(Object.__mdid__).to.be(1);
        expect(Object.prototype.__mdid__).to.be(2);
        expect(global.f.__vmfunction__).to.be(true);
        expect(global.assertions1).to.eql([false, false, false, true]);
        return expect(global.assertions2).to.eql([true, true, true, false]);
      })
    ],
    "currentId = 5;\nObject.__mdid__ = currentId + 1;\ncurrentId = Object.__mdid__;\nObject.prototype.__mdid__ = currentId + 1;\ncurrentId = Object.prototype.__mdid__;\nFunction.__mdid__ = currentId + 1;\ncurrentId = Function.__mdid__;\nFunction.prototype.__mdid__ = currentId + 1;\ncurrentId = Function.prototype.__mdid__;\n[\n  currentId,\n  Function.prototype.__mdid__,\n  Function.__mdid__,\n  Object.prototype.__mdid__,\n  Object.__mdid__\n];": [
      [9, 9, 8, 7, 6], (function(global) {
        expect(Object.__mdid__).to.be(1);
        expect(Object.prototype.__mdid__).to.be(2);
        expect(Object.prototype.toString.__mdid__).to.be(3);
        expect(Function.__mdid__).to.be(4);
        return expect(Function.prototype.__mdid__).to.be(5);
      })
    ],
    "delete Object.prototype\ndelete Number.prototype\ndelete Boolean.prototype\ndelete String.prototype\ndelete Date.prototype\ndelete RegExp.prototype": [
      false, (function(global) {
        expect(global.Object.prototype).to.be(Object.prototype);
        expect(global.Number.prototype).to.be(Number.prototype);
        expect(global.Boolean.prototype).to.be(Boolean.prototype);
        expect(global.String.prototype).to.be(String.prototype);
        expect(global.Date.prototype).to.be(Date.prototype);
        return expect(global.RegExp.prototype).to.be(RegExp.prototype);
      })
    ],
    "(Object.prototype = Number.prototype = Boolean.prototype =\n  String.prototype = Date.prototype = RegExp.prototype =\n    {name: 'replacement'});": [
      {
        name: 'replacement'
      }, (function(global) {
        expect(global.Object.prototype).to.be(Object.prototype);
        expect(global.Number.prototype).to.be(Number.prototype);
        expect(global.Boolean.prototype).to.be(Boolean.prototype);
        expect(global.String.prototype).to.be(String.prototype);
        expect(global.Date.prototype).to.be(Date.prototype);
        return expect(global.RegExp.prototype).to.be(RegExp.prototype);
      })
    ],
    "i = 1\nObject.prototype.bark = function() { return 'bark' + i++ };\n[({}).bark(), [].bark(), new Date().bark()]": [
      ['bark1', 'bark2', 'bark3'], (function(global) {
        return expect('bark' in Object.prototype).to.eql(false);
      })
    ],
    "function Person(firstname, lastname) {\n  this.firstname = firstname;\n  this.lastname = lastname;\n}\nPerson.prototype.fullname = function() {\n  return this.firstname + ' ' + this.lastname;\n};\n\nfunction Employee(firstname, lastname) {\n  Person.call(this, firstname, lastname)\n}\nEmployee.prototype = Object.create(Person.prototype)\nEmployee.prototype.toString = function() {\n  return 'employee: ' + this.fullname()\n};\n\nfunction Programmer() {\n  Employee.apply(this, arguments)\n}\nProgrammer.prototype = new Employee()\nProgrammer.prototype.fullname = function() {\n  return 'programmer: ' + Employee.prototype.fullname.call(this);\n};\n\nhasOwn = [\n  Person.prototype.hasOwnProperty('fullname'),\n  Employee.prototype.hasOwnProperty('fullname'),\n  Programmer.prototype.hasOwnProperty('fullname')\n]\n\np1 = new Person('john', 'doe');\np2 = new Employee('thiago', 'arruda');\np3 = new Programmer('linus', 'torvalds');\np1str = p1.toString()\np1name = p1.fullname()\np2name = p2.toString()\np3name = p3.toString();\n(\n  p1 instanceof Person &&\n  !(p1 instanceof Employee) &&\n  !(p1 instanceof Programmer) &&\n  p2 instanceof Person &&\n  p2 instanceof Employee &&\n  !(p2 instanceof Programmer) &&\n  p3 instanceof Person &&\n  p3 instanceof Employee &&\n  p3 instanceof Programmer\n)": [
      true, (function(global) {
        expect(global.p1).to.be.a(global.Person);
        expect(global.p1str).to.eql('[object Object]');
        expect(global.p1name).to.eql('john doe');
        expect(global.p2name).to.eql('employee: thiago arruda');
        expect(global.p3name).to.eql('employee: programmer: linus torvalds');
        return expect(global.hasOwn).to.eql([true, false, true]);
      })
    ],
    "z = 0;\nx=1; function hello(name) {\n  if (name)\n    return 'hello' + name;\n  return 'hello world';\n } y = 2;\nhello.toString()": ["function hello(name) {\n  if (name)\n    return 'hello' + name;\n  return 'hello world';\n }", (function(global) {})],
    "x = 1\neval('x+2');": [
      3, {
        x: 1
      }
    ],
    "y = 10;\nz = 40;\nfunction evalLocal() {\n  var x = 1;\n  return eval('var y = 5; x + y + z')\n}\nevalLocal();": [
      46, (function(global) {
        return expect(global.y).to.eql(10);
      })
    ],
    "function evalClosure() {\n  var x = 1;\n  return eval('(function() { return x++ })')\n}\nc = evalClosure();\n[c(), c(), c()];": [[1, 2, 3], (function(global) {})],
    "f = new Function('a,', 'return 5;');": [
      void 0, (function(global) {
        return expect(global.errorThrown.stack).to.be("EvalError: Line 1: Unexpected token )\n    at <script>:1:8");
      })
    ],
    "throw new URIError('err')": [
      void 0, (function(global) {
        return expect(global.errorThrown.stack).to.be("URIError: err\n    at <script>:1:10");
      })
    ],
    "f = generateFunction();\nfunction generateFunction() {\n  return new Function('a,b', 'throw new URIError(a+b);');\n}\nf('a', 'b')": [
      void 0, (function(global) {
        return expect(global.errorThrown.stack).to.be("URIError: ab\n    at f (<eval>:2:10)\n    at <script>:5:0");
      })
    ],
    "f = generateFunction();\nfunction generateFunction() {\n  return new Function('a,b', 'c', 'd,e',\n  'return [a+b+c+d+e, Array.prototype.slice.call(arguments)];');\n}\nf(1, 2, 3, 4, 5);": [[15, [1, 2, 3, 4, 5]], (function(global) {})],
    'eval("(")': [void 0, (function(global) {})],
    '(function(a) { return a })(4)': [4],
    "(function() {\n  var obj, l, k;\n  obj = {i: 0};\n  o = {}\n  Object.defineProperty(obj, 'prop1', {\n    get: function() { return ++this.i; },\n    set: function(val) { this.i = val + 10; },\n    enumerable: true\n  });\n  Object.defineProperty(obj, 'prop2', {\n    value: 'val',\n  });\n  Object.defineProperty(o, 'prop3', {\n    value: 5,\n    writable: true,\n    configurable: true,\n    enumerable: true\n  });\n  obj.prop2 = 'val2';\n  l = [obj.prop2, delete obj.prop2];\n  l.push(obj.prop2);\n  l.push(obj.prop1);\n  l.push(obj.prop1);\n  obj.prop1 = 3;\n  l.push(obj.prop1);\n  l.push(obj.prop1);\n  for (k in obj) l.push(k);\n  return l;\n})();": [
      ['val', false, 'val', 1, 2, 14, 15, 'i', 'prop1'], {
        o: {
          prop3: 5
        }
      }
    ],
    "let square = x => x * x;\nsquare(2);": [4, (function(global) {})],
    "const obj = {\n  method: function () {\n    return () => this;\n  }\n};\nobj.method()() === obj;": [true, (function(global) {})],
    "function* gen(i) {\n  i = yield i + 1;\n  i = yield i * 2;\n  yield i * 4;\n  return 55;\n  yield i * 1000;\n}\n\ng = gen(10);\n\nl = [g.send(), g.send(20), g.send(30)];\nl.push(g.send());": [
      void 0, (function(global) {
        expect(global.l).to.eql([11, 40, 120]);
        expect(global.errorThrown.value).to.be(55);
        return expect(global.g.closed).to.eql(true);
      })
    ],
    "function *throwGen() {\n  yield 5;\n  try {\n    yield 6;\n    yield 7;\n  } catch (e) {\n    error = e;\n    yield 8;\n  }\n}\ng1 = throwGen();\ng2 = throwGen();\n\nl1 = [g1.next(), g1.next(), g1.next()];\nl2 = [g2.next(), g2.next(), g2.throw(new Error('test'))];": [
      [5, 6, 8], (function(global) {
        return expect(global.l1).to.eql([5, 6, 7]);
      })
    ],
    "function *throwGen(l) {\n  try {\n    yield 0;\n  } catch (e) {\n    try {\n      yield 0;\n    } catch(e) {\n      try {\n        yield 0;\n      } finally {\n        l.push(-1);\n      }\n    } finally {\n      l.push(-2);\n    }\n  } finally {\n    l.push(-3);\n    return 13;\n  }\n  return 14;\n}\nl1 = [];\ng1 = throwGen(l1);\ng1.send();\ng1.close();\nl2 = [];\ng2 = throwGen(l2);\ng2.send(); g2.throw('err');\ng2.close();\nl3 = [];\ng3 = throwGen(l3);\ng3.send(); g3.throw('err'); g3.throw('err');\ng3.close();": [
      13, (function(global) {
        expect(global.l1).to.eql([-3]);
        expect(global.l2).to.eql([-2, -3]);
        return expect(global.l3).to.eql([-1, -2, -3]);
      })
    ],
    "l = [];\nfunction* receive() {\n  l.push(yield 1);\n  return 50;\n}\ng = receive();\ng.send();\ng.send(10);": [
      void 0, (function(global) {
        return expect(global.errorThrown.value).to.eql(50);
      })
    ],
    "function* seq() {\n  var i = 0;\n  while (true) yield ++i;\n}\n\nl = [];\nfor (i of seq()) {\n  if (l.length > 5)\n    break;\n  l.push(i);\n}": [
      6, (function(global) {
        return expect(global.l).to.eql([1, 2, 3, 4, 5, 6]);
      })
    ],
    "function* fib() {\n  var i = 0, j = 1;\n  while (true) {\n    x = yield i;\n    var t = i;\n    i = j;\n    j += t;\n  }\n}\n\nvar g = fib();\n[g.next(), g.next(), g.next(), g.next(), g.next(), g.next()];": [[0, 1, 1, 2, 3, 5], (function(global) {})]
  };

  merge = {
    Dog: Dog = (function() {
      function Dog() {}

      Dog.prototype.bark = function() {
        return this.barked = true;
      };

      return Dog;

    })(),
    console: console,
    log: function() {
      return console.log.apply(console, arguments);
    }
  };

  startIndex = 0;

  stopIndex = 1210;

  vmEvalSuite = function(description, init, testInit, getResult) {
    return describe(description, function() {
      var i, k, v, _results;
      before(init);
      beforeEach(testInit);
      i = 0;
      _results = [];
      for (k in tests) {
        if (!__hasProp.call(tests, k)) continue;
        v = tests[k];
        if (i === stopIndex) {
          break;
        }
        if (i >= startIndex) {
          (function(k, v) {
            var expectedGlobal, expectedValue, fn, test;
            fn = function() {
              var e, err, result;
              try {
                result = getResult.call(this, k);
              } catch (_error) {
                e = _error;
                err = e;
              }
              expect(result).to.eql(expectedValue);
              if (typeof expectedGlobal === 'function') {
                this.global.errorThrown = err;
                return expectedGlobal(this.global);
              } else {
                if (err) {
                  throw new Error("The VM has thrown an error:\n" + err);
                }
                if (typeof expectedGlobal === 'object') {
                  return expect(strip(this.global)).to.eql(expectedGlobal);
                } else {
                  return expect(strip(this.global)).to.eql({});
                }
              }
            };
            test = "\"" + k + "\"";
            expectedValue = v[0];
            expectedGlobal = v[1];
            if (1 === expectedGlobal || 1 === v[2]) {
              return it.only(test, fn);
            } else if (0 === expectedGlobal || 0 === v[2]) {
              return it.skip(test, fn);
            } else {
              return it(test, fn);
            }
          })(k, v);
        }
        _results.push(i++);
      }
      return _results;
    });
  };

  if (selftest) {
    vmEvalSuite('self-hosted vm eval', function() {
      var compiledVm;
      compiledVm = Vm.fromJSON(JSON.parse(JSON.stringify(Vm.compile(vmjs, 'vm.js').toJSON())));
      this.vm = new Vm(merge, true);
      return this.vm.run(compiledVm);
    }, function() {
      this.vm["eval"]("vm = new Vm({Dog: Dog}, true);");
      return this.global = this.vm.realm.global.vm.realm.global;
    }, function(string) {
      return this.vm.realm.global.vm["eval"](string);
    });
  }

  if (nativetest) {
    vmEvalSuite('vm eval', function() {
      return this.vm = null;
    }, function() {
      this.vm = new Vm(merge, true);
      return this.global = this.vm.realm.global;
    }, function(string) {
      var script;
      script = Vm.fromJSON(JSON.parse(JSON.stringify(Vm.compile(string).toJSON())));
      return this.vm.run(script);
    });
  }

  describe('API', function() {
    var vm;
    vm = null;
    beforeEach(function() {
      return vm = new Vm();
    });
    it('call vm functions directly', function() {
      var code, glob, idGen;
      code = "function fn() {\n  return this._id++;\n}\n\n_id = 10;\n\nidGen = {\n  _id: 1,\n  id: fn\n};";
      vm["eval"](code);
      glob = vm.realm.global;
      idGen = glob.idGen;
      expect([glob.fn(), glob.fn(), glob.fn()]).to.eql([10, 11, 12]);
      return expect([idGen.id(), idGen.id(), idGen.id()]).to.eql([1, 2, 3]);
    });
    it('fiber pause/resume', function(done) {
      var fiber;
      fiber = vm.createFiber(Vm.compile('x = 1; x = asyncArray(); x.pop()'));
      vm.realm.global.asyncArray = function() {
        fiber.pause();
        expect(vm.realm.global.x).to.eql(1);
        return setTimeout(function() {
          var rv;
          rv = [1, 2, 3];
          fiber.setReturnValue(rv);
          expect(fiber.resume()).to.eql(3);
          expect(vm.realm.global.x).to.eql(rv);
          expect(rv).to.eql([1, 2]);
          return done();
        });
      };
      return fiber.run();
    });
    it('instruction timeout', function() {
      var code, e, fiber;
      code = "i = 0\ninfiniteLoop();\nfunction infiniteLoop() {\n  while (true) i++\n}";
      try {
        return vm["eval"](code, '<timeout>', 500);
      } catch (_error) {
        e = _error;
        fiber = e.fiber;
        expect(e.stack).to.eql("TimeoutError: Script timed out\n    at infiniteLoop (<timeout>:4:15)\n    at <timeout>:2:0");
        expect(fiber.timedOut()).to.eql(true);
        expect(vm.realm.global.i).to.eql(37);
        try {
          return fiber.resume(1000);
        } catch (_error) {
          e = _error;
          expect(e.stack).to.eql("TimeoutError: Script timed out\n    at infiniteLoop (<timeout>:4:15)\n    at <timeout>:2:0");
          expect(fiber.timedOut()).to.eql(true);
          return expect(vm.realm.global.i).to.eql(114);
        }
      }
    });
    return it('customize recursion depth', function() {
      var VmError, code, fiber, msg, script;
      code = "var i = 0;\nvar j = rec();\n\nfunction rec() {\n  if (i < 1000) {\n    i++;\n    return rec();\n  }\n  return i;\n};";
      script = Vm.compile(code, 'stackoverflow.js');
      VmError = vm.realm.global.Error;
      msg = /^maximum\scall\sstack\ssize\sexceeded$/;
      fiber = vm.createFiber(script);
      expect((function() {
        return fiber.run();
      })).to.throwError(function(e) {
        expect(e).to.be.a(VmError);
        return expect(e.message).to.match(msg);
      });
      expect(vm.realm.global.j).to.eql(void 0);
      fiber = vm.createFiber(script);
      fiber.maxDepth += 1;
      fiber.run();
      return expect(vm.realm.global.j).to.eql(1000);
    });
  });

  strip = function(global) {
    delete global.Object;
    delete global.Function;
    delete global.Number;
    delete global.Boolean;
    delete global.String;
    delete global.Array;
    delete global.Date;
    delete global.RegExp;
    delete global.Error;
    delete global.EvalError;
    delete global.RangeError;
    delete global.ReferenceError;
    delete global.SyntaxError;
    delete global.TypeError;
    delete global.URIError;
    delete global.Math;
    delete global.JSON;
    delete global.StopIteration;
    delete global.Dog;
    delete global.undefined;
    delete global.global;
    delete global.console;
    delete global.parseFloat;
    delete global.parseInt;
    delete global["eval"];
    delete global.log;
    return global;
  };

}).call(this);


//@ sourceMappingURL=vm.js.map