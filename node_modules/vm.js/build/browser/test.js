(function(root, factory, dependenciesFactory, setup) {
  setup(root, factory, dependenciesFactory);
})(
this,
(function(require, exports, module, global, undefined) {

  var $$___src_runtime_util = {};
$$___src_runtime_util = (function(module, exports) {

  var create, defProp, hasProp, isArray, prototypeOf, toStr;

toStr = function(obj) {
  return Object.prototype.toString.call(obj);
};

if (typeof Object.getPrototypeOf !== 'function') {
  if (typeof ''.__proto__ === 'object') {
    prototypeOf = function(obj) {
      return obj.__proto__;
    };
  } else {
    prototypeOf = function(obj) {
      return obj.constructor.prototype;
    };
  }
} else {
  prototypeOf = Object.getPrototypeOf;
}

if (typeof Object.create !== 'function') {
  create = (function() {
    var F;
    F = function() {};
    return function(o) {
      if (arguments.length !== 1) {
        throw new Error('Object.create implementation only accepts one parameter.');
      }
      F.prototype = o;
      return new F();
    };
  })();
} else {
  create = Object.create;
}

hasProp = function(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
};

if (typeof Array.isArray !== 'function') {
  isArray = function(obj) {
    return toStr(obj) === '[object Array]';
  };
} else {
  isArray = Array.isArray;
}

if (typeof Object.defineProperty === 'function') {
  defProp = function(obj, prop, descriptor) {
    return Object.defineProperty(obj, prop, descriptor);
  };
} else {
  defProp = function(obj, prop, descriptor) {
    return obj[prop] = descriptor.value;
  };
}

exports.prototypeOf = prototypeOf;

exports.create = create;

exports.hasProp = hasProp;

exports.isArray = isArray;

exports.defProp = defProp;


  return module.exports;
})({exports: $$___src_runtime_util}, $$___src_runtime_util);var $$___src_runtime_errors = {};
$$___src_runtime_errors = (function(module, exports) {

  var VmError, VmEvalError, VmRangeError, VmReferenceError, VmSyntaxError, VmTimeoutError, VmTypeError, VmURIError, isArray, printTrace, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

isArray = $$___src_runtime_util.isArray;

printTrace = function(trace, indent) {
  var c, filename, frame, l, name, rv, _i, _len;
  if (indent == null) {
    indent = '';
  }
  indent += '    ';
  rv = '';
  for (_i = 0, _len = trace.length; _i < _len; _i++) {
    frame = trace[_i];
    if (isArray(frame)) {
      rv += "\n\n" + indent + "Rethrown:";
      rv += printTrace(frame, indent);
      continue;
    }
    l = frame.line;
    c = frame.column;
    name = frame.at.name;
    filename = frame.at.filename;
    if (name) {
      rv += "\n" + indent + "at " + name + " (" + filename + ":" + l + ":" + c + ")";
    } else {
      rv += "\n" + indent + "at " + filename + ":" + l + ":" + c;
    }
  }
  return rv;
};

VmError = (function() {
  function VmError(message) {
    var trace;
    this.message = message;
    trace = null;
  }

  VmError.prototype.toString = function() {
    var errName, rv;
    errName = this.constructor.display;
    rv = "" + errName + ": " + this.message;
    if (this.trace) {
      rv += printTrace(this.trace);
    }
    return rv;
  };

  return VmError;

})();

VmEvalError = (function(_super) {
  __extends(VmEvalError, _super);

  function VmEvalError() {
    _ref = VmEvalError.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VmEvalError.display = 'EvalError';

  return VmEvalError;

})(VmError);

VmRangeError = (function(_super) {
  __extends(VmRangeError, _super);

  function VmRangeError() {
    _ref1 = VmRangeError.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  VmRangeError.display = 'RangeError';

  return VmRangeError;

})(VmError);

VmReferenceError = (function(_super) {
  __extends(VmReferenceError, _super);

  function VmReferenceError() {
    _ref2 = VmReferenceError.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  VmReferenceError.display = 'ReferenceError';

  return VmReferenceError;

})(VmError);

VmSyntaxError = (function(_super) {
  __extends(VmSyntaxError, _super);

  function VmSyntaxError() {
    _ref3 = VmSyntaxError.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  VmSyntaxError.display = 'SyntaxError';

  return VmSyntaxError;

})(VmError);

VmTypeError = (function(_super) {
  __extends(VmTypeError, _super);

  function VmTypeError() {
    _ref4 = VmTypeError.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  VmTypeError.display = 'TypeError';

  return VmTypeError;

})(VmError);

VmURIError = (function(_super) {
  __extends(VmURIError, _super);

  function VmURIError() {
    _ref5 = VmURIError.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  VmURIError.display = 'URIError';

  return VmURIError;

})(VmError);

VmTimeoutError = (function(_super) {
  __extends(VmTimeoutError, _super);

  VmTimeoutError.display = 'TimeoutError';

  function VmTimeoutError(fiber) {
    this.fiber = fiber;
    VmTimeoutError.__super__.constructor.call(this, "Script timed out");
  }

  return VmTimeoutError;

})(VmError);

exports.VmError = VmError;

exports.VmEvalError = VmEvalError;

exports.VmRangeError = VmRangeError;

exports.VmReferenceError = VmReferenceError;

exports.VmSyntaxError = VmSyntaxError;

exports.VmTypeError = VmTypeError;

exports.VmURIError = VmURIError;

exports.VmTimeoutError = VmTimeoutError;


  return module.exports;
})({exports: $$___src_runtime_errors}, $$___src_runtime_errors);var $$___src_vm_thread = {};
$$___src_vm_thread = (function(module, exports) {

  var EvalFrame, EvaluationStack, Fiber, Frame, Scope, VmError, VmTimeoutError, WithScope, isArray, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = $$___src_runtime_errors, VmError = _ref.VmError, VmTimeoutError = _ref.VmTimeoutError;

isArray = $$___src_runtime_util.isArray;

Fiber = (function() {
  function Fiber(realm, timeout) {
    this.realm = realm;
    this.timeout = timeout != null ? timeout : -1;
    this.maxDepth = 1000;
    this.maxTraceDepth = 50;
    this.callStack = [];
    this.evalStack = null;
    this.depth = -1;
    this.yielded = this.rv = void 0;
    this.paused = false;
    this.r1 = this.r2 = this.r3 = null;
    this.rexp = null;
  }

  Fiber.prototype.run = function() {
    var err, frame, guard, _ref1;
    frame = this.callStack[this.depth];
    err = frame.error;
    while (this.depth >= 0 && frame && !this.paused) {
      if (err) {
        frame = this.unwind(err);
      }
      frame.run();
      if ((err = frame.error) instanceof VmError) {
        this.injectStackTrace(err);
      }
      if (frame.done()) {
        if (frame.guards.length) {
          guard = frame.guards.pop();
          if (guard.finalizer) {
            frame.ip = guard.finalizer;
            frame.exitIp = guard.end;
            frame.paused = false;
            continue;
          }
        }
      } else {
        frame = this.callStack[this.depth];
        err = frame.error;
        continue;
      }
      if (frame.construct) {
        if ((_ref1 = typeof this.rv) !== 'object' && _ref1 !== 'function') {
          this.rv = frame.scope.get(0);
        }
      }
      frame = this.popFrame();
      if (frame && !err) {
        frame.evalStack.push(this.rv);
        this.rv = void 0;
      }
    }
    if (this.timedOut()) {
      err = new VmTimeoutError(this);
      this.injectStackTrace(err);
    }
    if (err) {
      throw err;
    }
  };

  Fiber.prototype.unwind = function(err) {
    var frame, guard, ip, len;
    frame = this.callStack[this.depth];
    while (frame) {
      frame.error = err;
      ip = frame.ip - 1;
      if (len = frame.guards.length) {
        guard = frame.guards[len - 1];
        if ((guard.start <= ip && ip <= guard.end)) {
          if (guard.handler !== null) {
            if (ip <= guard.handler) {
              frame.evalStack.push(err);
              frame.error = null;
              frame.ip = guard.handler;
            } else {
              if (guard.finalizer && frame.ip <= guard.finalizer) {
                frame.ip = guard.finalizer;
              } else {
                frame = this.popFrame();
                continue;
              }
            }
          } else {
            frame.ip = guard.finalizer;
          }
          frame.paused = false;
          return frame;
        }
      }
      frame = this.popFrame();
    }
    throw err;
  };

  Fiber.prototype.injectStackTrace = function(err) {
    var frame, i, minDepth, name, t, trace, _i, _ref1;
    trace = [];
    minDepth = 0;
    if (this.depth > this.maxTraceDepth) {
      minDepth = this.depth - this.maxTraceDepth;
    }
    for (i = _i = _ref1 = this.depth; _ref1 <= minDepth ? _i <= minDepth : _i >= minDepth; i = _ref1 <= minDepth ? ++_i : --_i) {
      frame = this.callStack[i];
      name = frame.script.name;
      if (name === '<anonymous>' && frame.fname) {
        name = frame.fname;
      }
      trace.push({
        at: {
          name: name,
          filename: frame.script.filename
        },
        line: frame.line,
        column: frame.column
      });
    }
    if (err.trace) {
      t = err.trace;
      while (isArray(t[t.length - 1])) {
        t = t[t.length - 1];
      }
      t.push(trace);
    } else {
      err.trace = trace;
    }
    return err.stack = err.toString();
  };

  Fiber.prototype.pushFrame = function(script, target, parent, args, self, name, construct) {
    var frame, scope;
    if (name == null) {
      name = '<anonymous>';
    }
    if (construct == null) {
      construct = false;
    }
    if (!this.checkCallStack()) {
      return;
    }
    scope = new Scope(parent, script.localNames, script.localLength);
    scope.set(0, target);
    frame = new Frame(this, script, scope, this.realm, name, construct);
    if (self) {
      frame.evalStack.push(self);
    }
    if (args) {
      frame.evalStack.push(args);
    }
    this.callStack[++this.depth] = frame;
    return frame;
  };

  Fiber.prototype.pushEvalFrame = function(frame, script) {
    if (!this.checkCallStack()) {
      return;
    }
    return this.callStack[++this.depth] = new EvalFrame(frame, script);
  };

  Fiber.prototype.checkCallStack = function() {
    if (this.depth === this.maxDepth) {
      this.callStack[this.depth].error = new VmError('maximum call stack size exceeded');
      this.pause();
      return false;
    }
    return true;
  };

  Fiber.prototype.popFrame = function() {
    var frame;
    frame = this.callStack[--this.depth];
    if (frame) {
      frame.paused = false;
    }
    return frame;
  };

  Fiber.prototype.setReturnValue = function(rv) {
    return this.callStack[this.depth].evalStack.push(rv);
  };

  Fiber.prototype.pause = function() {
    return this.paused = this.callStack[this.depth].paused = true;
  };

  Fiber.prototype.resume = function(timeout) {
    var evalStack, frame;
    this.timeout = timeout != null ? timeout : -1;
    this.paused = false;
    frame = this.callStack[this.depth];
    frame.paused = false;
    evalStack = this.callStack[0].evalStack;
    this.run();
    if (!this.paused) {
      return this.rexp;
    }
  };

  Fiber.prototype.timedOut = function() {
    return this.timeout === 0;
  };

  Fiber.prototype.send = function(obj) {
    return this.callStack[this.depth].evalStack.push(obj);
  };

  Fiber.prototype.done = function() {
    return this.depth === -1;
  };

  return Fiber;

})();

Frame = (function() {
  function Frame(fiber, script, scope, realm, fname, construct) {
    this.fiber = fiber;
    this.script = script;
    this.scope = scope;
    this.realm = realm;
    this.fname = fname;
    this.construct = construct != null ? construct : false;
    this.evalStack = new EvaluationStack(this.script.stackSize, this.fiber);
    this.ip = 0;
    this.exitIp = this.script.instructions.length;
    this.paused = false;
    this.finalizer = null;
    this.guards = [];
    this.rv = void 0;
    this.line = this.column = -1;
  }

  Frame.prototype.run = function() {
    var instructions, len;
    instructions = this.script.instructions;
    while (this.ip !== this.exitIp && !this.paused && this.fiber.timeout !== 0) {
      this.fiber.timeout--;
      instructions[this.ip++].exec(this, this.evalStack, this.scope, this.realm);
    }
    if (this.fiber.timeout === 0) {
      this.paused = this.fiber.paused = true;
    }
    if (!this.paused && !this.error && (len = this.evalStack.len()) !== 0) {
      throw new Error("Evaluation stack has " + len + " items after execution");
    }
  };

  Frame.prototype.done = function() {
    return this.ip === this.exitIp;
  };

  Frame.prototype.setLine = function(line) {
    this.line = line;
  };

  Frame.prototype.setColumn = function(column) {
    this.column = column;
  };

  return Frame;

})();

EvalFrame = (function(_super) {
  __extends(EvalFrame, _super);

  function EvalFrame(frame, script) {
    var guard, _i, _len, _ref1;
    _ref1 = frame.script.guards;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      guard = _ref1[_i];
      script.guards.push(guard);
    }
    EvalFrame.__super__.constructor.call(this, frame.fiber, script, frame.scope, frame.realm, script.filename);
  }

  EvalFrame.prototype.run = function() {
    EvalFrame.__super__.run.call(this);
    return this.fiber.rv = this.fiber.rexp;
  };

  return EvalFrame;

})(Frame);

EvaluationStack = (function() {
  function EvaluationStack(size, fiber) {
    this.fiber = fiber;
    this.array = new Array(size);
    this.idx = 0;
  }

  EvaluationStack.prototype.push = function(item) {
    if (this.idx === this.array.length) {
      throw new Error('maximum evaluation stack size exceeded');
    }
    return this.array[this.idx++] = item;
  };

  EvaluationStack.prototype.pop = function() {
    return this.array[--this.idx];
  };

  EvaluationStack.prototype.top = function() {
    return this.array[this.idx - 1];
  };

  EvaluationStack.prototype.len = function() {
    return this.idx;
  };

  EvaluationStack.prototype.clear = function() {
    return this.idx = 0;
  };

  return EvaluationStack;

})();

Scope = (function() {
  function Scope(parent, names, len) {
    this.parent = parent;
    this.names = names;
    this.data = new Array(len);
  }

  Scope.prototype.get = function(i) {
    return this.data[i];
  };

  Scope.prototype.set = function(i, value) {
    return this.data[i] = value;
  };

  Scope.prototype.name = function(name) {
    var k, v, _ref1;
    _ref1 = this.names;
    for (k in _ref1) {
      if (!__hasProp.call(_ref1, k)) continue;
      v = _ref1[k];
      if (v === name) {
        return parseInt(k);
      }
    }
    return -1;
  };

  Scope.prototype.namesHash = function() {
    var k, rv, v, _ref1;
    rv = {};
    _ref1 = this.names;
    for (k in _ref1) {
      if (!__hasProp.call(_ref1, k)) continue;
      v = _ref1[k];
      if (typeof v === 'string') {
        rv[v] = parseInt(k);
      }
    }
    rv['this'] = 0;
    rv['arguments'] = 1;
    return rv;
  };

  return Scope;

})();

WithScope = (function() {
  function WithScope(parent, object) {
    this.parent = parent;
    this.object = object;
  }

  WithScope.prototype.get = function(name) {
    return this.object[name];
  };

  WithScope.prototype.set = function(name, value) {
    return this.object[name] = value;
  };

  WithScope.prototype.has = function(name) {
    return name in this.object;
  };

  return WithScope;

})();

exports.Fiber = Fiber;

exports.Scope = Scope;

exports.WithScope = WithScope;


  return module.exports;
})({exports: $$___src_vm_thread}, $$___src_vm_thread);var $$___src_runtime_builtin = {};
$$___src_runtime_builtin = (function(module, exports) {

  var ArrayIterator, StopIteration, VmError,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

VmError = $$___src_runtime_errors.VmError;

StopIteration = (function(_super) {
  __extends(StopIteration, _super);

  StopIteration.display = 'StopIteration';

  function StopIteration(value, message) {
    this.value = value;
    this.message = message != null ? message : 'iterator has stopped';
  }

  return StopIteration;

})(VmError);

ArrayIterator = (function() {
  function ArrayIterator(elements) {
    this.elements = elements;
    this.index = 0;
  }

  ArrayIterator.prototype.next = function() {
    if (this.index >= this.elements.length) {
      throw new StopIteration();
    }
    return this.elements[this.index++];
  };

  return ArrayIterator;

})();

exports.StopIteration = StopIteration;

exports.ArrayIterator = ArrayIterator;


  return module.exports;
})({exports: $$___src_runtime_builtin}, $$___src_runtime_builtin);var $$___src_runtime_metadata = {};
$$___src_runtime_metadata = (function(module, exports) {

  var AccessorPropertyDescriptor, ArrayIterator, CowObjectMetadata, DataPropertyDescriptor, ObjectMetadata, PropertyDescriptor, RestrictedObjectMetadata, hasProp,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ArrayIterator = $$___src_runtime_builtin.ArrayIterator;

hasProp = $$___src_runtime_util.hasProp;

PropertyDescriptor = (function() {
  function PropertyDescriptor(enumerable, configurable) {
    this.enumerable = enumerable != null ? enumerable : false;
    this.configurable = configurable != null ? configurable : false;
  }

  return PropertyDescriptor;

})();

DataPropertyDescriptor = (function(_super) {
  __extends(DataPropertyDescriptor, _super);

  function DataPropertyDescriptor(value, writable, enumerable, configurable) {
    this.value = value;
    this.writable = writable != null ? writable : false;
    DataPropertyDescriptor.__super__.constructor.call(this, enumerable, configurable);
  }

  return DataPropertyDescriptor;

})(PropertyDescriptor);

AccessorPropertyDescriptor = (function(_super) {
  __extends(AccessorPropertyDescriptor, _super);

  function AccessorPropertyDescriptor(get, set, enumerable, configurable) {
    this.get = get;
    this.set = set;
    AccessorPropertyDescriptor.__super__.constructor.call(this, enumerable, configurable);
  }

  return AccessorPropertyDescriptor;

})(PropertyDescriptor);

ObjectMetadata = (function() {
  function ObjectMetadata(object, realm) {
    this.object = object;
    this.realm = realm;
    this.proto = null;
    this.properties = {};
    this.extensible = true;
  }

  ObjectMetadata.prototype.hasDefProperty = function(key) {
    return hasProp(this.properties, key);
  };

  ObjectMetadata.prototype.hasOwnProperty = function(key) {
    return this.hasDefProperty(key) || hasProp(this.object, key);
  };

  ObjectMetadata.prototype.getOwnProperty = function(key) {
    return this.properties[key] || this.object[key];
  };

  ObjectMetadata.prototype.setOwnProperty = function(key, value) {
    return this.object[key] = value;
  };

  ObjectMetadata.prototype.delOwnProperty = function(key) {
    return delete this.properties[key] && delete this.object[key];
  };

  ObjectMetadata.prototype.delDefProperty = function(key) {
    return delete this.properties[key];
  };

  ObjectMetadata.prototype.searchProperty = function(key) {
    var md, prop;
    md = this;
    while (md) {
      if (md.hasOwnProperty(key)) {
        prop = md.getOwnProperty(key);
        break;
      }
      md = md.proto || this.realm.mdproto(md.object);
    }
    return prop;
  };

  ObjectMetadata.prototype.has = function(key, target) {
    var md;
    if (target == null) {
      target = this.object;
    }
    md = this;
    while (md) {
      if (md.hasOwnProperty(key)) {
        return true;
      }
      md = md.proto || this.realm.mdproto(md.object);
    }
    return false;
  };

  ObjectMetadata.prototype.get = function(key, target) {
    var property;
    if (target == null) {
      target = this.object;
    }
    property = this.searchProperty(key);
    if (property instanceof AccessorPropertyDescriptor) {
      return property.get.call(target);
    }
    if (property instanceof DataPropertyDescriptor) {
      return property.value;
    }
    return property;
  };

  ObjectMetadata.prototype.set = function(key, value, target) {
    var property;
    if (target == null) {
      target = this.object;
    }
    property = this.getOwnProperty(key);
    if (property instanceof AccessorPropertyDescriptor) {
      if (property.set) {
        property.set.call(target, value);
        return true;
      }
      return false;
    }
    if (property instanceof DataPropertyDescriptor) {
      if (property.writable) {
        property.value = value;
        return true;
      }
      return false;
    }
    if (property === void 0 && !this.extensible) {
      return false;
    }
    this.setOwnProperty(key, value);
    return true;
  };

  ObjectMetadata.prototype.del = function(key) {
    var property;
    if (!this.hasOwnProperty(key)) {
      return false;
    }
    property = this.getOwnProperty(key);
    if (property instanceof PropertyDescriptor && !property.configurable) {
      return false;
    }
    this.delOwnProperty(key);
    return true;
  };

  ObjectMetadata.prototype.defineProperty = function(key, descriptor) {
    var prop;
    if (!this.extensible) {
      return false;
    }
    if ('value' in descriptor || 'writable' in descriptor) {
      prop = new DataPropertyDescriptor(descriptor.value, descriptor.writable, descriptor.enumerable, descriptor.configurable);
    } else if (typeof descriptor.get === 'function') {
      prop = new AccessorPropertyDescriptor(descriptor.get, descriptor.set, descriptor.enumerable, descriptor.writable);
    } else {
      return;
    }
    this.properties[key] = prop;
    return true;
  };

  ObjectMetadata.prototype.instanceOf = function(klass) {
    var md, proto;
    md = this;
    while (md !== null) {
      if (md.object === klass.prototype) {
        return true;
      }
      proto = md.proto;
      if (!proto) {
        return md.object instanceof klass;
      }
      md = proto;
    }
    return false;
  };

  ObjectMetadata.prototype.isEnumerable = function(k) {
    var v;
    v = this.properties[k] || this.object[k];
    return !(v instanceof PropertyDescriptor) || v.enumerable;
  };

  ObjectMetadata.prototype.ownKeys = function() {
    var k, keys, _ref, _ref1;
    keys = [];
    _ref = this.object;
    for (k in _ref) {
      if (!__hasProp.call(_ref, k)) continue;
      if (this.isEnumerable(k)) {
        keys.push(k);
      }
    }
    _ref1 = this.properties;
    for (k in _ref1) {
      if (!__hasProp.call(_ref1, k)) continue;
      if (this.isEnumerable(k)) {
        keys.push(k);
      }
    }
    return keys;
  };

  ObjectMetadata.prototype.enumerateKeys = function() {
    var keys, md;
    keys = [];
    md = this;
    while (md) {
      keys = keys.concat(md.ownKeys());
      md = md.proto || this.realm.mdproto(md.object);
    }
    return new ArrayIterator(keys);
  };

  return ObjectMetadata;

})();

CowObjectMetadata = (function(_super) {
  __extends(CowObjectMetadata, _super);

  function CowObjectMetadata(object, realm) {
    CowObjectMetadata.__super__.constructor.call(this, object, realm);
    this.exclude = {};
  }

  CowObjectMetadata.prototype.hasOwnProperty = function(key) {
    return hasProp(this.properties, key) || (hasProp(this.object, key) && !hasProp(this.exclude, key));
  };

  CowObjectMetadata.prototype.getOwnProperty = function(key) {
    if (hasProp(this.properties, key)) {
      return this.properties[key];
    }
    if (hasProp(this.object, key) && !hasProp(this.exclude, key)) {
      return this.object[key];
    }
    return void 0;
  };

  CowObjectMetadata.prototype.setOwnProperty = function(key, value) {
    if (hasProp(this.exclude, key)) {
      delete this.exclude[key];
    }
    if (!hasProp(this.properties, key)) {
      this.defineProperty(key, {
        value: value,
        writable: true,
        enumerable: true,
        configurable: true
      });
    }
    return this.properties[key].value = value;
  };

  CowObjectMetadata.prototype.delOwnProperty = function(key) {
    if (hasProp(this.properties, key)) {
      delete this.properties[key];
    }
    return this.exclude[key] = null;
  };

  CowObjectMetadata.prototype.isEnumerable = function(k) {
    if (!CowObjectMetadata.__super__.isEnumerable.call(this, k)) {
      return false;
    }
    return !hasProp(this.exclude, k);
  };

  return CowObjectMetadata;

})(ObjectMetadata);

RestrictedObjectMetadata = (function(_super) {
  __extends(RestrictedObjectMetadata, _super);

  function RestrictedObjectMetadata(object, realm) {
    RestrictedObjectMetadata.__super__.constructor.call(this, object, realm);
    this.leak = {};
  }

  RestrictedObjectMetadata.prototype.hasOwnProperty = function(key) {
    return hasProp(this.properties, key) || (hasProp(this.leak, key) && hasProp(this.object, key) && !hasProp(this.exclude, key));
  };

  RestrictedObjectMetadata.prototype.getOwnProperty = function(key) {
    if (hasProp(this.properties, key)) {
      return this.properties[key];
    }
    if (hasProp(this.leak, key) && hasProp(this.object, key) && !hasProp(this.exclude, key)) {
      return this.object[key];
    }
    return void 0;
  };

  RestrictedObjectMetadata.prototype.isEnumerable = function(k) {
    if (!RestrictedObjectMetadata.__super__.isEnumerable.call(this, k)) {
      return false;
    }
    return hasProp(this.leak, k);
  };

  return RestrictedObjectMetadata;

})(CowObjectMetadata);

exports.ObjectMetadata = ObjectMetadata;

exports.CowObjectMetadata = CowObjectMetadata;

exports.RestrictedObjectMetadata = RestrictedObjectMetadata;


  return module.exports;
})({exports: $$___src_runtime_metadata}, $$___src_runtime_metadata);var $$___src_runtime_regexp_proxy = {};
$$___src_runtime_regexp_proxy = (function(module, exports) {

  var CowObjectMetadata, RegExpProxy, defProp;

CowObjectMetadata = $$___src_runtime_metadata.CowObjectMetadata;

defProp = $$___src_runtime_util.defProp;

RegExpProxy = (function() {
  RegExpProxy.__name__ = 'RegExp';

  function RegExpProxy(regexp, realm) {
    var md;
    this.regexp = regexp;
    this.lastIndex = 0;
    md = new CowObjectMetadata(this, realm);
    md.proto = realm.getNativeMetadata(RegExp.prototype);
    md.defineProperty('global', {
      value: regexp.global
    });
    md.defineProperty('ignoreCase', {
      value: regexp.ignoreCase
    });
    md.defineProperty('multiline', {
      value: regexp.multiline
    });
    md.defineProperty('source', {
      value: regexp.source
    });
    defProp(this, '__md__', {
      value: md,
      writable: true
    });
  }

  return RegExpProxy;

})();

module.exports = RegExpProxy;


  return module.exports;
})({exports: $$___src_runtime_regexp_proxy}, $$___src_runtime_regexp_proxy);var $$___src_ast_visitor = {};
$$___src_ast_visitor = (function(module, exports) {

  var Visitor;

Visitor = (function() {
  function Visitor() {}

  Visitor.prototype.visit = function(node) {
    if (node instanceof Array) {
      return this.visitArray(node);
    }
    if (node && node.type) {
      return this[node.type](node);
    }
    if (node) {
      throw new Error('unexpected node');
    }
    return null;
  };

  Visitor.prototype.visitArray = function(array) {
    var i, result;
    i = 0;
    while (i < array.length) {
      if (!array[i]) {
        i++;
        continue;
      }
      result = this.visit(array[i]);
      if (result) {
        array[i++] = result;
      } else {
        array.splice(i, 1);
      }
    }
    return array;
  };

  Visitor.prototype.Program = function(node) {
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.EmptyStatement = function(node) {
    return null;
  };

  Visitor.prototype.BlockStatement = function(node) {
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.ExpressionStatement = function(node) {
    node.expression = this.visit(node.expression);
    return node;
  };

  Visitor.prototype.IfStatement = function(node) {
    node.test = this.visit(node.test);
    node.consequent = this.visit(node.consequent);
    node.alternate = this.visit(node.alternate);
    return node;
  };

  Visitor.prototype.LabeledStatement = function(node) {
    node.label = this.visit(node.label);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.BreakStatement = function(node) {
    node.label = this.visit(node.label);
    return node;
  };

  Visitor.prototype.ContinueStatement = function(node) {
    node.label = this.visit(node.label);
    return node;
  };

  Visitor.prototype.WithStatement = function(node) {
    node.object = this.visit(node.object);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.SwitchStatement = function(node) {
    node.discriminant = this.visit(node.discriminant);
    node.cases = this.visit(node.cases);
    return node;
  };

  Visitor.prototype.ReturnStatement = function(node) {
    node.argument = this.visit(node.argument);
    return node;
  };

  Visitor.prototype.ThrowStatement = function(node) {
    node.argument = this.visit(node.argument);
    return node;
  };

  Visitor.prototype.TryStatement = function(node) {
    node.block = this.visit(node.block);
    node.handlers = this.visit(node.handlers);
    node.guardedHandlers = this.visit(node.guardedHandlers);
    node.finalizer = this.visit(node.finalizer);
    return node;
  };

  Visitor.prototype.WhileStatement = function(node) {
    node.test = this.visit(node.test);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.DoWhileStatement = function(node) {
    node.body = this.visit(node.body);
    node.test = this.visit(node.test);
    return node;
  };

  Visitor.prototype.ForStatement = function(node) {
    node.test = this.visit(node.test);
    node.body = this.visit(node.body);
    node.init = this.visit(node.init);
    node.update = this.visit(node.update);
    return node;
  };

  Visitor.prototype.ForInStatement = function(node) {
    node.left = this.visit(node.left);
    node.right = this.visit(node.right);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.ForOfStatement = function(node) {
    node.left = this.visit(node.left);
    node.right = this.visit(node.right);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.LetStatement = function(node) {
    node.head = this.visit(node.head);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.DebuggerStatement = function(node) {
    return node;
  };

  Visitor.prototype.FunctionDeclaration = function(node) {
    node.id = this.visit(node.id);
    node.params = this.visit(node.params);
    node.defaults = this.visit(node.defaults);
    node.rest = this.visit(node.rest);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.VariableDeclaration = function(node) {
    node.declarations = this.visit(node.declarations);
    return node;
  };

  Visitor.prototype.VariableDeclarator = function(node) {
    node.id = this.visit(node.id);
    node.init = this.visit(node.init);
    return node;
  };

  Visitor.prototype.ThisExpression = function(node) {
    return node;
  };

  Visitor.prototype.ArrayExpression = function(node) {
    node.elements = this.visit(node.elements);
    return node;
  };

  Visitor.prototype.ObjectExpression = function(node) {
    var property, _i, _len, _ref;
    _ref = node.properties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      property = _ref[_i];
      property.value = this.visit(property.value);
      property.key = this.visit(property.key);
    }
    return node;
  };

  Visitor.prototype.FunctionExpression = function(node) {
    node.id = this.visit(node.id);
    node.params = this.visit(node.params);
    node.defaults = this.visit(node.defaults);
    node.rest = this.visit(node.rest);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.SequenceExpression = function(node) {
    node.expressions = this.visit(node.expressions);
    return node;
  };

  Visitor.prototype.UnaryExpression = function(node) {
    node.argument = this.visit(node.argument);
    return node;
  };

  Visitor.prototype.BinaryExpression = function(node) {
    node.left = this.visit(node.left);
    node.right = this.visit(node.right);
    return node;
  };

  Visitor.prototype.AssignmentExpression = function(node) {
    node.right = this.visit(node.right);
    node.left = this.visit(node.left);
    return node;
  };

  Visitor.prototype.UpdateExpression = function(node) {
    node.argument = this.visit(node.argument);
    return node;
  };

  Visitor.prototype.LogicalExpression = function(node) {
    node.left = this.visit(node.left);
    node.right = this.visit(node.right);
    return node;
  };

  Visitor.prototype.ConditionalExpression = function(node) {
    node.test = this.visit(node.test);
    node.consequent = this.visit(node.consequent);
    node.alternate = this.visit(node.alternate);
    return node;
  };

  Visitor.prototype.NewExpression = function(node) {
    node.callee = this.visit(node.callee);
    node["arguments"] = this.visit(node["arguments"]);
    return node;
  };

  Visitor.prototype.CallExpression = function(node) {
    node["arguments"] = this.visit(node["arguments"]);
    node.callee = this.visit(node.callee);
    return node;
  };

  Visitor.prototype.MemberExpression = function(node) {
    node.object = this.visit(node.object);
    node.property = this.visit(node.property);
    return node;
  };

  Visitor.prototype.ObjectPattern = function(node) {
    var property, _i, _len, _ref;
    _ref = node.properties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      property = _ref[_i];
      property.value = this.visit(property.value);
      property.key = this.visit(property.key);
    }
    return node;
  };

  Visitor.prototype.ArrayPattern = function(node) {
    node.elements = this.visit(node.elements);
    return node;
  };

  Visitor.prototype.SwitchCase = function(node) {
    node.test = this.visit(node.test);
    node.consequent = this.visit(node.consequent);
    return node;
  };

  Visitor.prototype.CatchClause = function(node) {
    node.param = this.visit(node.param);
    node.guard = this.visit(node.guard);
    node.body = this.visit(node.body);
    return node;
  };

  Visitor.prototype.Identifier = function(node) {
    return node;
  };

  Visitor.prototype.Literal = function(node) {
    return node;
  };

  Visitor.prototype.YieldExpression = function(node) {
    node.argument = this.visit(node.argument);
    return node;
  };

  Visitor.prototype.ComprehensionExpression = function(node) {
    node.body = this.visit(node.body);
    node.blocks = this.visit(node.blocks);
    node.filter = this.visit(node.filter);
    return node;
  };

  Visitor.prototype.ComprehensionBlock = function(node) {
    node.left = this.visit(node.pattern);
    node.right = this.visit(node.right);
    return node;
  };

  Visitor.prototype.ClassExpression = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ClassBody = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ClassDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ClassHeritage = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ArrowFunctionExpression = function(node) {
    node.params = this.visit(node.params);
    node.defaults = this.visit(node.defaults);
    node.rest = this.visit(node.rest);
    node.body = this.visit(node.body);
    return node;
    throw new Error('not implemented');
  };

  Visitor.prototype.ExportBatchSpecifier = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ExportSpecifier = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ExportDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ImportSpecifier = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ImportDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.MethodDefinition = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.Property = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.ModuleDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.SpreadElement = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.TemplateElement = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.TaggedTemplateExpression = function(node) {
    throw new Error('not implemented');
  };

  Visitor.prototype.TemplateLiteral = function(node) {
    throw new Error('not implemented');
  };

  return Visitor;

})();

module.exports = Visitor;


  return module.exports;
})({exports: $$___src_ast_visitor}, $$___src_ast_visitor);var $$___src_vm_opcodes = {};
$$___src_vm_opcodes = (function(module, exports) {

  var ArrayIterator, Counter, Fiber, Op, OpcodeClassFactory, RegExpProxy, Scope, StopIteration, Visitor, VmEvalError, VmReferenceError, VmTypeError, WithScope, calculateOpcodeFactor, call, callArrayConstructor, callDateConstructor, callRegExpConstructor, callm, create, createFunction, createGenerator, createNativeInstance, debug, defProp, esprima, hasProp, opcodes, ret, throwErr, _ref, _ref1, _ref2, _ref3,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

esprima = require('esprima');

Visitor = $$___src_ast_visitor;

_ref = $$___src_runtime_builtin, StopIteration = _ref.StopIteration, ArrayIterator = _ref.ArrayIterator;

_ref1 = $$___src_runtime_util, defProp = _ref1.defProp, hasProp = _ref1.hasProp, create = _ref1.create;

_ref2 = $$___src_runtime_errors, VmTypeError = _ref2.VmTypeError, VmEvalError = _ref2.VmEvalError, VmReferenceError = _ref2.VmReferenceError;

RegExpProxy = $$___src_runtime_regexp_proxy;

_ref3 = $$___src_vm_thread, Fiber = _ref3.Fiber, Scope = _ref3.Scope, WithScope = _ref3.WithScope;

OpcodeClassFactory = (function() {
  var classFactory, id;
  id = 0;
  classFactory = function(name, fn, calculateFactor) {
    var OpcodeClass;
    OpcodeClass = (function() {
      var constructor;
      if (typeof eval !== 'function' || (typeof (constructor = eval("(function " + name + "(args) { if (args) this.args = args; })")) !== 'function')) {
        constructor = function(args) {
          if (args) {
            this.args = args;
          }
        };
        constructor.name = name;
      }
      constructor.prototype.id = id++;
      constructor.prototype.name = name;
      constructor.prototype.exec = fn;
      if (calculateFactor) {
        constructor.prototype.calculateFactor = calculateFactor;
      } else {
        constructor.prototype.factor = calculateOpcodeFactor(fn);
        constructor.prototype.calculateFactor = function() {
          return this.factor;
        };
      }
      return constructor;
    })();
    return OpcodeClass;
  };
  return classFactory;
})();

Counter = (function(_super) {
  __extends(Counter, _super);

  function Counter() {
    this.factor = 0;
    this.current = 0;
  }

  Counter.prototype.CallExpression = function(node) {
    var name;
    node = Counter.__super__.CallExpression.call(this, node);
    if (node.callee.type === 'MemberExpression') {
      if (node.callee.property.type === 'Identifier') {
        name = node.callee.property.name;
      } else if (node.callee.property.type === 'Literal') {
        name = node.callee.property.value;
      } else {
        throw new Error('assert error');
      }
      if (name === 'push') {
        this.current++;
      } else if (name === 'pop') {
        this.current--;
      }
      this.factor = Math.max(this.factor, this.current);
    }
    return node;
  };

  return Counter;

})(Visitor);

calculateOpcodeFactor = function(opcodeFn) {
  var ast, counter;
  ast = esprima.parse("(" + (opcodeFn.toString()) + ")");
  counter = new Counter();
  counter.visit(ast);
  return counter.factor;
};

Op = function(name, fn, factorFn) {
  return OpcodeClassFactory(name, fn, factorFn);
};

opcodes = [
  Op('POP', function(f, s, l) {
    return s.pop();
  }), Op('DUP', function(f, s, l) {
    return s.push(s.top());
  }), Op('SWAP', function(f, s, l) {
    var bot, top;
    top = s.pop();
    bot = s.pop();
    s.push(top);
    return s.push(bot);
  }), Op('RET', function(f, s, l) {
    return ret(f);
  }), Op('RETV', function(f, s, l) {
    f.fiber.rv = s.pop();
    return ret(f);
  }), Op('PAUSE', function(f, s) {
    return f.paused = true;
  }), Op('YIELD', function(f, s) {
    f.fiber.yielded = s.pop();
    return f.fiber.pause();
  }), Op('THROW', function(f, s, l) {
    return throwErr(f, s.pop());
  }), Op('ENTER_GUARD', function(f) {
    return f.guards.push(f.script.guards[this.args[0]]);
  }), Op('EXIT_GUARD', function(f) {
    var currentGuard, specifiedGuard;
    currentGuard = f.guards[f.guards.length - 1];
    specifiedGuard = f.script.guards[this.args[0]];
    if (specifiedGuard === currentGuard) {
      return f.guards.pop();
    }
  }), Op('SR1', function(f, s, l) {
    return f.fiber.r1 = s.pop();
  }), Op('SR2', function(f, s, l) {
    return f.fiber.r2 = s.pop();
  }), Op('SR3', function(f, s, l) {
    return f.fiber.r3 = s.pop();
  }), Op('LR1', function(f, s, l) {
    return s.push(f.fiber.r1);
  }), Op('LR2', function(f, s, l) {
    return s.push(f.fiber.r2);
  }), Op('LR3', function(f, s, l) {
    return s.push(f.fiber.r3);
  }), Op('SREXP', function(f, s, l) {
    return s.fiber.rexp = s.pop();
  }), Op('ITER', function(f, s, l) {
    return callm(f, 0, 'iterator', s.pop());
  }), Op('ENUMERATE', function(f, s, l, r) {
    return s.push(r.enumerateKeys(s.pop()));
  }), Op('NEXT', function(f, s, l) {
    callm(f, 0, 'next', s.pop());
    if (f.error instanceof StopIteration) {
      f.error = null;
      f.paused = false;
      return f.ip = this.args[0];
    }
  }), Op('FUNCTION_SETUP', function(f, s, l) {
    var fn;
    l.set(1, s.pop());
    fn = s.pop();
    if (this.args[0]) {
      return l.set(2, fn);
    }
  }, function() {
    return 0;
  }), Op('GLOBAL', function(f, s, l, r) {
    return s.push(r.global);
  }), Op('REST', function(f, s, l, r) {
    var args, index, varIndex;
    index = this.args[0];
    varIndex = this.args[1];
    args = l.get(1);
    if (index < args.length) {
      return l.set(varIndex, Array.prototype.slice.call(args, index));
    }
  }), Op('NEW', function(f, s, l) {
    return call(f, this.args[0], s.pop(), null, null, true);
  }), Op('CALL', function(f, s, l) {
    return call(f, this.args[0], s.pop(), null, this.args[1]);
  }, function() {
    return 1 - (this.args[0] + 1);
  }), Op('CALLM', function(f, s, l) {
    return callm(f, this.args[0], s.pop(), s.pop(), this.args[1]);
  }, function() {
    return 1 - (this.args[0] + 1 + 1);
  }), Op('GET', function(f, s, l, r) {
    var key, obj;
    obj = s.pop();
    key = s.pop();
    if (obj == null) {
      return throwErr(f, new VmTypeError("Cannot read property '" + key + "' of " + obj));
    }
    return s.push(r.get(obj, key));
  }), Op('SET', function(f, s, l, r) {
    var key, obj, val;
    obj = s.pop();
    key = s.pop();
    val = s.pop();
    if (obj == null) {
      return throwErr(f, new VmTypeError("Cannot set property '" + key + "' of " + obj));
    }
    return s.push(r.set(obj, key, val));
  }), Op('DEL', function(f, s, l, r) {
    var key, obj;
    obj = s.pop();
    key = s.pop();
    if (obj == null) {
      return throwErr(f, new VmTypeError('Cannot convert null to object'));
    }
    return s.push(r.del(obj, key));
  }), Op('GETL', function(f, s, l) {
    var scope, scopeIndex, varIndex;
    scopeIndex = this.args[0];
    varIndex = this.args[1];
    scope = l;
    while (scopeIndex--) {
      scope = scope.parent;
    }
    return s.push(scope.get(varIndex));
  }), Op('SETL', function(f, s, l) {
    var scope, scopeIndex, varIndex;
    scopeIndex = this.args[0];
    varIndex = this.args[1];
    scope = l;
    while (scopeIndex--) {
      scope = scope.parent;
    }
    return s.push(scope.set(varIndex, s.pop()));
  }), Op('GETW', function(f, s, l, r) {
    var idx, key;
    key = this.args[0];
    while (l instanceof WithScope) {
      if (l.has(key)) {
        return s.push(l.get(key));
      }
      l = l.parent;
    }
    while (l instanceof Scope) {
      idx = l.name(key);
      if (idx >= 0) {
        return s.push(l.get(idx));
      }
      l = l.parent;
    }
    if (!hasProp(r.global, key) && !this.args[1]) {
      return throwErr(f, new VmReferenceError("" + key + " is not defined"));
    }
    return s.push(r.global[key]);
  }), Op('SETW', function(f, s, l, r) {
    var idx, key, value;
    key = this.args[0];
    value = s.pop();
    while (l instanceof WithScope) {
      if (l.has(key)) {
        return s.push(l.set(key, value));
      }
      l = l.parent;
    }
    while (l instanceof Scope) {
      idx = l.name(key);
      if (idx >= 0) {
        return s.push(l.set(idx, value));
      }
      l = l.parent;
    }
    return s.push(r.global[key] = value);
  }), Op('GETG', function(f, s, l, r) {
    if (!hasProp(r.global, this.args[0]) && !this.args[1]) {
      return throwErr(f, new VmReferenceError("" + this.args[0] + " is not defined"));
    }
    return s.push(r.global[this.args[0]]);
  }), Op('SETG', function(f, s, l, r) {
    return s.push(r.global[this.args[0]] = s.pop());
  }), Op('ENTER_SCOPE', function(f) {
    return f.scope = new Scope(f.scope, f.script.localNames, f.script.localLength);
  }), Op('EXIT_SCOPE', function(f) {
    return f.scope = f.scope.parent;
  }), Op('ENTER_WITH', function(f, s) {
    return f.scope = new WithScope(f.scope, s.pop());
  }), Op('INV', function(f, s, l, r) {
    return s.push(r.inv(s.pop()));
  }), Op('LNOT', function(f, s, l, r) {
    return s.push(r.lnot(s.pop()));
  }), Op('NOT', function(f, s, l, r) {
    return s.push(r.not(s.pop()));
  }), Op('INC', function(f, s, l, r) {
    return s.push(r.inc(s.pop()));
  }), Op('DEC', function(f, s, l, r) {
    return s.push(r.dec(s.pop()));
  }), Op('ADD', function(f, s, l, r) {
    return s.push(r.add(s.pop(), s.pop()));
  }), Op('SUB', function(f, s, l, r) {
    return s.push(r.sub(s.pop(), s.pop()));
  }), Op('MUL', function(f, s, l, r) {
    return s.push(r.mul(s.pop(), s.pop()));
  }), Op('DIV', function(f, s, l, r) {
    return s.push(r.div(s.pop(), s.pop()));
  }), Op('MOD', function(f, s, l, r) {
    return s.push(r.mod(s.pop(), s.pop()));
  }), Op('SHL', function(f, s, l, r) {
    return s.push(r.shl(s.pop(), s.pop()));
  }), Op('SAR', function(f, s, l, r) {
    return s.push(r.sar(s.pop(), s.pop()));
  }), Op('SHR', function(f, s, l, r) {
    return s.push(r.shr(s.pop(), s.pop()));
  }), Op('OR', function(f, s, l, r) {
    return s.push(r.or(s.pop(), s.pop()));
  }), Op('AND', function(f, s, l, r) {
    return s.push(r.and(s.pop(), s.pop()));
  }), Op('XOR', function(f, s, l, r) {
    return s.push(r.xor(s.pop(), s.pop()));
  }), Op('CEQ', function(f, s, l, r) {
    return s.push(r.ceq(s.pop(), s.pop()));
  }), Op('CNEQ', function(f, s, l, r) {
    return s.push(r.cneq(s.pop(), s.pop()));
  }), Op('CID', function(f, s, l, r) {
    return s.push(r.cid(s.pop(), s.pop()));
  }), Op('CNID', function(f, s, l, r) {
    return s.push(r.cnid(s.pop(), s.pop()));
  }), Op('LT', function(f, s, l, r) {
    return s.push(r.lt(s.pop(), s.pop()));
  }), Op('LTE', function(f, s, l, r) {
    return s.push(r.lte(s.pop(), s.pop()));
  }), Op('GT', function(f, s, l, r) {
    return s.push(r.gt(s.pop(), s.pop()));
  }), Op('GTE', function(f, s, l, r) {
    return s.push(r.gte(s.pop(), s.pop()));
  }), Op('IN', function(f, s, l, r) {
    return s.push(r.has(s.pop(), s.pop()));
  }), Op('INSTANCEOF', function(f, s, l, r) {
    return s.push(r.instanceOf(s.pop(), s.pop()));
  }), Op('TYPEOF', function(f, s, l, r) {
    return s.push(typeof s.pop());
  }), Op('VOID', function(f, s) {
    s.pop();
    return s.push(void 0);
  }), Op('JMP', function(f, s, l) {
    return f.ip = this.args[0];
  }), Op('JMPT', function(f, s, l) {
    if (s.pop()) {
      return f.ip = this.args[0];
    }
  }), Op('JMPF', function(f, s, l) {
    if (!s.pop()) {
      return f.ip = this.args[0];
    }
  }), Op('UNDEF', function(f, s) {
    return s.push(void 0);
  }), Op('LITERAL', function(f, s, l) {
    return s.push(this.args[0]);
  }), Op('STRING_LITERAL', function(f, s, l) {
    return s.push(f.script.strings[this.args[0]]);
  }), Op('REGEXP_LITERAL', function(f, s, l, r) {
    return s.push(new RegExpProxy(f.script.regexps[this.args[0]], r));
  }), Op('OBJECT_LITERAL', function(f, s, l, r) {
    var length, rv;
    length = this.args[0];
    rv = {};
    while (length--) {
      r.set(rv, s.pop(), s.pop());
    }
    return s.push(rv);
  }, function() {
    return 1 - (this.args[0] * 2);
  }), Op('ARRAY_LITERAL', function(f, s, l, r) {
    var length, rv;
    length = this.args[0];
    rv = new Array(length);
    while (length--) {
      rv[length] = s.pop();
    }
    return s.push(rv);
  }, function() {
    return 1 - this.args[0];
  }), Op('FUNCTION', function(f, s, l, r) {
    var scriptIndex;
    scriptIndex = this.args[0];
    return s.push(createFunction(f.script.scripts[scriptIndex], l, r, this.args[1]));
  }), Op('LINE', function(f) {
    return f.setLine(this.args[0]);
  }), Op('COLUMN', function(f) {
    return f.setColumn(this.args[0]);
  }), Op('DEBUG', function(f, s, l) {
    return debug();
  })
];

throwErr = function(frame, err) {
  frame.error = err;
  return frame.paused = true;
};

callm = function(frame, length, key, target, name) {
  var constructor, func, id, realm, stack, targetName;
  stack = frame.evalStack, realm = frame.realm;
  if (target == null) {
    id = 'null';
    if (target === void 0) {
      id = 'undefined';
    }
    return throwErr(frame, new VmTypeError("Cannot call method '" + key + "' of " + id));
  }
  constructor = target.constructor;
  targetName = constructor.__name__ || constructor.name || 'Object';
  name = "" + targetName + "." + name;
  func = realm.get(target, key);
  if (func instanceof Function) {
    return call(frame, length, func, target, name);
  }
  if (func == null) {
    stack.pop();
    return throwErr(frame, new VmTypeError("Object #<" + targetName + "> has no method '" + key + "'"));
  } else {
    stack.pop();
    return throwErr(frame, new VmTypeError("Property '" + key + "' of object #<" + targetName + "> is not a function"));
  }
};

call = function(frame, length, func, target, name, construct) {
  var args, e, fiber, nativeError, push, realm, script, stack, val;
  if (typeof func !== 'function') {
    return throwErr(frame, new VmTypeError("object is not a function"));
  }
  stack = frame.evalStack, fiber = frame.fiber, realm = frame.realm;
  args = {
    length: length,
    callee: func
  };
  while (length) {
    args[--length] = stack.pop();
  }
  target = target || realm.global;
  push = true;
  args = Array.prototype.slice.call(args);
  if (func === Function || func === realm["eval"]) {
    try {
      if (func === Function) {
        stack.push(createFunction(realm.compileFunction(args), null, realm));
      } else {
        script = realm["eval"](frame, args[0]);
        frame.paused = true;
        fiber.pushEvalFrame(frame, script);
      }
    } catch (_error) {
      e = _error;
      throwErr(frame, new VmEvalError(e.message));
    }
    return;
  }
  if (hasProp(func, '__vmfunction__')) {
    func.__callname__ = name;
    func.__fiber__ = fiber;
    func.__construct__ = construct;
    push = false;
  }
  try {
    if (construct) {
      val = createNativeInstance(func, args);
    } else {
      val = func.apply(target, args);
    }
    if (push && !fiber.paused) {
      return stack.push(val);
    }
  } catch (_error) {
    nativeError = _error;
    return throwErr(frame, nativeError);
  }
};

createGenerator = function(caller, script, scope, realm, target, args, fn, callname) {
  var close, fiber, frame, newborn, rv, send, thrw, timeout;
  if (caller) {
    timeout = caller.timeout;
  }
  fiber = new Fiber(realm, timeout);
  frame = fiber.pushFrame(script, target, scope, args, fn, callname, false);
  newborn = true;
  send = function(obj) {
    if (newborn && obj !== void 0) {
      throw new VmTypeError('no argument must be passed when starting generator');
    }
    if (fiber.done()) {
      throw new VmError('generator closed');
    }
    frame = fiber.callStack[fiber.depth];
    if (newborn) {
      newborn = false;
      fiber.run();
    } else {
      frame.evalStack.push(obj);
      fiber.resume();
    }
    if (caller) {
      caller.timeout = fiber.timeout;
    }
    if (fiber.done()) {
      rv.closed = true;
      throw new StopIteration(fiber.rv, 'generator has stopped');
    }
    return fiber.yielded;
  };
  thrw = function(e) {
    if (newborn) {
      close();
      return e;
    }
    if (fiber.done()) {
      throw new VmError('generator closed');
    }
    frame = fiber.callStack[fiber.depth];
    frame.error = e;
    fiber.resume();
    if (caller) {
      caller.timeout = fiber.timeout;
    }
    if (fiber.done()) {
      return fiber.rv;
    }
    return fiber.yielded;
  };
  close = function() {
    if (fiber.done()) {
      return;
    }
    if (newborn) {
      fiber.depth = -1;
    }
    frame = fiber.callStack[fiber.depth];
    frame.evalStack.clear();
    frame.ip = frame.exitIp;
    fiber.resume();
    if (caller) {
      caller.timeout = fiber.timeout;
    }
    return fiber.rv;
  };
  rv = {
    next: send,
    send: send,
    "throw": thrw,
    close: close,
    closed: false,
    iterator: function() {
      return rv;
    }
  };
  return rv;
};

createFunction = function(script, scope, realm, generator) {
  var rv;
  if (generator) {
    rv = function() {
      var fiber, gen, name;
      name = rv.__callname__ || script.name;
      gen = createGenerator(rv.__fiber__, script, scope, realm, this, arguments, rv, name);
      if (!(fiber = rv.__fiber__)) {
        return gen;
      }
      fiber.callStack[fiber.depth].evalStack.push(gen);
      rv.__fiber__ = null;
      return rv.__callname__ = null;
    };
  } else {
    rv = function() {
      var construct, fiber, name, run;
      run = false;
      if (fiber = rv.__fiber__) {
        fiber.callStack[fiber.depth].paused = true;
        rv.__fiber__ = null;
        construct = rv.__construct__;
        rv.__construct__ = null;
      } else {
        fiber = new Fiber(realm);
        run = true;
      }
      name = rv.__callname__ || script.name;
      rv.__callname__ = null;
      fiber.pushFrame(script, this, scope, arguments, rv, name, construct);
      if (run) {
        fiber.run();
        return fiber.rv;
      }
    };
  }
  defProp(rv, '__vmfunction__', {
    value: true
  });
  defProp(rv, '__source__', {
    value: script.source
  });
  defProp(rv, '__name__', {
    value: script.name
  });
  defProp(rv, '__construct__', {
    value: null,
    writable: true
  });
  defProp(rv, '__fiber__', {
    value: null,
    writable: true
  });
  defProp(rv, '__callname__', {
    value: null,
    writable: true
  });
  return rv;
};

ret = function(frame) {
  frame.evalStack.clear();
  return frame.exitIp = frame.ip;
};

debug = function() {};

callDateConstructor = function(a) {
  var rv;
  switch (a.length) {
    case 0:
      rv = new Date();
      break;
    case 1:
      rv = new Date(a[0]);
      break;
    case 2:
      rv = new Date(a[0], a[1]);
      break;
    case 3:
      rv = new Date(a[0], a[1], a[2]);
      break;
    case 4:
      rv = new Date(a[0], a[1], a[2], a[3]);
      break;
    case 5:
      rv = new Date(a[0], a[1], a[2], a[3], a[4]);
      break;
    case 6:
      rv = new Date(a[0], a[1], a[2], a[3], a[4], a[5]);
      break;
    default:
      rv = new Date(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
  }
  return rv;
};

callArrayConstructor = function(a) {
  if (a.length === 1 && (a[0] | 0) === a[0]) {
    return new Array(a[0]);
  }
  return a.slice();
};

callRegExpConstructor = function(a) {
  if (a.length === 1) {
    return new RegExp(a[0]);
  } else {
    return new RegExp(a[0], a[1]);
  }
};

createNativeInstance = function(constructor, args) {
  var constructorProxy, rv;
  if (constructor === Date) {
    return callDateConstructor(args);
  } else if (constructor === Array) {
    return callArrayConstructor(args);
  } else if (constructor === RegExp) {
    return callRegExpConstructor(args);
  } else if (constructor === Number) {
    return new Number(args[0]);
  } else if (constructor === Boolean) {
    return new Boolean(args[0]);
  } else {
    constructorProxy = function() {
      return constructor.apply(this, args);
    };
    constructorProxy.prototype = constructor.prototype;
    rv = new constructorProxy();
    return rv;
  }
};

module.exports = opcodes;


  return module.exports;
})({exports: $$___src_vm_opcodes}, $$___src_vm_opcodes);var $$___src_vm_script = {};
$$___src_vm_script = (function(module, exports) {

  var Script, instructionsFromJson, instructionsToJson, opcodes, regexpFromString, regexpToString, scriptFromJson, scriptToJson;

opcodes = $$___src_vm_opcodes;

scriptToJson = function(script) {
  var guard, regexp, rv, s, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  rv = [script.filename || 0, script.name || 0, instructionsToJson(script.instructions), [], script.localNames, [], script.stackSize, script.strings, []];
  _ref = script.scripts;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    s = _ref[_i];
    rv[3].push(scriptToJson(s));
  }
  _ref1 = script.guards;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    guard = _ref1[_j];
    rv[5].push([guard.start || -1, guard.handler || -1, guard.finalizer || -1, guard.end || -1]);
  }
  _ref2 = script.regexps;
  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
    regexp = _ref2[_k];
    rv[8].push(regexpToString(regexp));
  }
  rv[9] = script.source || 0;
  return rv;
};

scriptFromJson = function(json) {
  var filename, guard, guards, instructions, localLength, localNames, name, regexp, regexps, s, scripts, source, stackSize, strings, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  filename = json[0] !== 0 ? json[0] : null;
  name = json[1] !== 0 ? json[1] : null;
  instructions = instructionsFromJson(json[2]);
  scripts = [];
  localNames = json[4];
  localLength = localNames.length;
  guards = [];
  stackSize = json[6];
  strings = json[7];
  regexps = [];
  _ref = json[3];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    s = _ref[_i];
    scripts.push(scriptFromJson(s));
  }
  _ref1 = json[5];
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    guard = _ref1[_j];
    guards.push({
      start: guard[0] !== -1 ? guard[0] : null,
      handler: guard[1] !== -1 ? guard[1] : null,
      finalizer: guard[2] !== -1 ? guard[2] : null,
      end: guard[3] !== -1 ? guard[3] : null
    });
  }
  _ref2 = json[8];
  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
    regexp = _ref2[_k];
    regexps.push(regexpFromString(regexp));
  }
  source = json[9] !== 0 ? json[9] : null;
  return new Script(filename, name, instructions, scripts, localNames, localLength, guards, stackSize, strings, regexps, source);
};

instructionsToJson = function(instructions) {
  var a, code, inst, rv, _i, _j, _len, _len1, _ref;
  rv = [];
  for (_i = 0, _len = instructions.length; _i < _len; _i++) {
    inst = instructions[_i];
    code = [inst.id];
    if (inst.args) {
      _ref = inst.args;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        a = _ref[_j];
        if (a != null) {
          code.push(a);
        } else {
          code.push(null);
        }
      }
    }
    rv.push(code);
  }
  return rv;
};

instructionsFromJson = function(instructions) {
  var args, i, inst, klass, opcode, rv, _i, _j, _len, _ref;
  rv = [];
  for (_i = 0, _len = instructions.length; _i < _len; _i++) {
    inst = instructions[_i];
    klass = opcodes[inst[0]];
    args = [];
    for (i = _j = 1, _ref = inst.length; 1 <= _ref ? _j < _ref : _j > _ref; i = 1 <= _ref ? ++_j : --_j) {
      args.push(inst[i]);
    }
    opcode = new klass(args.length ? args : null);
    rv.push(opcode);
  }
  return rv;
};

regexpToString = function(regexp) {
  var rv;
  rv = regexp.source + '/';
  rv += regexp.global ? 'g' : '';
  rv += regexp.ignoreCase ? 'i' : '';
  rv += regexp.multiline ? 'm' : '';
  return rv;
};

regexpFromString = function(str) {
  var flags, sliceIdx, source;
  sliceIdx = str.lastIndexOf('/');
  source = str.slice(0, sliceIdx);
  flags = str.slice(sliceIdx + 1);
  return new RegExp(source, flags);
};

Script = (function() {
  function Script(filename, name, instructions, scripts, localNames, localLength, guards, stackSize, strings, regexps, source) {
    this.filename = filename;
    this.name = name;
    this.instructions = instructions;
    this.scripts = scripts;
    this.localNames = localNames;
    this.localLength = localLength;
    this.guards = guards;
    this.stackSize = stackSize;
    this.strings = strings;
    this.regexps = regexps;
    this.source = source;
  }

  Script.prototype.toJSON = function() {
    return scriptToJson(this);
  };

  Script.fromJSON = scriptFromJson;

  Script.regexpToString = regexpToString;

  return Script;

})();

module.exports = Script;


  return module.exports;
})({exports: $$___src_vm_script}, $$___src_vm_script);var $$___src_vm_emitter = {};
$$___src_vm_emitter = (function(module, exports) {

  var Emitter, FUNCTION, GETG, GETL, Label, POP, SETG, SETL, Script, Visitor, assignOp, binaryOp, hasProp, opcodes, parse, unaryOp,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

parse = require('esprima').parse;

Script = $$___src_vm_script;

opcodes = $$___src_vm_opcodes;

Visitor = $$___src_ast_visitor;

hasProp = $$___src_runtime_util.hasProp;

Emitter = (function(_super) {
  __extends(Emitter, _super);

  function Emitter(scopes, filename, name, original, source) {
    this.filename = filename;
    this.name = name;
    this.original = original;
    this.source = source;
    this.instructions = [];
    this.labels = [];
    this.scripts = [];
    this.tryStatements = [];
    this.withLevel = 0;
    this.scopes = scopes || [];
    if (scopes) {
      this.scriptScope = scopes[0];
    }
    this.localNames = [];
    this.varIndex = 3;
    this.guards = [];
    this.currentLine = -1;
    this.currentColumn = -1;
    this.stringIds = {};
    this.strings = [];
    this.regexpIds = {};
    this.regexps = [];
    this.ignoreNotDefined = 0;
  }

  Emitter.prototype.scope = function(name) {
    var crossFunctionScope, i, scope, _i, _len, _ref;
    i = 0;
    crossFunctionScope = false;
    _ref = this.scopes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      scope = _ref[_i];
      if (hasProp(scope, name)) {
        return [i, scope[name]];
      }
      if (crossFunctionScope || scope === this.scriptScope) {
        crossFunctionScope = true;
        i++;
      }
    }
    return null;
  };

  Emitter.prototype.scopeGet = function(name) {
    var scope;
    if (this.withLevel) {
      this.GETW(name, this.ignoreNotDefined);
      this.ignoreNotDefined = 0;
      return;
    }
    scope = this.scope(name);
    if (scope) {
      this.ignoreNotDefined = 0;
      this.GETL.apply(this, scope);
      return;
    }
    this.GETG(name, this.ignoreNotDefined);
    this.ignoreNotDefined = 0;
  };

  Emitter.prototype.scopeSet = function(name) {
    var scope;
    if (this.withLevel) {
      return this.SETW(name);
    }
    scope = this.scope(name);
    if (scope) {
      return this.SETL.apply(this, scope);
    }
    return this.SETG(name);
  };

  Emitter.prototype.enterScope = function() {
    if (!this.scopes.length) {
      this.ENTER_SCOPE();
    }
    return this.scopes.unshift({});
  };

  Emitter.prototype.exitScope = function() {
    this.scopes.shift();
    if (!this.scopes.length) {
      return this.EXIT_SCOPE();
    }
  };

  Emitter.prototype.addCleanupHook = function(cleanup) {
    var label, tryStatement, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = this.labels;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      label = _ref[_i];
      if (label.name) {
        if (!label.cleanup) {
          label.cleanup = [];
        }
        label.cleanup.push(cleanup);
      }
    }
    _ref1 = this.tryStatements;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      tryStatement = _ref1[_j];
      _results.push(tryStatement.hooks.push(cleanup));
    }
    return _results;
  };

  Emitter.prototype.declareVar = function(name, kind) {
    var scope;
    if (kind === 'const' || kind === 'var') {
      scope = this.scriptScope;
    } else {
      scope = this.scopes[0];
    }
    if (scope && !scope[name]) {
      this.localNames[this.varIndex] = name;
      return scope[name] = this.varIndex++;
    }
  };

  Emitter.prototype.declarePattern = function(node, kind) {
    var el, prop, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _results, _results1;
    if ((_ref = node.type) === 'ArrayPattern' || _ref === 'ArrayExpression') {
      _ref1 = node.elements;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        if (el) {
          _results.push(this.declarePattern(el, kind));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    } else if ((_ref2 = node.type) === 'ObjectPattern' || _ref2 === 'ObjectExpression') {
      _ref3 = node.properties;
      _results1 = [];
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        prop = _ref3[_j];
        _results1.push(this.declarePattern(prop.value, kind));
      }
      return _results1;
    } else if (node.type === 'Identifier') {
      return this.declareVar(node.name, kind);
    } else {
      throw new Error('assertion error');
    }
  };

  Emitter.prototype.newLabel = function() {
    return new Label(this);
  };

  Emitter.prototype.label = function(name) {
    var label, _i, _len, _ref;
    if (!name) {
      return this.labels[this.labels.length - 1];
    }
    _ref = this.labels;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      label = _ref[_i];
      if (label.name === name) {
        return label;
      }
    }
    return null;
  };

  Emitter.prototype.pushLabel = function(name, stmt, brk, cont) {
    return this.labels.push({
      name: name,
      stmt: stmt,
      brk: brk,
      cont: cont
    });
  };

  Emitter.prototype.popLabel = function() {
    return this.labels.pop();
  };

  Emitter.prototype.declareFunction = function(name, index, generator) {
    var code, codes, i, opcode, processedLabels, s, scope, _i, _ref, _results;
    this.declareVar(name);
    scope = this.scope(name);
    if (scope) {
      opcode = new SETL(scope);
    } else {
      opcode = new SETG([name]);
    }
    codes = [new FUNCTION([index, generator]), opcode, new POP()];
    this.instructions = codes.concat(this.instructions);
    processedLabels = {};
    _results = [];
    for (i = _i = 0, _ref = this.instructions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      code = this.instructions[i];
      if (this.scopes.length && code instanceof GETG) {
        if (code.args[0] === name) {
          this.instructions[i] = new GETL(scope);
        }
      }
      if (code instanceof GETL) {
        if (code.args[0] !== 0) {
          s = this.scopes[code.args[0]];
          if (s[name] === code.args[1]) {
            this.instructions[i] = new GETL(scope);
          }
        }
      }
      _results.push(code.forEachLabel(function(l) {
        if (hasProp(processedLabels, l.id)) {
          return l;
        }
        processedLabels[l.id] = null;
        if (l.ip != null) {
          l.ip += 3;
        }
        return l;
      }));
    }
    return _results;
  };

  Emitter.prototype.end = function() {
    var code, current, guard, i, k, localLength, max, _i, _j, _k, _l, _len, _len1, _len2, _len3, _m, _ref, _ref1, _ref2, _ref3, _ref4;
    _ref = this.instructions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      code = _ref[_i];
      code.forEachLabel(function(l) {
        if (l.ip === null) {
          throw new Error('label has not been marked');
        }
        return l.ip;
      });
    }
    _ref1 = this.guards;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      guard = _ref1[_j];
      guard.start = guard.start.ip;
      if (guard.handler) {
        guard.handler = guard.handler.ip;
      }
      if (guard.finalizer) {
        guard.finalizer = guard.finalizer.ip;
      }
      guard.end = guard.end.ip;
    }
    current = max = 2;
    _ref2 = this.instructions;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      code = _ref2[_k];
      current += code.calculateFactor();
      max = Math.max(current, max);
    }
    localLength = 0;
    _ref3 = this.localNames;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      k = _ref3[_l];
      localLength++;
    }
    for (i = _m = 0, _ref4 = this.scripts.length; 0 <= _ref4 ? _m < _ref4 : _m > _ref4; i = 0 <= _ref4 ? ++_m : --_m) {
      this.scripts[i] = this.scripts[i]();
    }
    return new Script(this.filename, this.name, this.instructions, this.scripts, this.localNames, localLength, this.guards, max, this.strings, this.regexps, this.source);
  };

  Emitter.prototype.visit = function(node) {
    var column, idx, line, _ref;
    if (node == null) {
      return;
    }
    if (node.loc) {
      _ref = node.loc.start, line = _ref.line, column = _ref.column;
      if (line !== this.currentLine) {
        idx = this.instructions.length - 1;
        while (this.instructions[idx] instanceof opcodes.LINE || this.instructions[idx] instanceof opcodes.COLUMN) {
          this.instructions.pop();
          idx--;
        }
        this.LINE(line);
        this.currentLine = line;
      } else if (column !== this.currentColumn) {
        idx = this.instructions.length - 1;
        while (this.instructions[idx] instanceof opcodes.COLUMN) {
          this.instructions.pop();
          idx--;
        }
        this.COLUMN(column);
        this.currentColumn = column;
      }
    }
    return Emitter.__super__.visit.call(this, node);
  };

  Emitter.prototype.BlockStatement = function(node) {
    this.enterScope();
    if (node.blockInit) {
      node.blockInit();
    }
    this.visit(node.body);
    if (node.blockCleanup) {
      node.blockCleanup();
    }
    this.exitScope();
    return node;
  };

  Emitter.prototype.VmLoop = function(node, emitInit, emitBeforeTest, emitUpdate, emitAfterTest) {
    var blockCleanup, blockInit, brk, cont, currentLabel, start,
      _this = this;
    blockInit = function() {
      if (emitInit) {
        emitInit(brk);
      }
      if (emitUpdate) {
        start.mark();
      } else {
        cont.mark();
      }
      if (emitBeforeTest) {
        emitBeforeTest();
        return _this.JMPF(brk);
      }
    };
    blockCleanup = function() {
      if (emitUpdate) {
        cont.mark();
        emitUpdate(brk);
        _this.POP();
        _this.JMP(start);
      }
      if (emitAfterTest) {
        emitAfterTest();
        _this.JMPF(brk);
      }
      return _this.JMP(cont);
    };
    currentLabel = this.label();
    start = this.newLabel();
    cont = this.newLabel();
    brk = this.newLabel();
    if ((currentLabel != null ? currentLabel.stmt : void 0) === node) {
      currentLabel.cont = cont;
    }
    this.pushLabel(null, node, brk, cont);
    if (node.body.type === 'BlockStatement') {
      node.body.blockInit = blockInit;
      node.body.blockCleanup = blockCleanup;
      this.visit(node.body);
    } else {
      this.enterScope();
      blockInit();
      this.visit(node.body);
      blockCleanup();
      this.exitScope();
    }
    brk.mark();
    this.popLabel();
    return node;
  };

  Emitter.prototype.VmIteratorLoop = function(node, pushIterator) {
    var assignNext, assignTarget, emitInit, emitUpdate, labelCleanup,
      _this = this;
    labelCleanup = function(label, isBreak) {
      if (!label || label.stmt !== node || isBreak) {
        return _this.POP();
      }
    };
    emitInit = function(brk) {
      if (node.left.type === 'VariableDeclaration') {
        _this.visit(node.left);
      }
      _this.visit(node.right);
      pushIterator();
      emitUpdate(brk);
      return _this.POP();
    };
    emitUpdate = function(brk) {
      _this.DUP();
      _this.NEXT(brk);
      return _this.visit(assignNext());
    };
    assignNext = function() {
      return {
        loc: node.left.loc,
        type: 'AssignmentExpression',
        operator: '=',
        left: assignTarget
      };
    };
    this.addCleanupHook(labelCleanup);
    assignTarget = node.left;
    if (assignTarget.type === 'VariableDeclaration') {
      assignTarget = node.left.declarations[0].id;
    }
    this.VmLoop(node, emitInit, null, emitUpdate);
    this.POP();
    return node;
  };

  Emitter.prototype.WhileStatement = function(node) {
    var emitBeforeTest,
      _this = this;
    emitBeforeTest = function() {
      return _this.visit(node.test);
    };
    this.VmLoop(node, null, emitBeforeTest);
    return node;
  };

  Emitter.prototype.DoWhileStatement = function(node) {
    var emitAfterTest,
      _this = this;
    emitAfterTest = function() {
      return _this.visit(node.test);
    };
    this.VmLoop(node, null, null, null, emitAfterTest);
    return node;
  };

  Emitter.prototype.ForStatement = function(node) {
    var emitBeforeTest, emitInit, emitUpdate,
      _this = this;
    emitInit = function() {
      _this.visit(node.init);
      if (node.init.type !== 'VariableDeclaration') {
        return _this.POP();
      }
    };
    emitBeforeTest = function() {
      return _this.visit(node.test);
    };
    emitUpdate = function() {
      return _this.visit(node.update);
    };
    this.VmLoop(node, emitInit, emitBeforeTest, emitUpdate);
    return node;
  };

  Emitter.prototype.ForInStatement = function(node) {
    var pushIterator,
      _this = this;
    pushIterator = function() {
      return _this.ENUMERATE();
    };
    this.VmIteratorLoop(node, pushIterator);
    return node;
  };

  Emitter.prototype.ForOfStatement = function(node) {
    var pushIterator,
      _this = this;
    pushIterator = function() {
      return _this.ITER();
    };
    this.VmIteratorLoop(node, pushIterator);
    return node;
  };

  Emitter.prototype.ExpressionStatement = function(node) {
    Emitter.__super__.ExpressionStatement.call(this, node);
    this.SREXP();
    return node;
  };

  Emitter.prototype.IfStatement = function(node) {
    var end, ifTrue;
    ifTrue = this.newLabel();
    end = this.newLabel();
    this.visit(node.test);
    this.JMPT(ifTrue);
    this.visit(node.alternate);
    this.JMP(end);
    ifTrue.mark();
    this.visit(node.consequent);
    end.mark();
    return node;
  };

  Emitter.prototype.LabeledStatement = function(node) {
    var brk;
    brk = this.newLabel();
    this.pushLabel(node.label.name, node.body, brk);
    this.visit(node.body);
    brk.mark();
    this.popLabel();
    return node;
  };

  Emitter.prototype.BreakStatement = function(node) {
    var cleanup, label, _i, _len, _ref;
    if (node.label) {
      label = this.label(node.label.name);
      if (label.cleanup) {
        _ref = label.cleanup;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cleanup = _ref[_i];
          cleanup(label, true);
        }
      }
    } else {
      label = this.label();
    }
    this.JMP(label.brk);
    return node;
  };

  Emitter.prototype.ContinueStatement = function(node) {
    var cleanup, label, _i, _len, _ref;
    if (node.label) {
      label = this.label(node.label.name);
      if (label.cleanup) {
        _ref = label.cleanup;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cleanup = _ref[_i];
          cleanup(label, false);
        }
      }
    } else {
      label = this.label();
    }
    this.JMP(label.cont);
    return node;
  };

  Emitter.prototype.WithStatement = function(node) {
    this.visit(node.object);
    this.ENTER_WITH();
    this.withLevel++;
    this.visit(node.body);
    this.withLevel--;
    this.EXIT_SCOPE();
    return node;
  };

  Emitter.prototype.SwitchStatement = function(node) {
    var brk, clause, nextBlock, nextTest, _i, _len, _ref,
      _this = this;
    brk = this.newLabel();
    this.pushLabel(null, node, brk);
    this.addCleanupHook((function() {
      _this.POP();
      return _this.exitScope();
    }));
    this.enterScope();
    this.visit(node.discriminant);
    nextBlock = this.newLabel();
    _ref = node.cases;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      clause = _ref[_i];
      nextTest = this.newLabel();
      if (clause.test) {
        this.DUP();
        this.visit(clause.test);
        this.CID();
        this.JMPF(nextTest);
        this.JMP(nextBlock);
      }
      if (clause.consequent.length) {
        nextBlock.mark();
        this.visit(clause.consequent);
        nextBlock = this.newLabel();
        this.JMP(nextBlock);
      }
      nextTest.mark();
    }
    nextBlock.mark();
    this.popLabel();
    brk.mark();
    this.POP();
    this.exitScope();
    return node;
  };

  Emitter.prototype.ReturnStatement = function(node) {
    if (node.argument) {
      this.visit(node.argument);
      this.RETV();
    } else {
      this.RET();
    }
    return node;
  };

  Emitter.prototype.ThrowStatement = function(node) {
    Emitter.__super__.ThrowStatement.call(this, node);
    this.THROW();
    return node;
  };

  Emitter.prototype.TryStatement = function(node) {
    var end, finalizer, guard, guardId, handler, hook, start, _i, _len, _ref,
      _this = this;
    if (node.handlers.length > 1) {
      throw new Error('assert error');
    }
    this.tryStatements.push({
      hooks: []
    });
    start = this.newLabel();
    handler = this.newLabel();
    finalizer = this.newLabel();
    end = this.newLabel();
    guard = {
      start: start,
      handler: node.handlers.length ? handler : null,
      finalizer: node.finalizer ? finalizer : null,
      end: end
    };
    this.guards.push(guard);
    guardId = this.guards.length - 1;
    this.ENTER_GUARD(guardId);
    start.mark();
    this.visit(node.block);
    this.JMP(finalizer);
    handler.mark();
    if (node.handlers.length) {
      node.handlers[0].body.blockInit = function() {
        var assign, hook, param, _i, _len, _ref, _results;
        param = node.handlers[0].param;
        _this.declarePattern(param);
        assign = {
          type: 'ExpressionStatement',
          expression: {
            loc: param.loc,
            type: 'AssignmentExpression',
            operator: '=',
            left: param
          }
        };
        _this.visit(assign);
        _ref = _this.tryStatements[_this.tryStatements.length - 1].hooks;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hook = _ref[_i];
          _results.push(hook());
        }
        return _results;
      };
      this.visit(node.handlers[0].body);
    }
    finalizer.mark();
    if (node.finalizer) {
      this.visit(node.finalizer);
      if (!node.handlers.length) {
        _ref = this.tryStatements[this.tryStatements.length - 1].hooks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          hook = _ref[_i];
          hook();
        }
        this.EXIT_GUARD(guardId);
        this.PAUSE();
      }
    }
    end.mark();
    this.EXIT_GUARD(guardId);
    this.tryStatements.pop();
    return node;
  };

  Emitter.prototype.DebuggerStatement = function(node) {
    this.DEBUG();
    return node;
  };

  Emitter.prototype.VariableDeclaration = function(node) {
    var decl, _i, _len, _ref;
    _ref = node.declarations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      decl = _ref[_i];
      decl.kind = node.kind;
    }
    this.visit(node.declarations);
    return node;
  };

  Emitter.prototype.VariableDeclarator = function(node) {
    var assign;
    this.declarePattern(node.id, node.kind);
    if (node.init) {
      assign = {
        type: 'ExpressionStatement',
        expression: {
          loc: node.loc,
          type: 'AssignmentExpression',
          operator: '=',
          left: node.id,
          right: node.init
        }
      };
      this.visit(assign);
    }
    return node;
  };

  Emitter.prototype.ThisExpression = function(node) {
    if (this.scopes.length) {
      this.scopeGet('this');
    } else {
      this.GLOBAL();
    }
    return node;
  };

  Emitter.prototype.ArrayExpression = function(node) {
    Emitter.__super__.ArrayExpression.call(this, node);
    this.ARRAY_LITERAL(node.elements.length);
    return node;
  };

  Emitter.prototype.ObjectExpression = function(node) {
    var property, _i, _len, _ref;
    _ref = node.properties;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      property = _ref[_i];
      if (property.kind === 'init') {
        this.visit(property.value);
        if (property.key.type === 'Literal') {
          this.visit(property.key);
        } else {
          this.visit({
            type: 'Literal',
            value: property.key.name
          });
        }
      } else {
        throw new Error("property kind '" + property.kind + "' not implemented");
      }
    }
    this.OBJECT_LITERAL(node.properties.length);
    return node;
  };

  Emitter.prototype.VmFunction = function(node) {
    var ecol, eline, emit, functionIndex, name, scol, sline, source, _ref, _ref1, _ref2,
      _this = this;
    _ref = node.loc, (_ref1 = _ref.start, sline = _ref1.line, scol = _ref1.column), (_ref2 = _ref.end, eline = _ref2.line, ecol = _ref2.column);
    source = this.original.slice(sline - 1, eline);
    source[0] = source[0].slice(scol);
    source[source.length - 1] = source[source.length - 1].slice(0, ecol);
    source = source.join('\n');
    name = '<anonymous>';
    if (node.id) {
      name = node.id.name;
    }
    emit = function() {
      var declaration, declarator, def, fn, i, initialScope, len, param, scope, _i;
      initialScope = {
        "this": 0,
        "arguments": 1
      };
      if (node.id) {
        initialScope[name] = 2;
      }
      if (node.lexicalThis) {
        delete initialScope["this"];
      }
      fn = new Emitter([initialScope].concat(_this.scopes), _this.filename, name, _this.original, source);
      fn.FUNCTION_SETUP(node.id != null);
      len = node.params.length;
      if (node.rest) {
        fn.declareVar(node.rest.name);
        scope = fn.scope(node.rest.name);
        fn.REST(len, scope[1]);
      }
      for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
        param = node.params[i];
        def = node.defaults[i];
        declaration = parse("var placeholder = arguments[" + i + "] || 0;").body[0];
        declarator = declaration.declarations[0];
        declarator.id = param;
        if (def) {
          declarator.init.right = def;
        } else {
          declarator.init = declarator.init.left;
        }
        fn.visit(declaration);
      }
      if (node.expression) {
        fn.visit(node.body);
        fn.RETV();
      } else {
        fn.visit(node.body.body);
      }
      return fn.end();
    };
    functionIndex = this.scripts.length;
    this.scripts.push(emit);
    if (node.isExpression) {
      this.FUNCTION(functionIndex, node.generator);
    }
    if (node.declare) {
      this.declareFunction(node.declare, functionIndex, node.generator);
    }
    return node;
  };

  Emitter.prototype.FunctionDeclaration = function(node) {
    node.isExpression = false;
    node.declare = node.id.name;
    this.VmFunction(node);
    return node;
  };

  Emitter.prototype.FunctionExpression = function(node) {
    node.isExpression = true;
    node.declare = false;
    this.VmFunction(node);
    return node;
  };

  Emitter.prototype.ArrowFunctionExpression = function(node) {
    node.isExpression = true;
    node.declare = false;
    node.lexicalThis = true;
    this.VmFunction(node);
    return node;
  };

  Emitter.prototype.SequenceExpression = function(node) {
    var i, _i, _ref;
    for (i = _i = 0, _ref = node.expressions.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.visit(node.expressions[i]);
      this.POP();
    }
    this.visit(node.expressions[i]);
    return node;
  };

  Emitter.prototype.UnaryExpression = function(node) {
    if (node.operator === 'delete') {
      if (node.argument.type === 'MemberExpression') {
        this.visitProperty(node.argument);
        this.visit(node.argument.object);
        this.DEL();
      } else if (node.argument.type === 'Identifier' && !this.scopes.length) {
        this.LITERAL(node.argument.name);
        this.GLOBAL();
        this.DEL();
      } else {
        this.LITERAL(false);
      }
    } else {
      if (node.operator === 'typeof' && node.argument.type === 'Identifier') {
        this.ignoreNotDefined = 1;
      }
      Emitter.__super__.UnaryExpression.call(this, node);
      this[unaryOp[node.operator]]();
    }
    return node;
  };

  Emitter.prototype.BinaryExpression = function(node) {
    Emitter.__super__.BinaryExpression.call(this, node);
    this[binaryOp[node.operator]]();
    return node;
  };

  Emitter.prototype.LogicalExpression = function(node) {
    var evalEnd;
    evalEnd = this.newLabel();
    this.visit(node.left);
    this.DUP();
    if (node.operator === '||') {
      this.JMPT(evalEnd);
    } else {
      this.JMPF(evalEnd);
    }
    this.POP();
    this.visit(node.right);
    evalEnd.mark();
    return node;
  };

  Emitter.prototype.ConditionalExpression = function(node) {
    this.IfStatement(node);
    return node;
  };

  Emitter.prototype.NewExpression = function(node) {
    this.visit(node["arguments"]);
    this.visit(node.callee);
    this.NEW(node["arguments"].length);
    return node;
  };

  Emitter.prototype.CallExpression = function(node) {
    var fname, len;
    len = node["arguments"].length;
    this.visit(node["arguments"]);
    if (node.callee.type === 'MemberExpression') {
      this.visit(node.callee.object);
      this.SR1();
      this.LR1();
      this.visitProperty(node.callee);
      if (node.callee.property.type === 'Identifier') {
        fname = node.callee.property.name;
      }
      this.CALLM(len, fname);
    } else {
      this.visit(node.callee);
      if (node.callee.type === 'Identifier') {
        fname = node.callee.name;
      }
      this.CALL(len, fname);
    }
    return node;
  };

  Emitter.prototype.visitProperty = function(memberExpression) {
    if (memberExpression.computed) {
      return this.visit(memberExpression.property);
    } else if (memberExpression.property.type === 'Identifier') {
      return this.LITERAL(memberExpression.property.name);
    } else if (memberExpression.property.type === 'Literal') {
      return this.LITERAL(memberExpression.property.value);
    } else {
      throw new Error('invalid assert');
    }
  };

  Emitter.prototype.MemberExpression = function(node) {
    this.visitProperty(node);
    this.visit(node.object);
    this.GET();
    return node;
  };

  Emitter.prototype.AssignmentExpression = function(node) {
    var childAssignment, element, index, property, source, target, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
    if (node.right) {
      if (node.right.type === 'MemberExpression' && !node.right.object) {
        this.visitProperty(node.right);
        this.SWAP();
        this.GET();
      } else {
        this.visit(node.right);
      }
    }
    if ((_ref = node.left.type) === 'ArrayPattern' || _ref === 'ArrayExpression' || _ref === 'ObjectPattern' || _ref === 'ObjectExpression') {
      if ((_ref1 = node.left.type) === 'ArrayPattern' || _ref1 === 'ArrayExpression') {
        index = 0;
        _ref2 = node.left.elements;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          element = _ref2[_i];
          if (element) {
            this.DUP();
            childAssignment = {
              operator: node.operator,
              type: 'AssignmentExpression',
              left: element,
              right: {
                type: 'MemberExpression',
                property: {
                  type: 'Literal',
                  value: index
                }
              }
            };
            this.visit(childAssignment);
            this.POP();
          }
          index++;
        }
      } else {
        _ref3 = node.left.properties;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          property = _ref3[_j];
          this.DUP();
          source = property.key;
          target = property.value;
          childAssignment = {
            operator: node.operator,
            type: 'AssignmentExpression',
            left: target,
            right: {
              type: 'MemberExpression',
              computed: true,
              property: {
                type: 'Literal',
                value: source.name
              }
            }
          };
          this.visit(childAssignment);
          this.POP();
        }
      }
      return;
    }
    if (node.left.type === 'MemberExpression') {
      this.visitProperty(node.left);
      this.visit(node.left.object);
      this.SR2();
      this.SR1();
      if (node.operator !== '=') {
        this.LR1();
        this.LR2();
        this.GET();
        this[binaryOp[node.operator.slice(0, node.operator.length - 1)]]();
        this.LR1();
        this.LR2();
        this.SET();
      } else {
        this.LR1();
        this.LR2();
        this.SET();
      }
    } else {
      if (node.operator !== '=') {
        this.scopeGet(node.left.name);
        this.SWAP();
        this[binaryOp[node.operator.slice(0, node.operator.length - 1)]]();
      }
      this.scopeSet(node.left.name);
    }
    return node;
  };

  Emitter.prototype.UpdateExpression = function(node) {
    if (node.argument.type === 'MemberExpression') {
      this.visitProperty(node.argument);
      this.visit(node.argument.object);
      this.SR2();
      this.SR1();
      this.LR1();
      this.LR2();
      this.GET();
      this.SR3();
      this.LR3();
      if (node.operator === '++') {
        this.INC();
      } else {
        this.DEC();
      }
      this.LR1();
      this.LR2();
      this.SET();
    } else {
      this.scopeGet(node.argument.name);
      this.SR3();
      this.LR3();
      if (node.operator === '++') {
        this.INC();
      } else {
        this.DEC();
      }
      this.scopeSet(node.argument.name);
    }
    if (!node.prefix) {
      this.POP();
      this.LR3();
    }
    return node;
  };

  Emitter.prototype.Identifier = function(node) {
    this.scopeGet(node.name);
    return node;
  };

  Emitter.prototype.Literal = function(node) {
    var id, idx, val;
    val = node.value;
    if (typeof val === 'undefined') {
      this.UNDEF();
    } else if (typeof val === 'string') {
      if (!hasProp(this.stringIds, val)) {
        this.strings.push(val);
        idx = this.strings.length - 1;
        this.stringIds[val] = idx;
      }
      idx = this.stringIds[val];
      this.STRING_LITERAL(idx);
    } else if (val instanceof RegExp) {
      id = Script.regexpToString(val);
      if (!hasProp(this.regexpIds, id)) {
        this.regexps.push(val);
        idx = this.regexps.length - 1;
        this.regexpIds[id] = idx;
      }
      idx = this.regexpIds[id];
      this.REGEXP_LITERAL(idx);
    } else {
      this.LITERAL(val);
    }
    return node;
  };

  Emitter.prototype.YieldExpression = function(node) {
    this.visit(node.argument);
    this.YIELD();
    return node;
  };

  Emitter.prototype.ComprehensionExpression = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ComprehensionBlock = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ClassExpression = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ClassBody = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ClassDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ClassHeritage = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ExportBatchSpecifier = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ExportSpecifier = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ExportDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ImportSpecifier = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ImportDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.MethodDefinition = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.Property = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.ModuleDeclaration = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.SpreadElement = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.TemplateElement = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.TaggedTemplateExpression = function(node) {
    throw new Error('not implemented');
  };

  Emitter.prototype.TemplateLiteral = function(node) {
    throw new Error('not implemented');
  };

  return Emitter;

})(Visitor);

(function() {
  var opcode, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = opcodes.length; _i < _len; _i++) {
    opcode = opcodes[_i];
    _results.push((function(opcode) {
      opcodes[opcode.prototype.name] = opcode;
      opcode.prototype.forEachLabel = function(cb) {
        var i, _j, _ref, _results1;
        if (this.args) {
          _results1 = [];
          for (i = _j = 0, _ref = this.args.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
            if (this.args[i] instanceof Label) {
              _results1.push(this.args[i] = cb(this.args[i]));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }
      };
      return Emitter.prototype[opcode.prototype.name] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (!args.length) {
          args = null;
        }
        this.instructions.push(new opcode(args));
      };
    })(opcode));
  }
  return _results;
})();

Label = (function() {
  Label.id = 1;

  function Label(emitter) {
    this.emitter = emitter;
    this.id = Label.id++;
    this.ip = null;
  }

  Label.prototype.mark = function() {
    return this.ip = this.emitter.instructions.length;
  };

  return Label;

})();

GETL = opcodes.GETL, SETL = opcodes.SETL, GETG = opcodes.GETG, SETG = opcodes.SETG, FUNCTION = opcodes.FUNCTION, POP = opcodes.POP;

unaryOp = {
  '-': 'INV',
  '!': 'LNOT',
  '~': 'NOT',
  'typeof': 'TYPEOF',
  'void': 'VOID'
};

binaryOp = {
  '==': 'CEQ',
  '!=': 'CNEQ',
  '===': 'CID',
  '!==': 'CNID',
  '<': 'LT',
  '<=': 'LTE',
  '>': 'GT',
  '>=': 'GTE',
  '<<': 'SHL',
  '>>': 'SAR',
  '>>>': 'SHR',
  '+': 'ADD',
  '-': 'SUB',
  '*': 'MUL',
  '/': 'DIV',
  '%': 'MOD',
  '|': 'OR',
  '&': 'AND',
  '^': 'XOR',
  'in': 'IN',
  'instanceof': 'INSTANCEOF'
};

assignOp = {
  '+=': 'ADD',
  '-=': 'SUB',
  '*=': 'MUL',
  '/=': 'DIV',
  '%=': 'MOD',
  '<<=': 'SHL',
  '>>=': 'SAR',
  '>>>=': 'SHR',
  '|=': 'OR',
  '&=': 'AND',
  '^=': 'XOR'
};

module.exports = Emitter;


  return module.exports;
})({exports: $$___src_vm_emitter}, $$___src_vm_emitter);var $$___src_ast_constant_folder = {};
$$___src_ast_constant_folder = (function(module, exports) {

  var ConstantFolder, Visitor, hasProp, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Visitor = $$___src_ast_visitor;

hasProp = $$___src_runtime_util.hasProp;

ConstantFolder = (function(_super) {
  __extends(ConstantFolder, _super);

  function ConstantFolder() {
    _ref = ConstantFolder.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ConstantFolder.prototype.UnaryExpression = function(node) {
    var result;
    node = ConstantFolder.__super__.UnaryExpression.call(this, node);
    if (node.operator === '+') {
      return node.argument;
    }
    if (node.argument.type === 'Literal' && !(node.argument.value instanceof RegExp)) {
      if (!hasProp(node, 'prefix') || node.prefix) {
        result = eval("" + node.operator + "(" + node.argument.raw + ")");
      } else {
        result = eval("(" + node.argument.raw + ")" + node.operator);
      }
      return {
        type: 'Literal',
        value: result,
        loc: node.loc
      };
    }
    return node;
  };

  ConstantFolder.prototype.BinaryExpression = function(node) {
    var result;
    node = ConstantFolder.__super__.BinaryExpression.call(this, node);
    if (node.left.type === 'Literal' && node.right.type === 'Literal' && !(node.right.value instanceof RegExp) && !(node.left.value instanceof RegExp)) {
      result = eval("(" + node.left.raw + " " + node.operator + " " + node.right.raw + ")");
      return {
        type: 'Literal',
        value: result,
        loc: node.left.loc
      };
    }
    return node;
  };

  return ConstantFolder;

})(Visitor);

module.exports = ConstantFolder;


  return module.exports;
})({exports: $$___src_ast_constant_folder}, $$___src_ast_constant_folder);var $$___src_runtime_realm = {};
$$___src_runtime_realm = (function(module, exports) {

  var ArrayIterator, CowObjectMetadata, ObjectMetadata, Realm, RegExpProxy, RestrictedObjectMetadata, StopIteration, VmError, VmEvalError, VmRangeError, VmReferenceError, VmSyntaxError, VmTypeError, VmURIError, create, defProp, hasProp, isArray, prototypeOf, runtimeProperties, _ref, _ref1, _ref2, _ref3,
  __hasProp = {}.hasOwnProperty;

_ref = $$___src_runtime_errors, VmError = _ref.VmError, VmEvalError = _ref.VmEvalError, VmRangeError = _ref.VmRangeError, VmReferenceError = _ref.VmReferenceError, VmSyntaxError = _ref.VmSyntaxError, VmTypeError = _ref.VmTypeError, VmURIError = _ref.VmURIError;

_ref1 = $$___src_runtime_metadata, ObjectMetadata = _ref1.ObjectMetadata, CowObjectMetadata = _ref1.CowObjectMetadata, RestrictedObjectMetadata = _ref1.RestrictedObjectMetadata;

_ref2 = $$___src_runtime_util, defProp = _ref2.defProp, isArray = _ref2.isArray, prototypeOf = _ref2.prototypeOf, create = _ref2.create, hasProp = _ref2.hasProp;

RegExpProxy = $$___src_runtime_regexp_proxy;

_ref3 = $$___src_runtime_builtin, ArrayIterator = _ref3.ArrayIterator, StopIteration = _ref3.StopIteration;

runtimeProperties = {
  '__mdid__': null,
  '__md__': null,
  '__vmfunction__': null,
  '__fiber__': null,
  '__callname__': null,
  '__construct__': null,
  '__source__': null,
  '__name__': null
};

Realm = (function() {
  function Realm(merge) {
    var currentId, defineProperty, getOwnPropertyDescriptor, getPrototypeOf, global, hasOwnProperty, k, nativeMetadata, register, v,
      _this = this;
    global = {
      undefined: void 0,
      Object: Object,
      Function: Function,
      Number: Number,
      Boolean: Boolean,
      String: String,
      Array: Array,
      Date: Date,
      RegExp: RegExp,
      Error: VmError,
      EvalError: VmEvalError,
      RangeError: VmRangeError,
      ReferenceError: VmReferenceError,
      SyntaxError: VmSyntaxError,
      TypeError: VmTypeError,
      URIError: VmURIError,
      StopIteration: StopIteration,
      Math: Math,
      JSON: JSON,
      parseInt: parseInt,
      parseFloat: parseFloat
    };
    global.global = global;
    nativeMetadata = {};
    currentId = 0;
    hasOwnProperty = function(obj, key) {
      var md, mdid, objType, type;
      type = typeof obj;
      objType = type === 'object' || type === 'function';
      if (hasProp(runtimeProperties, key)) {
        if (objType) {
          if (hasProp(obj, '__mdid__')) {
            md = nativeMetadata[obj.__mdid__];
          } else if (hasProp(obj, '__md__')) {
            md = obj.__md__;
          }
          if (md) {
            return md.hasDefProperty(key);
          }
        }
        return false;
      }
      mdid = obj.__mdid__;
      md = nativeMetadata[obj.__mdid__];
      if (md && md.object === obj || !objType) {
        return md.hasOwnProperty(key, obj);
      }
      if (hasProp(obj, '__md__')) {
        return obj.__md__.hasOwnProperty(key);
      }
      return hasProp(obj, key);
    };
    register = function(obj, restrict) {
      var k, type, _i, _len;
      if (!hasProp(obj, '__mdid__')) {
        defProp(obj, '__mdid__', {
          value: currentId + 1,
          writable: true
        });
      }
      currentId = Math.max(obj.__mdid__, currentId);
      if (hasProp(nativeMetadata, obj.__mdid__)) {
        return;
      }
      type = typeof restrict;
      if (type === 'boolean' && type) {
        return nativeMetadata[obj.__mdid__] = new CowObjectMetadata(obj, _this);
      }
      if (type === 'object') {
        nativeMetadata[obj.__mdid__] = new RestrictedObjectMetadata(obj, _this);
        if (isArray(restrict)) {
          for (_i = 0, _len = restrict.length; _i < _len; _i++) {
            k = restrict[_i];
            if (hasProp(obj, k)) {
              nativeMetadata[obj.__mdid__].leak[k] = null;
              register(obj[k], true);
            }
          }
        } else {
          for (k in restrict) {
            if (!__hasProp.call(restrict, k)) continue;
            if (hasProp(obj, k)) {
              nativeMetadata[obj.__mdid__].leak[k] = null;
              register(obj[k], restrict[k]);
            }
          }
        }
        return;
      }
      return nativeMetadata[obj.__mdid__] = new ObjectMetadata(obj);
    };
    getPrototypeOf = function(obj) {
      var proto;
      if (hasProp(obj, '__mdid__')) {
        proto = nativeMetadata[obj.__mdid__].proto;
      } else if (hasProp(obj, '__md__')) {
        proto = obj.__md__.proto;
      }
      if (proto) {
        return proto;
      }
      return prototypeOf(obj);
    };
    getOwnPropertyDescriptor = function(obj, key) {};
    defineProperty = function(obj, key, descriptor) {
      var objType, type;
      type = typeof obj;
      objType = type === 'object' || type === 'function';
      if (objType) {
        if (hasProp(obj, '__mdid__')) {
          nativeMetadata[obj.__mdid__].defineProperty(key, descriptor);
        } else {
          if (!hasProp(runtimeProperties, key) && hasProp(descriptor, 'value') && hasProp(descriptor, 'writable') && descriptor.writable && hasProp(descriptor, 'enumerable') && descriptor.enumerable && hasProp(descriptor, 'configurable') && descriptor.configurable) {
            obj[key] = descriptor.value;
          } else {
            if (!hasProp(obj, '__md__')) {
              defProp(obj, '__md__', {
                value: new ObjectMetadata(obj, _this),
                writable: true
              });
            }
            obj.__md__.defineProperty(key, descriptor);
          }
        }
      }
      return void 0;
    };
    register(Object, {
      'prototype': ['constructor', 'toString']
    });
    register(Function, {
      'prototype': ['constructor', 'apply', 'call', 'toString']
    });
    register(Number, {
      'isNaN': true,
      'isFinite': true,
      'prototype': ['constructor', 'toExponential', 'toFixed', 'toLocaleString', 'toPrecision', 'toString', 'valueOf']
    });
    register(Boolean, {
      'prototype': ['constructor', 'toString', 'valueOf']
    });
    register(String, {
      'fromCharCode': true,
      'prototype': ['constructor', 'charAt', 'charCodeAt', 'concat', 'contains', 'indexOf', 'lastIndexOf', 'replace', 'search', 'slice', 'split', 'substr', 'substring', 'toLowerCase', 'toString', 'toUpperCase', 'valueOf']
    });
    register(Array, {
      'isArray': true,
      'every': true,
      'prototype': ['constructor', 'join', 'reverse', 'sort', 'push', 'pop', 'shift', 'unshift', 'splice', 'concat', 'slice', 'indexOf', 'lastIndexOf', 'forEach', 'map', 'reduce', 'reduceRight', 'filter', 'some', 'every']
    });
    register(Date, {
      'now': true,
      'parse': true,
      'UTC': true,
      'prototype': ['constructor', 'getDate', 'getDay', 'getFullYear', 'getHours', 'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds', 'getTime', 'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear', 'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCSeconds', 'setDate', 'setFullYear', 'setHours', 'setMilliseconds', 'setMinutes', 'setMonth', 'setSeconds', 'setUTCDate', 'setUTCDay', 'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes', 'setUTCSeconds', 'toDateString', 'toISOString', 'toJSON', 'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString', 'toString', 'toTimeString', 'toUTCString', 'valueOf']
    });
    register(RegExp, {
      'prototype': ['constructor', 'exec', 'test', 'toString']
    });
    register(Math, ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'imul', 'log', 'max', 'min', 'pow', 'random', 'round', 'sin', 'sqrt', 'tan']);
    register(JSON, ['parse', 'stringify']);
    register(parseFloat, true);
    register(parseInt, true);
    register(ArrayIterator, ['prototype']);
    register(RegExpProxy, ['prototype']);
    nativeMetadata[Object.__mdid__].properties = {
      create: create,
      getPrototypeOf: getPrototypeOf,
      defineProperty: defineProperty
    };
    nativeMetadata[Object.prototype.__mdid__].properties = {
      hasOwnProperty: function(key) {
        return hasOwnProperty(this, key);
      }
    };
    nativeMetadata[Function.prototype.__mdid__].properties = {
      toString: function() {
        if (this.__vmfunction__) {
          return this.__source__;
        }
        return this.toString();
      }
    };
    nativeMetadata[Array.prototype.__mdid__].properties = {
      iterator: function() {
        return new ArrayIterator(this);
      }
    };
    nativeMetadata[String.prototype.__mdid__].properties = {
      match: function(obj) {
        if (obj instanceof RegExpProxy) {
          return this.match(obj.regexp);
        }
        return this.match(obj);
      },
      replace: function(obj) {
        var args;
        args = Array.prototype.slice.call(arguments);
        if (obj instanceof RegExpProxy) {
          args[0] = obj.regexp;
        }
        return this.replace.apply(this, args);
      }
    };
    nativeMetadata[RegExp.prototype.__mdid__].properties = {
      exec: function(str) {
        var rv;
        if (this instanceof RegExpProxy) {
          this.regexp.lastIndex = this.lastIndex;
          rv = this.regexp.exec(str);
          this.lastIndex = this.regexp.lastIndex;
          return rv;
        }
        return this.exec(str);
      },
      test: function(str) {
        var rv;
        if (this instanceof RegExpProxy) {
          this.regexp.lastIndex = this.lastIndex;
          rv = this.regexp.test(str);
          this.lastIndex = this.regexp.lastIndex;
          return rv;
        }
        return this.test(str);
      },
      toString: function() {
        if (this instanceof RegExpProxy) {
          return this.regexp.toString();
        }
        return this.toString();
      }
    };
    this.mdproto = function(obj) {
      var proto;
      proto = prototypeOf(obj);
      if (proto) {
        return nativeMetadata[proto.__mdid__];
      }
    };
    this.has = function(obj, key) {
      var md, mdid, objType, type;
      if (obj == null) {
        return false;
      }
      type = typeof obj;
      objType = type === 'object' || type === 'function';
      if (hasProp(runtimeProperties, key)) {
        if (objType) {
          if (hasProp(obj, '__mdid__')) {
            md = nativeMetadata[obj.__mdid__];
          } else if (hasProp(obj, '__md__')) {
            md = obj.__md__;
          }
          if (md) {
            return md.hasDefProperty(key);
          }
          return this.has(prototypeOf(obj), key);
        }
        return false;
      }
      mdid = obj.__mdid__;
      md = nativeMetadata[obj.__mdid__];
      if (md && md.object === obj || !objType) {
        return md.has(key, obj);
      }
      if (hasProp(obj, '__md__')) {
        return obj.__md__.has(key);
      }
      if (hasProp(obj, key)) {
        return true;
      }
      return this.has(prototypeOf(obj), key);
    };
    this.get = function(obj, key) {
      var md, mdid, objType, type;
      if (obj == null) {
        return void 0;
      }
      type = typeof obj;
      objType = type === 'object' || type === 'function';
      if (hasProp(runtimeProperties, key)) {
        if (objType) {
          if (hasProp(obj, '__mdid__')) {
            md = nativeMetadata[obj.__mdid__];
          } else if (hasProp(obj, '__md__')) {
            md = obj.__md__;
          }
          if (md && md.hasDefProperty(key)) {
            return md.get(key);
          }
          return this.get(prototypeOf(obj), key);
        } else {
          return nativeMetadata[obj.__mdid__].get(key);
        }
        return void 0;
      }
      if (type === 'string' && typeof key === 'number' || key === 'length') {
        return obj[key];
      }
      mdid = obj.__mdid__;
      md = nativeMetadata[obj.__mdid__];
      if (md && md.object === obj || !objType) {
        return md.get(key, obj);
      }
      if (hasProp(obj, '__md__')) {
        return obj.__md__.get(key);
      }
      if (hasProp(obj, key)) {
        return obj[key];
      }
      return this.get(prototypeOf(obj), key);
    };
    this.set = function(obj, key, val) {
      var md, objType, type;
      type = typeof obj;
      objType = type === 'object' || type === 'function';
      if (hasProp(runtimeProperties, key)) {
        if (objType) {
          if (hasProp(obj, '__mdid__')) {
            md = nativeMetadata[obj.__mdid__];
          } else {
            if (!hasProp(obj, '__md__')) {
              defProp(obj, '__md__', {
                value: new ObjectMetadata(obj, this),
                writable: true
              });
            }
            md = obj.__md__;
          }
          if (!md.hasDefProperty(key)) {
            md.defineProperty(key, {
              value: val,
              writable: true,
              enumerable: true,
              configurable: true
            });
          }
          md.set(key, val);
        }
        return val;
      }
      if (objType) {
        if (hasProp(obj, '__md__')) {
          obj.__md__.set(key, val);
        } else if (hasProp(obj, '__mdid__')) {
          nativeMetadata[obj.__mdid__].set(key, val);
        } else {
          obj[key] = val;
        }
      }
      return val;
    };
    this.del = function(obj, key) {
      var objType, type;
      type = typeof obj;
      objType = type === 'object' || type === 'function';
      if (hasProp(runtimeProperties, key)) {
        if (objType) {
          if (hasProp(obj, '__mdid__')) {
            return nativeMetadata[obj.__mdid__].del(key);
          } else if (hasProp(obj, '__md__')) {
            return obj.__md__.delDefProperty(key);
          }
        }
        return true;
      }
      if (objType) {
        if (type === 'function' && key === 'prototype') {
          return false;
        }
        if (hasProp(obj, '__md__')) {
          return obj.__md__.del(key);
        } else if (hasProp(obj, '__mdid__')) {
          return nativeMetadata[obj.__mdid__].del(key);
        } else {
          return delete obj[key];
        }
      }
      return true;
    };
    this.instanceOf = function(klass, obj) {
      var _ref4;
      if ((obj == null) || ((_ref4 = typeof obj) !== 'object' && _ref4 !== 'function')) {
        return false;
      }
      if (hasProp(obj, '__mdid__')) {
        return nativeMetadata[obj.__mdid__].instanceOf(klass);
      }
      if (hasProp(obj, '__md__')) {
        return obj.__md__.instanceOf(klass);
      }
      return obj instanceof klass;
    };
    this.getNativeMetadata = function(obj) {
      return nativeMetadata[obj.__mdid__];
    };
    this.enumerateKeys = function(obj) {
      var key, keys;
      if (typeof obj === 'object') {
        if (hasProp(obj, '__md__')) {
          return obj.__md__.enumerateKeys();
        }
      }
      keys = [];
      for (key in obj) {
        if (key !== '__mdid__') {
          keys.push(key);
        }
      }
      return new ArrayIterator(keys);
    };
    for (k in merge) {
      if (!__hasProp.call(merge, k)) continue;
      v = merge[k];
      global[k] = v;
    }
    this.global = global;
    this.registerNative = register;
  }

  Realm.prototype.inv = function(o) {
    return -o;
  };

  Realm.prototype.lnot = function(o) {
    return !o;
  };

  Realm.prototype.not = function(o) {
    return ~o;
  };

  Realm.prototype.inc = function(o) {
    return o + 1;
  };

  Realm.prototype.dec = function(o) {
    return o - 1;
  };

  Realm.prototype.add = function(r, l) {
    return l + r;
  };

  Realm.prototype.sub = function(r, l) {
    return l - r;
  };

  Realm.prototype.mul = function(r, l) {
    return l * r;
  };

  Realm.prototype.div = function(r, l) {
    return l / r;
  };

  Realm.prototype.mod = function(r, l) {
    return l % r;
  };

  Realm.prototype.shl = function(r, l) {
    return l << r;
  };

  Realm.prototype.sar = function(r, l) {
    return l >> r;
  };

  Realm.prototype.shr = function(r, l) {
    return l >>> r;
  };

  Realm.prototype.or = function(r, l) {
    return l | r;
  };

  Realm.prototype.and = function(r, l) {
    return l & r;
  };

  Realm.prototype.xor = function(r, l) {
    return l ^ r;
  };

  Realm.prototype.ceq = function(r, l) {
    return l == r;
  };

  Realm.prototype.cneq = function(r, l) {
    return l != r;
  };

  Realm.prototype.cid = function(r, l) {
    return l === r;
  };

  Realm.prototype.cnid = function(r, l) {
    return l !== r;
  };

  Realm.prototype.lt = function(r, l) {
    return l < r;
  };

  Realm.prototype.lte = function(r, l) {
    return l <= r;
  };

  Realm.prototype.gt = function(r, l) {
    return l > r;
  };

  Realm.prototype.gte = function(r, l) {
    return l >= r;
  };

  return Realm;

})();

module.exports = Realm;


  return module.exports;
})({exports: $$___src_runtime_realm}, $$___src_runtime_realm);var $$___src_ast_transformer = {};
$$___src_ast_transformer = (function(module, exports) {

  var Transformer,
  __slice = [].slice;

Transformer = (function() {
  function Transformer() {
    var visitors;
    visitors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.visitors = visitors;
  }

  Transformer.prototype.transform = function(ast) {
    var visitor, _i, _len, _ref;
    _ref = this.visitors;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      visitor = _ref[_i];
      ast = visitor.visit(ast);
    }
    return ast;
  };

  return Transformer;

})();

module.exports = Transformer;


  return module.exports;
})({exports: $$___src_ast_transformer}, $$___src_ast_transformer);var $$___src_vm_index = {};
$$___src_vm_index = (function(module, exports) {

  var ConstantFolder, Emitter, Fiber, Realm, Script, Transformer, Vm, compile, esprima;

esprima = require('esprima');

Transformer = $$___src_ast_transformer;

Realm = $$___src_runtime_realm;

ConstantFolder = $$___src_ast_constant_folder;

Emitter = $$___src_vm_emitter;

Fiber = $$___src_vm_thread.Fiber;

Script = $$___src_vm_script;

Vm = (function() {
  function Vm(merge, allowEval) {
    if (allowEval == null) {
      allowEval = false;
    }
    this.realm = new Realm(merge);
    if (allowEval) {
      this.realm.compileFunction = Vm.compileFunction;
      this.realm["eval"] = this.realm.global["eval"] = Vm.compileEval;
    }
  }

  Vm.prototype["eval"] = function(string, filename, timeout) {
    return this.run(Vm.compile(string, filename), timeout);
  };

  Vm.prototype.run = function(script, timeout) {
    var fiber;
    fiber = this.createFiber(script, timeout);
    fiber.run();
    if (!fiber.paused) {
      return fiber.rexp;
    }
  };

  Vm.prototype.createFiber = function(script, timeout) {
    var fiber;
    fiber = new Fiber(this.realm, timeout);
    fiber.pushFrame(script, this.realm.global);
    return fiber;
  };

  Vm.compile = function(source, filename) {
    var emitter;
    if (filename == null) {
      filename = '<script>';
    }
    emitter = new Emitter(null, filename, null, source.split('\n'));
    return compile(source, emitter);
  };

  Vm.compileEval = function(frame, source) {
    var emitter, names, scope, scopes;
    scopes = [];
    scope = frame.scope;
    while (scope) {
      scopes.push(scope.namesHash());
      scope = scope.parent;
    }
    emitter = new Emitter(scopes, '<eval>', 'eval', source.split('\n'));
    if (frame.scope) {
      emitter.varIndex = frame.scope.data.length;
      names = frame.scope.names.slice();
      names[0] = 'this';
      names[1] = 'arguments';
      emitter.localNames = names;
    }
    return compile(source, emitter);
  };

  Vm.compileFunction = function(args) {
    var body, emitter, functionArgs, i, program, source, _i, _ref;
    functionArgs = [];
    if (args.length > 1) {
      for (i = _i = 0, _ref = args.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        functionArgs = functionArgs.concat(args[i].split(','));
      }
    }
    body = args[args.length - 1];
    source = "(function(" + (functionArgs.join(', ')) + ") {\n" + body + "\n})";
    emitter = new Emitter([
      {
        "this": 0,
        "arguments": 1
      }
    ], '<eval>', null, source.split('\n'));
    program = compile(source, emitter);
    return program.scripts[0];
  };

  Vm.fromJSON = Script.fromJSON;

  Vm.parse = esprima.parse;

  return Vm;

})();

compile = function(source, emitter) {
  var ast, transformer;
  transformer = new Transformer(new ConstantFolder(), emitter);
  ast = esprima.parse(source, {
    loc: true
  });
  transformer.transform(ast);
  return emitter.end();
};

module.exports = Vm;


  return module.exports;
})({exports: $$___src_vm_index}, $$___src_vm_index);var $$___test_vm = {};
$$___test_vm = (function(module, exports) {

  var Dog, Vm, merge, nativetest, selftest, startIndex, stopIndex, strip, tests, vmEvalSuite,
  __hasProp = {}.hasOwnProperty;

Vm = $$___src_vm_index;

selftest = 1;

nativetest = 1;

tests = {
  "({name: 'thiago', 'age': 28, 1: 2})": [
    {
      name: 'thiago',
      age: 28,
      1: 2
    }
  ],
  "'abc'": ['abc'],
  "[1, 2, [1, 2]]": [[1, 2, [1, 2]]],
  "'abc'[1]": ['b'],
  "'abc'.length": [3],
  "/abc/gi === /abc/gi": [false],
  'void(0)': [void 0],
  'void(x=1)': [
    void 0, {
      x: 1
    }
  ],
  'typeof 5': ['number'],
  'typeof undefined': ['undefined'],
  'n=5; typeof n': [
    'number', {
      n: 5
    }
  ],
  'typeof true': ['boolean'],
  'b=true; typeof b': [
    'boolean', {
      b: true
    }
  ],
  'o={prop1: 1, prop2: 2}; delete o.prop1': [
    true, {
      o: {
        prop2: 2
      }
    }
  ],
  'o={prop1: 1, prop2: 2}; delete o["prop2"]': [
    true, {
      o: {
        prop1: 1
      }
    }
  ],
  'delete Array': [
    true, (function(global) {
      expect('Object' in global).to.eql(true);
      return expect('Array' in global).to.eql(false);
    })
  ],
  '(function(){var x = 1; return delete x;})()': [false],
  '-{count: 2}.count': [-2],
  "x = {count: 28};x.count++": [
    28, {
      x: {
        count: 29
      }
    }
  ],
  "x = {count: 30};--x.count": [
    29, {
      x: {
        count: 29
      }
    }
  ],
  'x = 4; --x': [
    3, {
      x: 3
    }
  ],
  'x = 4; ++x': [
    5, {
      x: 5
    }
  ],
  'x = 4; x--': [
    4, {
      x: 3
    }
  ],
  'x = 4; x++': [
    4, {
      x: 5
    }
  ],
  'x = 5; -x': [
    -5, {
      x: 5
    }
  ],
  'x = 5; +x': [
    5, {
      x: 5
    }
  ],
  'x = 5; !x': [
    false, {
      x: 5
    }
  ],
  'x = 5; ~x': [
    -6, {
      x: 5
    }
  ],
  '5 == 5': [true],
  '5 == "005"': [true],
  '5 == 4': [false],
  '5 == "004"': [false],
  '5 != 5': [false],
  '5 != "005"': [false],
  '5 != 4': [true],
  '5 === 5': [true],
  '5 === "005"': [false],
  '5 !== 5': [false],
  '5 !== "005"': [true],
  '5 !== 4': [true],
  'false || true': [true],
  'false || false': [false],
  'true && true': [true],
  'true && false': [false],
  '10 > 9': [true],
  '10 > 10': [false],
  '10 >= 10': [true],
  '10 < 9': [false],
  '10 < 10': [false],
  '10 <= 10': [true],
  '2 + 2': [4],
  '1023 - 5': [1018],
  '70 * 7': [490],
  '1000 / 10': [100],
  '27 % 10': [7],
  '2 << 1': [4],
  '0xffffffff >> 1': [-1],
  '0x0fffffff >> 1': [0x7ffffff],
  '0xffffffff >>> 1': [0x7fffffff],
  '0xf | 0xf0': [0xff],
  '0xf & 0xf8': [8],
  '0xf0 ^ 8': [0xf8],
  '3 ? 1 : 2': [1],
  'false ? 1 : 2': [2],
  "x = {count: 28};x.count = 29": [
    29, {
      x: {
        count: 29
      }
    }
  ],
  "x = {count: 28};x.count += 10": [
    38, {
      x: {
        count: 38
      }
    }
  ],
  "x = [1, 2, 3];x[2] = 5": [
    5, {
      x: [1, 2, 5]
    }
  ],
  'x = 15': [
    15, {
      x: 15
    }
  ],
  'x = 3;x += 8': [
    11, {
      x: 11
    }
  ],
  'x = 3;x -= 8': [
    -5, {
      x: -5
    }
  ],
  'x = 50;x *= 5': [
    250, {
      x: 250
    }
  ],
  'x = 300;x /= 5': [
    60, {
      x: 60
    }
  ],
  'x = 1000;x %= 35': [
    20, {
      x: 20
    }
  ],
  'x = 5;x <<= 3': [
    40, {
      x: 40
    }
  ],
  'x = 0xffffffff;x >>= 1': [
    -1, {
      x: -1
    }
  ],
  'x = 0x0fffffff;x >>= 1': [
    0x7ffffff, {
      x: 0x7ffffff
    }
  ],
  'x = 0xffffffff;x >>>= 1': [
    0x7fffffff, {
      x: 0x7fffffff
    }
  ],
  'x = 0xf;x |= 0xf0': [
    0xff, {
      x: 0xff
    }
  ],
  'x = 0xf;x &= 0xf8': [
    8, {
      x: 8
    }
  ],
  'x = 0xf0;x ^= 8': [
    0xf8, {
      x: 0xf8
    }
  ],
  '[x, y] = [1, 2]': [
    [1, 2], {
      x: 1,
      y: 2
    }
  ],
  'var [x, y] = [1, 2]': [
    [1, 2], {
      x: 1,
      y: 2
    }
  ],
  '[,,y] = [1, 2, 3 ,4]': [
    [1, 2, 3, 4], {
      y: 3
    }
  ],
  '({x: X, y: Y} = {x: 1, y: 2})': [
    {
      x: 1,
      y: 2
    }, {
      X: 1,
      Y: 2
    }
  ],
  '({x, y} = {x: 1, y: 2})': [
    {
      x: 1,
      y: 2
    }, {
      x: 1,
      y: 2
    }
  ],
  'var {x, y} = {x: 1, y: 2}': [
    {
      x: 1,
      y: 2
    }, {
      x: 1,
      y: 2
    }
  ],
  'var [a,,[b,,[c]]] = [1,0,[2,0,[3]]];': [
    [1, 0, [2, 0, [3]]], {
      a: 1,
      b: 2,
      c: 3
    }
  ],
  'var {op: a, lhs: {op: b}, rhs: c} = {op: 1, lhs: {op: 2}, rhs: 3};': [
    {
      op: 1,
      lhs: {
        op: 2
      },
      rhs: 3
    }, {
      a: 1,
      b: 2,
      c: 3
    }
  ],
  "if (5 > 4) i = 1;": [
    1, {
      i: 1
    }
  ],
  "if (5 > 4) i = 1; else i = 2": [
    1, {
      i: 1
    }
  ],
  "if (4 > 5) i = 1;": [null],
  "if (4 > 5) i = 1; else i = 4": [
    4, {
      i: 4
    }
  ],
  'i = 0; while(i++ < 10) i++; i;': [
    11, {
      i: 11
    }
  ],
  "l = ['1', 2, 'age', 28, 'name', 'thiago'];\nobj = {}\nwhile (l.length) obj[l.pop()] = l.pop();\nobj;": [
    {
      name: 'thiago',
      'age': 28,
      1: 2
    }, (function(global) {})
  ],
  "(function() {})()": [void 0],
  "(function factorial(n) { return n > 1 ? n * factorial(n - 1) : 1 })(5);": [120],
  "x = 5;\nthis[++x] = 10;": [
    10, (function(global) {
      return expect(global[6]).to.eql(10);
    })
  ],
  "obj = {\n  isTrue: function(obj) { return 'isTrue' in obj }\n}\nl = [];\n\n(function() {\n  for (var k in obj) {\n    if (obj.isTrue.call(obj, obj)) l.push('isTrue');\n  }\n  function test() { }\n})();\nl": [['isTrue'], (function(global) {})],
  "obj = {\n  isTrue: function(obj) { return 'isTrue' in obj }\n}\nl = [];\n\n(function() {\n  for (var k in obj) {\n    if (obj.isTrue.call(obj, obj)) l.push('isTrue');\n    function test() { }\n  }\n})();\nl": [['isTrue'], (function(global) {})],
  "i = 0;\nwhile (i < 1000) {\n  j = 0;\n  while (j < 100000) {\n    j += 100;\n    break;\n  }\n  i++;\n};\ni;": [
    1000, {
      i: 1000,
      j: 100
    }
  ],
  "i = 0; j = 0; k = 0;\nwhile (i < 1000) {\n  while (j < 100000) {\n    j += 100;\n    while (true) {k+=2; break;}\n    continue;\n    i += 10000\n  }\n  i++;\n};\ni;": [
    1000, {
      i: 1000,
      j: 100000,
      k: 2000
    }
  ],
  "i = 0, j = 0\ndo {\n  j += 5\n} while (i++ < 10)\ni,j;": [
    55, {
      i: 11,
      j: 55
    }
  ],
  "obj = {length: 5};\nj = 0;\nfor (i = 0, len = obj.length; i < len; i++) {\n  j++;\n}\ni": [
    5, {
      i: 5,
      j: 5,
      len: 5,
      obj: {
        length: 5
      }
    }
  ],
  "obj = {name: '1', address: 2, email: 3};\nl = []\nfor (var k in obj) l.push(k)\nl.sort()\nnull": [
    null, (function(global) {
      return expect(global.l).to.eql(['address', 'email', 'name']);
    })
  ],
  "obj = {name: '1', address: 2, email: 3};\nl = []\n(function() {\n  for (k in obj) l.push(k)\n})();": [
    void 0, (function(global) {
      return expect(global.errorThrown.stack).to.be("TypeError: object is not a function\n    at <script>:2:37");
    })
  ],
  "obj = {name: '1', address: 2, email: 3};\nl = [];\n(function() {\n  for (k in obj) l.push(k)\n})();\nl.sort()\nnull": [
    null, (function(global) {
      expect(global.l).to.eql(['address', 'email', 'name']);
      return expect(!('k' in global)).to.be(false);
    })
  ],
  "obj = {name: '1', address: 2, email: 3};\nl = [];\n(function() {\n  var k;\n  for (k in obj) l.push(k)\n})();\nl.sort()\nnull": [
    null, (function(global) {
      expect(global.l).to.eql(['address', 'email', 'name']);
      return expect(!('k' in global)).to.be(true);
    })
  ],
  "l = [];\nfruits = ['orange', 'apple', 'lemon'];\nfor (var k of fruits) l.push(k)\nnull": [
    null, (function(global) {
      expect(global.l).to.eql(['orange', 'apple', 'lemon']);
      return expect('k' in global).to.eql(true);
    })
  ],
  "l1 = [1, 2]\nl2 = [3, 4]\nl3 = [5, 6]\nl = [];\nfor (let i = 0; i < l1.length;i++) {\n  for (let j = 0; j < l2.length;j++) {\n    for (let k = 0; k < l3.length;k++) {\n      l.push([l1[i], l2[j], l3[k]]);\n    }\n  }\n}\nnull": [
    null, (function(global) {
      return expect(global.l).to.eql([[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]]);
    })
  ],
  "l = [];\nfor (var i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (var k of [5, 6]) {\n      l.push([i, j, k]);\n    }\n  }\n}\nnull": [
    null, (function(global) {
      return expect(global.l).to.eql([[1, 3, 5], [1, 3, 6], [1, 4, 5], [1, 4, 6], [2, 3, 5], [2, 3, 6], [2, 4, 5], [2, 4, 6]]);
    })
  ],
  "for (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (let k of [5, 6]) {\n    }\n  }\n}\nnull": [
    null, (function(global) {
      expect(global.j).to.eql(4);
      expect('i' in global).to.eql(false);
      return expect('k' in global).to.eql(false);
    })
  ],
  "l = [];\nouter:\nfor (var i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (var k of [5, 6]) {\n      l.push([i, j, k]);\n      break outer;\n    }\n  }\n}\nnull": [
    null, (function(global) {
      return expect(global.l).to.eql([[1, 3, 5]]);
    })
  ],
  "l = [];\nouter:\nfor (var i of [1, 2]) {\n  for (let j of [3, 4]) {\n    for (var k of [5, 6]) {\n      l.push([i, j, k]);\n      continue outer;\n    }\n  }\n}\nnull": [
    null, (function(global) {
      return expect(global.l).to.eql([[1, 3, 5], [2, 3, 5]]);
    })
  ],
  "l = [];\nfor (let i of [1, 2]) {\n  outer:\n  for (var j of [3, 4]) {\n    for (let k of [5, 6]) {\n      l.push([i, j, k]);\n      break outer;\n    }\n  }\n}\nnull": [
    null, (function(global) {
      return expect(global.l).to.eql([[1, 3, 5], [2, 3, 5]]);
    })
  ],
  "l = [];\nfor (let i of [1, 2]) {\n  outer:\n  for (let j of [3, 4]) {\n    for (let k of [5, 6]) {\n      l.push([i, j, k]);\n      continue outer;\n    }\n  }\n}\nnull": [
    null, (function(global) {
      return expect(global.l).to.eql([[1, 3, 5], [1, 4, 5], [2, 3, 5], [2, 4, 5]]);
    })
  ],
  "l = [];\nfruits = ['orange', 'apple', 'lemon'];\nfor (let k of fruits) l.push(k)\nnull": [
    null, (function(global) {
      expect(global.l).to.eql(['orange', 'apple', 'lemon']);
      return expect('k' in global).to.eql(false);
    })
  ],
  "obj = [[1, 2], [3, 4], [5, 6]];\nl = []\nfor (var [x,y] = obj[0], i = 1; i < obj.length; [x,y] = obj[i++]) {\n  l.push(x); l.push(y);\n}\nl": [[1, 2, 3, 4], (function(global) {})],
  "var i, j;\nvar l = [];\nloop1:\nfor (i = 0; i < 3; i++) {\n   loop2:\n   for (j = 0; j < 3; j++)\n      if (i == 1 && j == 1) continue loop1;\n      else l.push(i), l.push(j);\n}\ni": [
    3, {
      i: 3,
      j: 3,
      l: [0, 0, 0, 1, 0, 2, 1, 0, 2, 0, 2, 1, 2, 2]
    }
  ],
  "var i, j;\nvar l = [];\nloop1:\nfor (i = 0; i < 3; i++) {\n   loop2:\n   for (j = 0; j < 3; j++)\n      if (i == 1 && j == 1) break loop1;\n      else l.push(i), l.push(j);\n}\nj": [
    1, {
      i: 1,
      j: 1,
      l: [0, 0, 0, 1, 0, 2, 1, 0]
    }
  ],
  'for (var i = 0, len = 6; i < len; i+=10) {}; i': [
    10, {
      i: 10,
      len: 6
    }
  ],
  '(function() { return 10; })()': [10],
  '(function() { var i = 4; return i * i; })()': [16],
  '(function named() { var i = 4; return i * i; })()': [16],
  "i = 0;\ntest();\nfunction test() { i = 10; }\ni": [
    10, (function(global) {
      return expect(global.i).to.eql(10);
    })
  ],
  "(function() {\n  return a();\n  function b() {\n    return 5;\n  }\n  function a() {\n    return b();\n    function b() {\n      return 6;\n    }\n  }\n})();": [6],
  "fn = function(a, b, c, d) {\n  return a + b + c * d;\n}\nfn(4, 9, 10, 3);": [43, (function(global) {})],
  "fn = function(a, b=2, c=b*b, d=c) {\n  return a + b + c + d;\n}\nfn(9);": [19, (function(global) {})],
  "fn = function(a, b=2, c=b*b, d=c, ...f) {\n  return f;\n}\nfn(1, 2, 3, 4, 5, 6);": [[5, 6], (function(global) {})],
  "fn = function([n1, n2], {key, value}) {\n  return [n1 + n2, key, value];\n}\nfn([5, 4], {key: 'k', value: 'v'});": [[9, 'k', 'v'], (function(global) {})],
  "function switchCleanup(x) {\n  switch (x) {\n    case 9:\n      return 4;\n      break\n    case '10':\n      return 5\n      break;\n    default:\n      return 6;\n      break\n  }\n}\nswitchCleanup('10')": [5, (function(global) {})],
  "x = '10'\nswitch (x) {\n  case 9:\n    z = 4;\n    break\n  case '10':\n    z = 5;\n    break;\n  default:\n    z = 6;\n    break\n}\nz": [5, (function(global) {})],
  "x = 10\nz = 0\nswitch (x) {\n  case 10:\n  case 9:\n  case 8:\n    z = 2;\n    break\n  default:\n    z = 3;\n}\nz": [2, (function(global) {})],
  "x = 9\nz = 0\nswitch (x) {\n  case 10:\n  case 9:\n    z = 2;\n  case 8:\n    break\n  default:\n    z = 10;\n}\nz": [2, (function(global) {})],
  "x = 8\nz = 0\nswitch (x) {\n  case 10:\n  case 9:\n    z = 2;\n  case 8:\n    break\n  default:\n    z = 10;\n}\nz": [0, (function(global) {})],
  "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n            break grandparent;\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [50, (function(global) {})],
  "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n            break parent;\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [52, (function(global) {})],
  "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n            break;\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [62, (function(global) {})],
  "z = 0\ngrandparent:\nswitch (10) {\n  case 9:\n  case 10:\n    parent:\n    switch (3 + 3) {\n      case 7:\n        z += 1\n        break;\n      case 6:\n        child:\n        switch (4+1) {\n          case 5:\n            z += 50\n          case 10:\n            z += 100;\n        }\n        z += 10;\n    }\n    z += 2;\n}\nz": [162, (function(global) {})],
  "x = 10\nz = 0\nswitch (x) {\n  case 10:\n    let y = 10\n  case 9:\n    y += 10\n  case 8:\n    y += 10\n    z = y\n    break\n  default:\n    z = 10;\n}\nz": [
    30, (function(global) {
      expect(global.z).to.eql(30);
      return expect('y' in global).to.eql(false);
    })
  ],
  "x = 10\nz = 0\nswitch (x) {\n  case 10:\n    z += 2\n  case 9:\n    z += 2\n    break;\n  case 8:\n    z += 2\n    break\n  default:\n    z = 10;\n}\nz": [4, (function(global) {})],
  "throw new EvalError('err')": [
    void 0, (function(global) {
      return expect(global.errorThrown.stack).to.eql("EvalError: err\n    at <script>:1:10");
    })
  ],
  "(function() {\n  var err;\n  try {\n    throw 'error';\n  } catch (e) {\n    err = e;\n  } finally {\n    err += ' thrown';\n  }\n\n  return err;\n})();": ['error thrown'],
  "function fn1() {\n  try {\n    fn2();\n    return 3;\n  } catch (e) {\n    a = e\n    return 5;\n  }\n}\nfunction fn2() {\n  throw 'error'\n}\nfn1();": [
    5, (function(global) {
      expect(global.e).to.not.exist;
      return expect(global.a).to.eql('error');
    })
  ],
  "function fn1() {\n  try {\n    fn2();\n  } catch ([a,,[b,,[c]]]) {\n    ex = [a, b, c];\n    i = 10; return 1;\n  } finally { return 5; i = 2}\n}\nfunction fn2() {\n  throw [1,0,[2,0,[3]]];\n}\nfn1()": [
    5, (function(global) {
      expect(global.i).to.eql(10);
      expect(global.a).to.not.exist;
      expect(global.b).to.not.exist;
      expect(global.c).to.not.exist;
      return expect(global.ex).to.eql([1, 2, 3]);
    })
  ],
  "function fn1() {\n  try {\n    fn2();\n    return 3;\n  } catch ({op: a, lhs: {op: b}, rhs: c}) {\n    ex = [a, b, c];\n    return i + 1;\n  } finally {\n    j = 10;\n  }\n}\nfunction fn2() {\n  try {\n    fn3();\n  } finally {\n    i = 11;\n  }\n}\nfunction fn3() {\n  try {\n    throw 'error'\n  } catch (e) {\n    throw {op: 1, lhs: {op: 2}, rhs: 3};\n  }\n}\nfn1();": [
    12, (function(global) {
      expect(global.i).to.eql(11);
      expect(global.j).to.eql(10);
      expect(global.a).to.not.exist;
      expect(global.b).to.not.exist;
      expect(global.c).to.not.exist;
      return expect(global.ex).to.eql([1, 2, 3]);
    })
  ],
  "try {\n  throw 'err'\n} catch (e) {\n  ex = e;\n}": [
    'err', (function(global) {
      expect(global.e).to.not.exist;
      return expect(global.ex).to.eql('err');
    })
  ],
  "try {\n  throw 'err'\n} catch (e) {\n  throw e;\n} finally {\n  (function() { obj = [1, 2] })();\n}": [
    void 0, (function(global) {
      expect(global.errorThrown).to.eql('err');
      return expect(global.obj).to.eql([1, 2]);
    })
  ],
  "l = [];\n\nfunction f() {\n    try {\n        throw 'err1'\n    } catch (e) {\n        try {\n            throw 'err2'\n        } catch (e) {\n            try {\n                throw 'err3'\n            } catch (e) {\n                return 10;\n            } finally {\n                l.push(1);\n            }\n        } finally {\n            l.push(2);\n        }\n    } finally {\n        l.push(3);\n    }\n}\n\nf();": [
    10, (function(global) {
      return expect(global.l).to.eql([1, 2, 3]);
    })
  ],
  "l = [];\n\nfunction f() {\n    try {\n        throw 'err1'\n    } catch (e) {\n        try {\n            throw 'err2'\n        } catch (e) {\n            try {\n                throw 'err3'\n            } catch (e) {\n                return 10;\n            } finally {\n                l.push(1);\n                return 11;\n            }\n        } finally {\n            l.push(2);\n            return 12;\n        }\n    } finally {\n        l.push(3);\n    }\n}\n\nf();": [
    12, (function(global) {
      return expect(global.l).to.eql([1, 2, 3]);
    })
  ],
  "errors = []\nfor (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    for (let k of [5, 6]) {\n      try {\n        throw i\n      } catch (e) {\n        errors.push(e);\n      }\n    }\n  }\n}\nerrors": [[1, 1, 1, 1, 2, 2, 2, 2], (function(global) {})],
  "errors = []\nfor (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    try {\n      for (let k of [5, 6]) {\n        throw j\n      }\n    } catch (e) {\n      errors.push(e);\n    }\n  }\n}\nerrors": [[3, 4, 3, 4], (function(global) {})],
  "errors = []\nfor (let i of [1, 2]) {\n  try {\n    for (var j of [3, 4]) {\n      for (let k of [5, 6]) {\n        throw k\n      }\n    }\n  } catch (e) {\n    errors.push(e);\n  }\n}\nerrors": [[5, 5], (function(global) {})],
  "errors = []\ntry {\n  for (let i of [1, 2]) {\n    for (var j of [3, 4]) {\n      for (let k of [5, 6]) {\n        try {\n          throw [k, j, i]\n        } finally {\n        }\n      }\n    }\n  }\n} catch (e) {\n  errors.push(e)\n}\nerrors": [[[5, 3, 1]], (function(global) {})],
  "errors = []\nfor (let i of [1, 2]) {\n  try {\n    for (var j of [3, 4]) {\n      for (let k of [5, 6]) {\n        try {\n          throw [k, j, i]\n        } finally { }\n      }\n    }\n  } catch (e) {\n    errors.push(e)\n  }\n}\nerrors": [[[5, 3, 1], [5, 3, 2]], (function(global) {})],
  "errors = []\nfor (let i of [1, 2]) {\n  for (var j of [3, 4]) {\n    try {\n      for (let k of [5, 6]) {\n        try {\n          throw [k, j, i]\n        } finally { }\n      }\n    } catch (e) {\n      errors.push(e)\n    }\n  }\n}\nerrors": [[[5, 3, 1], [5, 4, 1], [5, 3, 2], [5, 4, 2]], (function(global) {})],
  "s = null\ns.name = 1": [
    void 0, (function(global) {
      var errString;
      errString = global.errorThrown.toString();
      return expect(errString).to.eql("TypeError: Cannot set property 'name' of null\n    at <script>:2:0");
    })
  ],
  "function abc() {\n  x = 5\n  def();\n  y = 1\n}\n\nfunction def() {\n  y()\n}\n\ny = function() {\n  var x = function ghi() {\n    s = undefined\n    s.name = 1\n  }\n  x()\n}\n\nabc()": [
    void 0, (function(global) {
      var errString;
      errString = global.errorThrown.toString();
      return expect(errString).to.eql("TypeError: Cannot set property 'name' of undefined\n    at ghi (<script>:14:4)\n    at y (<script>:16:2)\n    at def (<script>:8:2)\n    at abc (<script>:3:2)\n    at <script>:19:0");
    })
  ],
  "obj = {\n  getName: function() {\n    return n;\n  }\n}\n\nfunction name() {\n  obj.getName()\n}\n\n(function() {\n  name()\n})()": [
    void 0, (function(global) {
      var errString;
      errString = global.errorThrown.toString();
      return expect(errString).to.eql("ReferenceError: n is not defined\n    at Object.getName (<script>:3:11)\n    at name (<script>:8:2)\n    at <anonymous> (<script>:12:2)\n    at <script>:11:1");
    })
  ],
  "function withScope() {\n  let k = 3\n  let obj = {i: 1, j: 2}\n\n  with (obj) {\n    i = 10;\n    j = i * 2;\n    k = j * 3;\n    l = k * 4;\n  }\n\n  return [obj, k];\n}\n\nwithScope()": [
    [
      {
        j: 20,
        i: 10
      }, 60
    ], (function(global) {
      expect(global.l).to.eql(240);
      expect('k' in global).to.eql(false);
      expect('i' in global).to.eql(false);
      return expect('j' in global).to.eql(false);
    })
  ],
  "function fn() {\n  return this._id++;\n}\n\n_id = 10;\n\nidGen = {\n  _id: 1,\n  id: fn\n};\n\nfn(); fn(); fn();\n\nl = [idGen.id(), idGen.id(), idGen.id()]\n_id++\n++this._id": [
    15, (function(global) {
      expect(global._id).to.eql(15);
      return expect(global.l).to.eql([1, 2, 3]);
    })
  ],
  "new Date(2013, 7, 17)": [new Date(2013, 7, 17)],
  "new Array(3, 2, 1)": [[3, 2, 1]],
  "new Array(3)": [new Array(3)],
  "new RegExp('abc', 'gi')": [/abc/gi],
  "[new Number(1), new Number(null), new Number(undefined)]": [[new Number(1), new Number(null), new Number(void 0)]],
  "[new Boolean(1), new Boolean(null), new Boolean(undefined)]": [[new Boolean(1), new Boolean(null), new Boolean(void 0)]],
  "dog = new Dog()\ndog.bark()": [
    true, (function(global) {
      expect(global.dog).to.be.a(merge.Dog);
      return expect(global.dog.barked).to.eql(true);
    })
  ],
  "(5.5).toExponential().split('.')": [['5', '5e+0']],
  "[1, 2].concat([3, 4], [5, 6])": [[1, 2, 3, 4, 5, 6]],
  "/(a)(b)(c)/.exec('abc').slice()": [['abc', 'a', 'b', 'c']],
  "/a/ instanceof RegExp": [true],
  "new RegExp('abc').constructor": [RegExp],
  "/abc/.constructor": [RegExp],
  "null instanceof Object": [false],
  "r = /a/gi;\nr.global = false;\nr.ignoreCase = false;\nr.multiline = true;\n[r.global, r.ignoreCase, r.multiline, r.source]": [[true, true, false, 'a'], (function(global) {})],
  "r = /\\d+/g\nl = []\nwhile (match = r.exec('1/13/123')) l.push(match[0])\nl": [['1', '13', '123'], (function(global) {})],
  "r1 = /\\d+/g\nr2 = /\\d+/g\nl = []\nl.push(r1.exec('1/13/123')[0])\nl.push(r1.exec('1/13/123')[0])\nl.push(r2.exec('1/13/123')[0])\nl.push(r1.exec('1/13/123')[0])\nl": [
    ['1', '13', '1', '123'], (function(global) {
      expect(global.r1.lastIndex).to.eql(8);
      expect(global.r2.lastIndex).to.eql(1);
      return expect(global.r1.regexp).to.eql(global.r2.regexp);
    })
  ],
  "'1/13/123'.match(/\\d+/g)": [['1', '13', '123'], (function(global) {})],
  "Object.prototype.custom = 123\nx = Object.prototype.custom\nx": [
    123, (function(global) {
      return expect('custom' in Object.prototype).to.eql(false);
    })
  ],
  "x = Math.abs(-5);\ndelete Math.abs;\ntry {\n  y = Math.abs(-5);\n} catch (e) {\n  err = e;\n}\n'abs' in Math": [
    false, (function(global) {
      expect(global.x).to.be(5);
      expect('y' in global).to.be(false);
      expect(global.err.stack).to.be("TypeError: Object #<Object> has no method 'abs'\n    at <script>:4:6");
      return expect('abs' in global.Math).to.be(true);
    })
  ],
  "x = JSON.stringify(-5);\nJSON.stringify = 5;\ntry {\n  y = JSON.stringify(-5);\n} catch (e) {\n  err = e;\n}\n'stringify' in JSON": [
    true, (function(global) {
      expect(global.x).to.be('-5');
      expect('y' in global).to.be(false);
      expect(global.err.stack).to.be("TypeError: Property 'stringify' of object #<Object> is not a function\n    at <script>:4:6");
      return expect(global.JSON.stringify).to.be.a(Function);
    })
  ],
  "f = function(){};\no = {'__md__': 'd'};\nassertions1 = [\n  '__mdid__' in Object,\n  '__mdid__' in Object.prototype,\n  '__vmfunction__' in f,\n  '__md__' in o\n]\nObject.__mdid__ = 'a';\nObject.prototype.__mdid__ = 'b';\nf.__vmfunction__ = 'c';\ndelete o.__md__;\nassertions2 = [\n  '__mdid__' in Object,\n  '__mdid__' in Object.prototype,\n  '__vmfunction__' in f,\n  '__md__' in o\n];\n[\n  Object.__mdid__,\n  Object.prototype.__mdid__,\n  f.__vmfunction__,\n  o.__md__\n]": [
    ['a', 'b', 'c', void 0], (function(global) {
      expect(global.o).to.have.property('__md__');
      expect(Object.__mdid__).to.be(1);
      expect(Object.prototype.__mdid__).to.be(2);
      expect(global.f.__vmfunction__).to.be(true);
      expect(global.assertions1).to.eql([false, false, false, true]);
      return expect(global.assertions2).to.eql([true, true, true, false]);
    })
  ],
  "currentId = 5;\nObject.__mdid__ = currentId + 1;\ncurrentId = Object.__mdid__;\nObject.prototype.__mdid__ = currentId + 1;\ncurrentId = Object.prototype.__mdid__;\nFunction.__mdid__ = currentId + 1;\ncurrentId = Function.__mdid__;\nFunction.prototype.__mdid__ = currentId + 1;\ncurrentId = Function.prototype.__mdid__;\n[\n  currentId,\n  Function.prototype.__mdid__,\n  Function.__mdid__,\n  Object.prototype.__mdid__,\n  Object.__mdid__\n];": [
    [9, 9, 8, 7, 6], (function(global) {
      expect(Object.__mdid__).to.be(1);
      expect(Object.prototype.__mdid__).to.be(2);
      expect(Object.prototype.toString.__mdid__).to.be(3);
      expect(Function.__mdid__).to.be(4);
      return expect(Function.prototype.__mdid__).to.be(5);
    })
  ],
  "delete Object.prototype\ndelete Number.prototype\ndelete Boolean.prototype\ndelete String.prototype\ndelete Date.prototype\ndelete RegExp.prototype": [
    false, (function(global) {
      expect(global.Object.prototype).to.be(Object.prototype);
      expect(global.Number.prototype).to.be(Number.prototype);
      expect(global.Boolean.prototype).to.be(Boolean.prototype);
      expect(global.String.prototype).to.be(String.prototype);
      expect(global.Date.prototype).to.be(Date.prototype);
      return expect(global.RegExp.prototype).to.be(RegExp.prototype);
    })
  ],
  "(Object.prototype = Number.prototype = Boolean.prototype =\n  String.prototype = Date.prototype = RegExp.prototype =\n    {name: 'replacement'});": [
    {
      name: 'replacement'
    }, (function(global) {
      expect(global.Object.prototype).to.be(Object.prototype);
      expect(global.Number.prototype).to.be(Number.prototype);
      expect(global.Boolean.prototype).to.be(Boolean.prototype);
      expect(global.String.prototype).to.be(String.prototype);
      expect(global.Date.prototype).to.be(Date.prototype);
      return expect(global.RegExp.prototype).to.be(RegExp.prototype);
    })
  ],
  "i = 1\nObject.prototype.bark = function() { return 'bark' + i++ };\n[({}).bark(), [].bark(), new Date().bark()]": [
    ['bark1', 'bark2', 'bark3'], (function(global) {
      return expect('bark' in Object.prototype).to.eql(false);
    })
  ],
  "function Person(firstname, lastname) {\n  this.firstname = firstname;\n  this.lastname = lastname;\n}\nPerson.prototype.fullname = function() {\n  return this.firstname + ' ' + this.lastname;\n};\n\nfunction Employee(firstname, lastname) {\n  Person.call(this, firstname, lastname)\n}\nEmployee.prototype = Object.create(Person.prototype)\nEmployee.prototype.toString = function() {\n  return 'employee: ' + this.fullname()\n};\n\nfunction Programmer() {\n  Employee.apply(this, arguments)\n}\nProgrammer.prototype = new Employee()\nProgrammer.prototype.fullname = function() {\n  return 'programmer: ' + Employee.prototype.fullname.call(this);\n};\n\nhasOwn = [\n  Person.prototype.hasOwnProperty('fullname'),\n  Employee.prototype.hasOwnProperty('fullname'),\n  Programmer.prototype.hasOwnProperty('fullname')\n]\n\np1 = new Person('john', 'doe');\np2 = new Employee('thiago', 'arruda');\np3 = new Programmer('linus', 'torvalds');\np1str = p1.toString()\np1name = p1.fullname()\np2name = p2.toString()\np3name = p3.toString();\n(\n  p1 instanceof Person &&\n  !(p1 instanceof Employee) &&\n  !(p1 instanceof Programmer) &&\n  p2 instanceof Person &&\n  p2 instanceof Employee &&\n  !(p2 instanceof Programmer) &&\n  p3 instanceof Person &&\n  p3 instanceof Employee &&\n  p3 instanceof Programmer\n)": [
    true, (function(global) {
      expect(global.p1).to.be.a(global.Person);
      expect(global.p1str).to.eql('[object Object]');
      expect(global.p1name).to.eql('john doe');
      expect(global.p2name).to.eql('employee: thiago arruda');
      expect(global.p3name).to.eql('employee: programmer: linus torvalds');
      return expect(global.hasOwn).to.eql([true, false, true]);
    })
  ],
  "z = 0;\nx=1; function hello(name) {\n  if (name)\n    return 'hello' + name;\n  return 'hello world';\n } y = 2;\nhello.toString()": ["function hello(name) {\n  if (name)\n    return 'hello' + name;\n  return 'hello world';\n }", (function(global) {})],
  "x = 1\neval('x+2');": [
    3, {
      x: 1
    }
  ],
  "y = 10;\nz = 40;\nfunction evalLocal() {\n  var x = 1;\n  return eval('var y = 5; x + y + z')\n}\nevalLocal();": [
    46, (function(global) {
      return expect(global.y).to.eql(10);
    })
  ],
  "function evalClosure() {\n  var x = 1;\n  return eval('(function() { return x++ })')\n}\nc = evalClosure();\n[c(), c(), c()];": [[1, 2, 3], (function(global) {})],
  "f = new Function('a,', 'return 5;');": [
    void 0, (function(global) {
      return expect(global.errorThrown.stack).to.be("EvalError: Line 1: Unexpected token )\n    at <script>:1:8");
    })
  ],
  "throw new URIError('err')": [
    void 0, (function(global) {
      return expect(global.errorThrown.stack).to.be("URIError: err\n    at <script>:1:10");
    })
  ],
  "f = generateFunction();\nfunction generateFunction() {\n  return new Function('a,b', 'throw new URIError(a+b);');\n}\nf('a', 'b')": [
    void 0, (function(global) {
      return expect(global.errorThrown.stack).to.be("URIError: ab\n    at f (<eval>:2:10)\n    at <script>:5:0");
    })
  ],
  "f = generateFunction();\nfunction generateFunction() {\n  return new Function('a,b', 'c', 'd,e',\n  'return [a+b+c+d+e, Array.prototype.slice.call(arguments)];');\n}\nf(1, 2, 3, 4, 5);": [[15, [1, 2, 3, 4, 5]], (function(global) {})],
  'eval("(")': [void 0, (function(global) {})],
  '(function(a) { return a })(4)': [4],
  "(function() {\n  var obj, l, k;\n  obj = {i: 0};\n  o = {}\n  Object.defineProperty(obj, 'prop1', {\n    get: function() { return ++this.i; },\n    set: function(val) { this.i = val + 10; },\n    enumerable: true\n  });\n  Object.defineProperty(obj, 'prop2', {\n    value: 'val',\n  });\n  Object.defineProperty(o, 'prop3', {\n    value: 5,\n    writable: true,\n    configurable: true,\n    enumerable: true\n  });\n  obj.prop2 = 'val2';\n  l = [obj.prop2, delete obj.prop2];\n  l.push(obj.prop2);\n  l.push(obj.prop1);\n  l.push(obj.prop1);\n  obj.prop1 = 3;\n  l.push(obj.prop1);\n  l.push(obj.prop1);\n  for (k in obj) l.push(k);\n  return l;\n})();": [
    ['val', false, 'val', 1, 2, 14, 15, 'i', 'prop1'], {
      o: {
        prop3: 5
      }
    }
  ],
  "let square = x => x * x;\nsquare(2);": [4, (function(global) {})],
  "const obj = {\n  method: function () {\n    return () => this;\n  }\n};\nobj.method()() === obj;": [true, (function(global) {})],
  "function* gen(i) {\n  i = yield i + 1;\n  i = yield i * 2;\n  yield i * 4;\n  return 55;\n  yield i * 1000;\n}\n\ng = gen(10);\n\nl = [g.send(), g.send(20), g.send(30)];\nl.push(g.send());": [
    void 0, (function(global) {
      expect(global.l).to.eql([11, 40, 120]);
      expect(global.errorThrown.value).to.be(55);
      return expect(global.g.closed).to.eql(true);
    })
  ],
  "function *throwGen() {\n  yield 5;\n  try {\n    yield 6;\n    yield 7;\n  } catch (e) {\n    error = e;\n    yield 8;\n  }\n}\ng1 = throwGen();\ng2 = throwGen();\n\nl1 = [g1.next(), g1.next(), g1.next()];\nl2 = [g2.next(), g2.next(), g2.throw(new Error('test'))];": [
    [5, 6, 8], (function(global) {
      return expect(global.l1).to.eql([5, 6, 7]);
    })
  ],
  "function *throwGen(l) {\n  try {\n    yield 0;\n  } catch (e) {\n    try {\n      yield 0;\n    } catch(e) {\n      try {\n        yield 0;\n      } finally {\n        l.push(-1);\n      }\n    } finally {\n      l.push(-2);\n    }\n  } finally {\n    l.push(-3);\n    return 13;\n  }\n  return 14;\n}\nl1 = [];\ng1 = throwGen(l1);\ng1.send();\ng1.close();\nl2 = [];\ng2 = throwGen(l2);\ng2.send(); g2.throw('err');\ng2.close();\nl3 = [];\ng3 = throwGen(l3);\ng3.send(); g3.throw('err'); g3.throw('err');\ng3.close();": [
    13, (function(global) {
      expect(global.l1).to.eql([-3]);
      expect(global.l2).to.eql([-2, -3]);
      return expect(global.l3).to.eql([-1, -2, -3]);
    })
  ],
  "l = [];\nfunction* receive() {\n  l.push(yield 1);\n  return 50;\n}\ng = receive();\ng.send();\ng.send(10);": [
    void 0, (function(global) {
      return expect(global.errorThrown.value).to.eql(50);
    })
  ],
  "function* seq() {\n  var i = 0;\n  while (true) yield ++i;\n}\n\nl = [];\nfor (i of seq()) {\n  if (l.length > 5)\n    break;\n  l.push(i);\n}": [
    6, (function(global) {
      return expect(global.l).to.eql([1, 2, 3, 4, 5, 6]);
    })
  ],
  "function* fib() {\n  var i = 0, j = 1;\n  while (true) {\n    x = yield i;\n    var t = i;\n    i = j;\n    j += t;\n  }\n}\n\nvar g = fib();\n[g.next(), g.next(), g.next(), g.next(), g.next(), g.next()];": [[0, 1, 1, 2, 3, 5], (function(global) {})]
};

merge = {
  Dog: Dog = (function() {
    function Dog() {}

    Dog.prototype.bark = function() {
      return this.barked = true;
    };

    return Dog;

  })(),
  console: console,
  log: function() {
    return console.log.apply(console, arguments);
  }
};

startIndex = 0;

stopIndex = 1210;

vmEvalSuite = function(description, init, testInit, getResult) {
  return describe(description, function() {
    var i, k, v, _results;
    before(init);
    beforeEach(testInit);
    i = 0;
    _results = [];
    for (k in tests) {
      if (!__hasProp.call(tests, k)) continue;
      v = tests[k];
      if (i === stopIndex) {
        break;
      }
      if (i >= startIndex) {
        (function(k, v) {
          var expectedGlobal, expectedValue, fn, test;
          fn = function() {
            var e, err, result;
            try {
              result = getResult.call(this, k);
            } catch (_error) {
              e = _error;
              err = e;
            }
            expect(result).to.eql(expectedValue);
            if (typeof expectedGlobal === 'function') {
              this.global.errorThrown = err;
              return expectedGlobal(this.global);
            } else {
              if (err) {
                throw new Error("The VM has thrown an error:\n" + err);
              }
              if (typeof expectedGlobal === 'object') {
                return expect(strip(this.global)).to.eql(expectedGlobal);
              } else {
                return expect(strip(this.global)).to.eql({});
              }
            }
          };
          test = "\"" + k + "\"";
          expectedValue = v[0];
          expectedGlobal = v[1];
          if (1 === expectedGlobal || 1 === v[2]) {
            return it.only(test, fn);
          } else if (0 === expectedGlobal || 0 === v[2]) {
            return it.skip(test, fn);
          } else {
            return it(test, fn);
          }
        })(k, v);
      }
      _results.push(i++);
    }
    return _results;
  });
};

if (selftest) {
  vmEvalSuite('self-hosted vm eval', function() {
    var compiledVm;
    compiledVm = Vm.fromJSON(JSON.parse(JSON.stringify(Vm.compile(vmjs, 'vm.js').toJSON())));
    this.vm = new Vm(merge, true);
    return this.vm.run(compiledVm);
  }, function() {
    this.vm["eval"]("vm = new Vm({Dog: Dog}, true);");
    return this.global = this.vm.realm.global.vm.realm.global;
  }, function(string) {
    return this.vm.realm.global.vm["eval"](string);
  });
}

if (nativetest) {
  vmEvalSuite('vm eval', function() {
    return this.vm = null;
  }, function() {
    this.vm = new Vm(merge, true);
    return this.global = this.vm.realm.global;
  }, function(string) {
    var script;
    script = Vm.fromJSON(JSON.parse(JSON.stringify(Vm.compile(string).toJSON())));
    return this.vm.run(script);
  });
}

describe('API', function() {
  var vm;
  vm = null;
  beforeEach(function() {
    return vm = new Vm();
  });
  it('call vm functions directly', function() {
    var code, glob, idGen;
    code = "function fn() {\n  return this._id++;\n}\n\n_id = 10;\n\nidGen = {\n  _id: 1,\n  id: fn\n};";
    vm["eval"](code);
    glob = vm.realm.global;
    idGen = glob.idGen;
    expect([glob.fn(), glob.fn(), glob.fn()]).to.eql([10, 11, 12]);
    return expect([idGen.id(), idGen.id(), idGen.id()]).to.eql([1, 2, 3]);
  });
  it('fiber pause/resume', function(done) {
    var fiber;
    fiber = vm.createFiber(Vm.compile('x = 1; x = asyncArray(); x.pop()'));
    vm.realm.global.asyncArray = function() {
      fiber.pause();
      expect(vm.realm.global.x).to.eql(1);
      return setTimeout(function() {
        var rv;
        rv = [1, 2, 3];
        fiber.setReturnValue(rv);
        expect(fiber.resume()).to.eql(3);
        expect(vm.realm.global.x).to.eql(rv);
        expect(rv).to.eql([1, 2]);
        return done();
      });
    };
    return fiber.run();
  });
  it('instruction timeout', function() {
    var code, e, fiber;
    code = "i = 0\ninfiniteLoop();\nfunction infiniteLoop() {\n  while (true) i++\n}";
    try {
      return vm["eval"](code, '<timeout>', 500);
    } catch (_error) {
      e = _error;
      fiber = e.fiber;
      expect(e.stack).to.eql("TimeoutError: Script timed out\n    at infiniteLoop (<timeout>:4:15)\n    at <timeout>:2:0");
      expect(fiber.timedOut()).to.eql(true);
      expect(vm.realm.global.i).to.eql(37);
      try {
        return fiber.resume(1000);
      } catch (_error) {
        e = _error;
        expect(e.stack).to.eql("TimeoutError: Script timed out\n    at infiniteLoop (<timeout>:4:15)\n    at <timeout>:2:0");
        expect(fiber.timedOut()).to.eql(true);
        return expect(vm.realm.global.i).to.eql(114);
      }
    }
  });
  return it('customize recursion depth', function() {
    var VmError, code, fiber, msg, script;
    code = "var i = 0;\nvar j = rec();\n\nfunction rec() {\n  if (i < 1000) {\n    i++;\n    return rec();\n  }\n  return i;\n};";
    script = Vm.compile(code, 'stackoverflow.js');
    VmError = vm.realm.global.Error;
    msg = /^maximum\scall\sstack\ssize\sexceeded$/;
    fiber = vm.createFiber(script);
    expect((function() {
      return fiber.run();
    })).to.throwError(function(e) {
      expect(e).to.be.a(VmError);
      return expect(e.message).to.match(msg);
    });
    expect(vm.realm.global.j).to.eql(void 0);
    fiber = vm.createFiber(script);
    fiber.maxDepth += 1;
    fiber.run();
    return expect(vm.realm.global.j).to.eql(1000);
  });
});

strip = function(global) {
  delete global.Object;
  delete global.Function;
  delete global.Number;
  delete global.Boolean;
  delete global.String;
  delete global.Array;
  delete global.Date;
  delete global.RegExp;
  delete global.Error;
  delete global.EvalError;
  delete global.RangeError;
  delete global.ReferenceError;
  delete global.SyntaxError;
  delete global.TypeError;
  delete global.URIError;
  delete global.Math;
  delete global.JSON;
  delete global.StopIteration;
  delete global.Dog;
  delete global.undefined;
  delete global.global;
  delete global.console;
  delete global.parseFloat;
  delete global.parseInt;
  delete global["eval"];
  delete global.log;
  return global;
};


  return module.exports;
})({exports: $$___test_vm}, $$___test_vm);var $$___src_index = {};
$$___src_index = (function(module, exports) {

  module.exports = $$___src_vm_index;


  return module.exports;
})({exports: $$___src_index}, $$___src_index);
    
  return $$___src_index;
}),
(function() {
  var require;

  

  return require;
}),
(function(root, factory, dependenciesFactory) {
  if(typeof exports === 'object') {
    module.exports = factory(require, exports, module);
  }
  else {
    // provide a separate context for dependencies
    var depContext = {};
    var depAliases = {};
    var depReq = dependenciesFactory.call(depContext);
    var mod = {exports: {}};
    var exp = mod.exports;
    var exported = function(obj) {
      // check if the module exported anything
      if (typeof obj !== 'object') return true;
      for (var k in obj) {
        if (!Object.prototype.hasOwnProperty.call(obj, k)) continue;
        return true;
      }
      return false;
    };
    var req = function(id) {
      var alias = id;
      if (alias in depAliases) id = depAliases[alias];
      if (typeof depReq == 'function') {
        try {
          var exp = depReq(alias);
          if (exported(exp)) return exp;
        } catch (e) {
          if (id !== alias) {
            // it is possible that the module wasn't loaded yet and
            // its alias is not available in the depContext object
            try {
              exp = depReq(id);
              if (exported(exp)) return exp;
            } catch (e) {
            }
          }
        }
      }
      if (!(id in depContext) && !(id in root))
        throw new Error("Cannot find module '" + alias + "'");
      return depContext[id] || root[id];
    };
    mod = factory(req, exp, mod, depContext);

    if (typeof define === 'function' && define.amd) {
      define(
      [
      'module', 'exports', 'require'], function(module, exports, require) {
          module.exports = mod;
          return mod;
       });
    } else {
      
      root['Vm'] = mod;
      
    }
  }
})
);

//@ sourceMappingURL=test.js.map