{
  "_from": "ytdl-core",
  "_id": "ytdl-core@4.4.5",
  "_inBundle": false,
  "_integrity": "sha512-/ugilIF2PskxNfQgkYZ/esvkp+fiB/mOPdIExW/En+1QTbq5VeTVqgf2hETTen0Co2lHMM4eRxPaczDHTmkb7A==",
  "_location": "/ytdl-core",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ytdl-core",
    "fetchSpec": "latest",
    "name": "ytdl-core",
    "raw": "ytdl-core",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ytdl-core/-/ytdl-core-4.4.5.tgz",
  "_shasum": "761a6792f83e0fd2f2605874ea4c3d51ab717aab",
  "_spec": "ytdl-core",
  "_where": "/home/crusaderbot",
  "author": {
    "email": "fentbox@gmail.com",
    "name": "fent",
    "url": "https://github.com/fent"
  },
  "bugs": {
    "url": "https://github.com/fent/node-ytdl-core/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Tobias Kutscha",
      "url": "https://github.com/TimeForANinja"
    },
    {
      "name": "Andrew Kelley",
      "url": "https://github.com/andrewrk"
    },
    {
      "name": "Mauricio Allende",
      "url": "https://github.com/mallendeo"
    },
    {
      "name": "Rodrigo Altamirano",
      "url": "https://github.com/raltamirano"
    },
    {
      "name": "Jim Buck",
      "url": "https://github.com/JimmyBoh"
    }
  ],
  "dependencies": {
    "m3u8stream": "^0.8.3",
    "miniget": "^4.0.0",
    "sax": "^1.1.3"
  },
  "deprecated": false,
  "description": "YouTube video downloader in pure javascript.",
  "devDependencies": {
    "@types/node": "^13.1.0",
    "assert-diff": "^3.0.1",
    "dtslint": "^3.6.14",
    "eslint": "^6.8.0",
    "mocha": "^7.0.0",
    "muk-require": "^1.2.0",
    "nock": "^13.0.4",
    "nyc": "^15.0.0",
    "sinon": "^9.0.0",
    "stream-equal": "~1.1.0",
    "typescript": "^3.9.7"
  },
  "engines": {
    "node": ">=10"
  },
  "files": [
    "lib",
    "typings"
  ],
  "homepage": "https://github.com/fent/node-ytdl-core#readme",
  "keywords": [
    "download",
    "video",
    "youtube"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "ytdl-core",
  "optionalDependencies": {},
  "readme": "# node-ytdl-core\n[![Dependency Status](https://david-dm.org/fent/node-ytdl-core.svg)](https://david-dm.org/fent/node-ytdl-core)\n[![codecov](https://codecov.io/gh/fent/node-ytdl-core/branch/master/graph/badge.svg)](https://codecov.io/gh/fent/node-ytdl-core)\n[![Discord](https://img.shields.io/discord/484464227067887645.svg)](https://discord.gg/V3vSCs7)\n\nYet another youtube downloading module. Written with only Javascript and a node-friendly streaming interface.\n\n# Support\nYou can contact us for support on our [chat server](https://discord.gg/V3vSCs7)\n\n# Usage\n\n```js\nconst fs = require('fs');\nconst ytdl = require('ytdl-core');\n// TypeScript: import ytdl from 'ytdl-core'; with --esModuleInterop\n// TypeScript: import * as ytdl from 'ytdl-core'; with --allowSyntheticDefaultImports\n// TypeScript: import ytdl = require('ytdl-core'); with neither of the above\n\nytdl('http://www.youtube.com/watch?v=A02s8omM_hI')\n  .pipe(fs.createWriteStream('video.flv'));\n```\n\n\n# API\n### ytdl(url, [options])\n\nAttempts to download a video from the given url. Returns a [readable stream](https://nodejs.org/api/stream.html#stream_class_stream_readable). `options` can have the following keys\n\n* `quality` - Video quality to download. Can be an [itag value](http://en.wikipedia.org/wiki/YouTube#Quality_and_formats), a list of itag values, or `highest`/`lowest`/`highestaudio`/`lowestaudio`/`highestvideo`/`lowestvideo`. `highestaudio`/`lowestaudio`/`highestvideo`/`lowestvideo` all prefer audio/video only respectively. Defaults to `highest`, which prefers formats with both video and audio.\n\n  A typical video's formats will be sorted in the following way using `quality: 'highest'`\n  ```\n  itag container quality codecs                 bitrate  audio bitrate\n  18   mp4       360p    avc1.42001E, mp4a.40.2 696.66KB 96KB\n  137  mp4       1080p   avc1.640028            4.53MB\n  248  webm      1080p   vp9                    2.52MB\n  136  mp4       720p    avc1.4d4016            2.2MB\n  247  webm      720p    vp9                    1.44MB\n  135  mp4       480p    avc1.4d4014            1.1MB\n  134  mp4       360p    avc1.4d401e            593.26KB\n  140  mp4               mp4a.40.2                       128KB\n  ```\n  format 18 at 360p will be chosen first since it's the highest quality format with both video and audio.\n* `filter` - Used to filter the list of formats to choose from. Can be `audioandvideo` or `videoandaudio` to filter formats that contain both video and audio, `video` to filter for formats that contain video, or `videoonly` for formats that contain video and no additional audio track. Can also be `audio` or `audioonly`. You can give a filtering function that gets called with each format available. This function is given the `format` object as its first argument, and should return true if the format is preferable.\n  ```js\n  // Example with custom function.\n  ytdl(url, { filter: format => format.container === 'mp4' })\n  ```\n* `format` - Primarily used to download specific video or audio streams. This can be a specific `format` object returned from `getInfo`.\n  * Supplying this option will ignore the `filter` and `quality` options since the format is explicitly provided.\n* `range` - A byte range in the form `{start: INT, end: INT}` that specifies part of the file to download, ie {start: 10355705, end: 12452856}. Not supported on segmented (DASH MPD, m3u8) formats.\n  * This downloads a portion of the file, and not a separately spliced video.\n* `begin` - What time in the video to begin. Supports formats `00:00:00.000`, `0ms, 0s, 0m, 0h`, or number of milliseconds. Example: `1:30`, `05:10.123`, `10m30s`.\n  * For live videos, this also accepts a unix timestamp or Date object, and defaults to `Date.now()`.\n  * This option is not very reliable for non-live videos, see [#129](https://github.com/fent/node-ytdl-core/issues/129), [#219](https://github.com/fent/node-ytdl-core/issues/219).\n* `liveBuffer` - How much time buffer to use for live videos in milliseconds. Default is `20000`.\n* `requestOptions` - Anything to merge into the request options which [miniget](https://github.com/fent/node-miniget) is called with, such as `headers`.\n* `highWaterMark` - How much of the video download to buffer into memory. See [node's docs](https://nodejs.org/api/stream.html#stream_constructor_new_stream_writable_options) for more. Defaults to 512KB.\n* `dlChunkSize` - The size of the download chunk in bytes. When the chosen format is video only or audio only, the download in this case is separated into multiple chunks to avoid throttling. Defaults to 10MB.\n* `lang` - The 2 character symbol of a language. Default is `en`.\n\n#### Event: info\n* [`ytdl.videoInfo`](typings/index.d.ts#L194) - Info.\n* [`ytdl.videoFormat`](typings/index.d.ts#L22) - Video Format.\n\nEmitted when the video's `info` is fetched, along with the chosen format to download.\n\n#### Event: progress\n* `number` - Chunk length in bytes or segment number.\n* `number` - Total bytes or segments downloaded.\n* `number` - Total bytes or segments.\n\nEmitted whenever a new chunk is received. Passes values describing the download progress.\n\n#### miniget events\n\nAll [miniget events](https://github.com/fent/node-miniget#event-redirect) are forwarded and can be listened to from the returned stream.\n\n### Stream#destroy()\n\nCall to abort and stop downloading a video.\n\n### async ytdl.getBasicInfo(url, [options])\n\nUse this if you only want to get metainfo from a video.\n\n### async ytdl.getInfo(url, [options])\n\nGets metainfo from a video. Includes additional formats, and ready to download deciphered URL. This is what the `ytdl()` function uses internally.\n\n### ytdl.downloadFromInfo(info, options)\n\nOnce you have received metadata from a video with the `ytdl.getInfo` function, you may pass that information along with other options to this function.\n\n### ytdl.chooseFormat(formats, options)\n\nCan be used if you'd like to choose a format yourself with the [options above](#ytdlurl-options).\nThrows an Error if it fails to find any matching format.\n\n```js\n// Example of choosing a video format.\nlet info = await ytdl.getInfo(videoID);\nlet format = ytdl.chooseFormat(info.formats, { quality: '134' });\nconsole.log('Format found!', format);\n```\n\n### ytdl.filterFormats(formats, filter)\n\nIf you'd like to work with only some formats, you can use the [`filter` option above](#ytdlurl-options).\n\n```js\n// Example of filtering the formats to audio only.\nlet info = await ytdl.getInfo(videoID);\nlet audioFormats = ytdl.filterFormats(info.formats, 'audioonly');\nconsole.log('Formats with only audio: ' + audioFormats.length);\n```\n\n### ytdl.validateID(id)\n\nReturns true if the given string satisfies YouTube's ID format.\n\n### ytdl.validateURL(url)\n\nReturns true if able to parse out a valid video ID.\n\n### ytdl.getURLVideoID(url)\n\nReturns a video ID from a YouTube URL.\nThrows an Error if it fails to parse an ID.\n\n### ytdl.getVideoID(str)\n\nSame as the above `ytdl.getURLVideoID()`, but can be called with the video ID directly, in which case it returns it. This is what ytdl uses internally.\nThrows an Error if it fails to parse an ID.\n\n## Limitations\n\nytdl cannot download videos that fall into the following\n* Regionally restricted (requires a [proxy](example/proxy.js))\n* Private (if you have access, requires [cookies](example/cookies.js))\n* Rentals (if you have access, requires [cookies](example/cookies.js))\n\nGenerated download links are valid for 6 hours, and may only be downloadable from the same IP address.\n\n## Handling Separate Streams\n\nTypically 1080p or better video does not have audio encoded with it. The audio must be downloaded separately and merged via an appropriate encoding library. `ffmpeg` is the most widely used tool, with many [Node.js modules available](https://www.npmjs.com/search?q=ffmpeg). Use the `format` objects returned from `ytdl.getInfo` to download specific streams to combine to fit your needs. Look at [example/ffmpeg.js](example/ffmpeg.js) for an example on doing this.\n\n## What if it stops working?\n\nYoutube updates their website all the time, it's not that rare for this to stop working. If it doesn't work for you and you're using the latest version, feel free to open up an issue. Make sure to check if there isn't one already with the same error.\n\nIf you'd like to help fix the issue, look at the type of error first. If you're getting the following error\n\n    Could not extract signature deciphering actions\n\nRun the tests at `test/irl-test.js` just to make sure that this is actually an issue with ytdl-core.\n\n    mocha test/irl-test.js\n\nThese tests are not mocked, and they try to start downloading a few videos. If these fail, then it's time to debug.\n\nFor getting started with that, you can look at the `extractActions()` function in [`/lib/sig.js`](https://github.com/fent/node-ytdl-core/blob/master/lib/sig.js).\n\n\n# Install\n\n```bash\nnpm install ytdl-core@latest\n```\n\nOr for Yarn users:\n```bash\nyarn add ytdl-core@latest\n```\n\nMake sure you're installing the latest version of ytdl-core to keep up with the latest fixes.\n\nIf you're using a bot or app that uses ytdl-core such as [ytdl-core-discord](https://github.com/amishshah/ytdl-core-discord) or [discord-player](https://github.com/Androz2091/discord-player), it may be dependent on an older version. To update its ytdl-core version, you'll have to fork the project and update its `package.json` file, you can't simply change the version on your project's `package.json`, the app will still use its own older version of ytdl-core.\n\nYou can then submit a pull request to their project and point to your fork temporarily. You can also check their pull request and check if there's one open already, and point to that instead. To point to a github's repo's branch in your `package.json`, you can do\n\n```json\n  \"ytdl-core-discord\": \"amishshah/ytdl-core-discord#dependabot/npm_and_yarn/ytdl-core-2.0.1\"\n```\n\n# Related Projects\n\n- [ytdl](https://github.com/fent/node-ytdl) - A cli wrapper of this.\n- [pully](https://github.com/JimmyBoh/pully) - Another cli wrapper of this aimed at high quality formats.\n- [ytsr](https://github.com/TimeForANinja/node-ytsr) - YouTube video search results.\n- [ytpl](https://github.com/TimeForANinja/node-ytpl) - YouTube playlist and channel resolver.\n\n\n# Tests\nTests are written with [mocha](https://mochajs.org)\n\n```bash\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-ytdl-core.git"
  },
  "scripts": {
    "lint": "eslint ./",
    "lint:fix": "eslint --fix ./",
    "lint:typings": "tslint typings/index.d.ts",
    "lint:typings:fix": "tslint --fix typings/index.d.ts",
    "test": "nyc --reporter=lcov --reporter=text-summary npm run test:unit",
    "test:irl": "mocha --timeout 16000 test/irl-test.js",
    "test:unit": "mocha --ignore test/irl-test.js test/*-test.js --timeout 4000"
  },
  "types": "./typings/index.d.ts",
  "version": "4.4.5"
}
